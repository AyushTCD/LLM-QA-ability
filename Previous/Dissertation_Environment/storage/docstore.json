{"docstore/metadata": {"16b44bdc-2e04-4252-a87d-05ebd45afe03": {"doc_hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1"}, "3ed7dff1-04db-4ce5-858d-c43aee47320f": {"doc_hash": "7258956ade9d7c25fd4eedf4c8e016451bc2ea71d949cc7857b89a31a50b65d4"}, "e7898c51-29da-4c33-8dc6-2b93d0d1a432": {"doc_hash": "1aa6001e7f4aeec183a6bc175bb38b68babf1059c984b79eb9f505151a174b9a"}, "54341fe1-e901-44cc-92cd-2ab2b695a3db": {"doc_hash": "14ac75d56b042ce741d8f144ae6018a029ff8ef4c12864eb9b4c5b97c4b09320"}, "c417791a-3540-4073-81b8-7a8cf4f11db3": {"doc_hash": "5d18974691e6bb396ba181a0aedc30b275cd28e149a19b7e696711f35b5ec9ee"}, "766bc2f3-4518-4935-9efb-b8f99ff8f653": {"doc_hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc"}, "f750bfba-6b58-4981-9a34-c76a04e92dad": {"doc_hash": "0864cf1fd5e2396d30bb62ba8db6ce4e7f70529a1bc0589c50eaaa215cdd1f11", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "9cab0272-c293-451f-8dec-26f3228c16a4": {"doc_hash": "af6ed1c2bbde147ac0940dea7124d08daa9508eecc4a944f1bb46f299e2f2e0a", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "1387d54c-fca3-4622-a4fd-fe50b9f25baf": {"doc_hash": "0d9626f7ce698c0a9c96de84045c6cbd9f0cb68a296fbdc50298c253ecdda711", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "d97f7127-43f0-4be4-87b2-e466444e7821": {"doc_hash": "cfeb45f7bc45a3b19542229b730500dc80f4abb309c6a67a9d369a87ce60fc6d", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "7547bc0a-8f5d-4860-a706-9fba54796dfc": {"doc_hash": "870a9af11492f39dc0cac539eebd890504da9a6831abe31b40c64f3f6d4f81a6", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "d5f39b6c-4f76-46ca-897b-bdf6d7ad22bf": {"doc_hash": "7f01c04d4b23f2a246e7993aa14d63fee34280df37ae3d327b7288a9a078a0ad", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "8b3e9128-c510-4fb8-bdd5-037bf5e8d7c8": {"doc_hash": "1bc293a9b1e5490a12d143225a55dcce117441bc634e2ec1032251e5e7a3ee01", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "efb4c8b6-e048-4593-b57b-63916960d335": {"doc_hash": "9a2a201f5a80e829cd1293b3b10be713b43603f510a798566a8a0d5a6a1e0f1e", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "a32f35a5-7c7e-4f3f-ba1b-f7c5fe780653": {"doc_hash": "52db48c163a62a95af8e5a7a862242d3bd51a5f431509f0a1a1d36f81777143f", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "4bf7b31b-9993-42e3-ac3b-957295b77658": {"doc_hash": "4e9dd05c028290befda7333a99935ee6f7e5551b927a444750157c0457d3549e", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "bb395311-aa2b-4d19-86a7-01ab66a57d0d": {"doc_hash": "3bf5547e2114b9b2b2f18e11c27945a9b375049f60b8925853635aff60770e58", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "6763962c-e905-400b-94dc-d115ccc5b8e2": {"doc_hash": "28f8bb7872dcbfa7ec82302dc2f77cefd7aa5cbca57355b0b082dbd3c0231fc5", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "e1ac7c70-407f-49bf-879c-89179e9202b6": {"doc_hash": "87acc367490e207661b36e4dc714b475fac0a7e3c9fe485abe0b08b1f0526d0b", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "2d22ee02-5c0e-4572-ba57-d9edc9e31fb2": {"doc_hash": "89f16807e1ca425773b21c1d85c8ff17ccc840fef8e1642b5ba99cdcfb5a1f38", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "e9df62af-ded3-44f0-aa9a-d1b6d1d0c10d": {"doc_hash": "de545dd9ed77d0ab49d951d360f8feab54087c6fc0f4ae2fd7446f72fdec397f", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "b3c24fef-b7e6-4983-84fd-c6dbb85631a8": {"doc_hash": "a31417e15b3ba07ec5c1ba8f2aff7be6fd4a18de81ee110582cb6b8c7ae12e5a", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "59fbd9b7-e822-4cba-88f0-461fbdedb304": {"doc_hash": "ee8d2711e8d6f64065af9a563adeaa2b52f6da3d9f0b6dc29ff4a121dade4b5e", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "28c1f503-0170-4cac-a56a-9d4050aa16b9": {"doc_hash": "a17021f6141d33afadd45482189f2d4a37fa07698dbdddab9ccd637f46e3eb2e", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "19d7b26f-5148-4cba-b5a7-de455aef8551": {"doc_hash": "c4ba1faaac50a4a14cbe295360067cd73a5c0bdac361f813aef798bf2c93c0c7", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "38e91fa7-8a12-434c-9187-2d3b30b5152f": {"doc_hash": "a2cdc7b6e9eeb657a1516679718943a7eef1ea5055d76f084fb99ba5770c13eb", "ref_doc_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03"}, "40f33ad3-33a5-427f-b5ac-6a682ea5e5c1": {"doc_hash": "db75614f5fb1ff33c83d98115f7111de92641eab2239a3e0f5c4fb7dc6bcf3ff", "ref_doc_id": "3ed7dff1-04db-4ce5-858d-c43aee47320f"}, "c9e5357e-e386-4494-a394-edba02b3c4a2": {"doc_hash": "c7cc2e6ee133d40215cd97b384ce11493fea18a74dc9ab32fb76027388715c55", "ref_doc_id": "3ed7dff1-04db-4ce5-858d-c43aee47320f"}, "8b6f6b6d-0d96-44a3-a45a-4d2e237412c1": {"doc_hash": "3f9bf3b83bc3dbf3288f729483baf2b122fc0704191aa3b6674a8c336b02dcd3", "ref_doc_id": "3ed7dff1-04db-4ce5-858d-c43aee47320f"}, "22d1b845-dcd1-4e9d-a158-5d3e652595da": {"doc_hash": "0f319933a9c9b1b5e2b0b0c2bf188d05e6a637b0edd15ecb3fd73c6f000e7b6b", "ref_doc_id": "e7898c51-29da-4c33-8dc6-2b93d0d1a432"}, "93ac1188-dd13-4e4e-ae41-4849cd2333a5": {"doc_hash": "757ccfd8e938a982292b0387cf397d01b8e5c2535b12b01ebceaaf088181a36c", "ref_doc_id": "e7898c51-29da-4c33-8dc6-2b93d0d1a432"}, "4fe16796-d411-4d5a-979e-9667004cfeb8": {"doc_hash": "7385a81843ea19dcb3a4118e954c9e66783f8d3cb848f6f419976394daf2d3df", "ref_doc_id": "e7898c51-29da-4c33-8dc6-2b93d0d1a432"}, "5682fbee-481f-4173-b159-b8cbe7a60299": {"doc_hash": "f4324507de1b32aaf1655438bd2059f396e52f0a535472d7658a22a0c6b5b897", "ref_doc_id": "e7898c51-29da-4c33-8dc6-2b93d0d1a432"}, "312079db-f837-486f-a031-d90ed52ef056": {"doc_hash": "e8023cf12278ce4ef07da1129986c040d89b413a2a247f7cd0b9bff97cc17072", "ref_doc_id": "e7898c51-29da-4c33-8dc6-2b93d0d1a432"}, "e010bab3-21ac-4a78-bd9f-057387c59a1c": {"doc_hash": "99a8b3652b8ba4cc8e819606d4da39819da6f54484aea5dc883b23cc8235ba94", "ref_doc_id": "e7898c51-29da-4c33-8dc6-2b93d0d1a432"}, "6a0e90e9-b24a-4011-89dc-deffed751f9c": {"doc_hash": "cca064ec269e496120bcaff9b61d57f5982b43b1993611ec1d493b29fa6c5542", "ref_doc_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db"}, "0ca2d67a-610c-4b0d-a683-a9381c923ef0": {"doc_hash": "d42a5329a62cdec8c9ae42445ea31cd74e4ce2b8ccb3dfc17b7e8522f76c7662", "ref_doc_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db"}, "23858170-68a0-48ae-ad6e-20a5ffac6194": {"doc_hash": "8b7db72e7a5d78fd1a48d1436e858c31c1e6b22ed23b512754045480093c94e1", "ref_doc_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db"}, "6db238cf-e02d-4256-96c6-3e7e89769f73": {"doc_hash": "e2eeea953f848ba49aa6e31c92b73acf30bbb62f8d23ba92901cc70bf8903a99", "ref_doc_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db"}, "d936a809-99eb-48d8-b330-cff4c0e95dd5": {"doc_hash": "7f79ddc566f96ceff945652c83fea1bdee7b9d44741af7056df6c101205c5fd6", "ref_doc_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db"}, "4d2629b8-419b-4615-b1bc-7a082feff008": {"doc_hash": "5947f2ad2166bb789ddd78269c576f5daa112b2c37c790ae3fb1a304c0c9261c", "ref_doc_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db"}, "7a472ee7-7fb3-46cc-a12f-b7ce9be16b0d": {"doc_hash": "9b048d378e331d9e7864a1043b82d41691052d08082ac97bf279276b393f24d6", "ref_doc_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db"}, "d31775c8-a378-4fb0-97c8-caafc702d231": {"doc_hash": "8cf4b9a5df03743256727b6a83590af983c45443bcdfbd25b4dceae39d06bebc", "ref_doc_id": "c417791a-3540-4073-81b8-7a8cf4f11db3"}, "31728af0-7143-463d-8270-c667625f9a6c": {"doc_hash": "dda939c97c7f51b6da312ddaa3baf26ee54ea2ecfaeef9b6b300cc860ca3d24d", "ref_doc_id": "c417791a-3540-4073-81b8-7a8cf4f11db3"}, "655e89fd-8cbc-4af6-a9c6-f5178a184cb1": {"doc_hash": "e9999706d7286cc08f28dd81e46c385549a1bf012f35d5c36a5c5c769e74cc0a", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "f729d99c-fe22-40b2-a60b-0a8d155f83fd": {"doc_hash": "88788c9e61cf112e773d0fccd5f51095936a61c02e6063c2c6e06175200b63ce", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "9f17f435-e361-402a-a45b-239ae2de1499": {"doc_hash": "cae0d3c8a909549c9a9556e4ee0265a9e8d8ca803d91de4a7fbd2a1325eaa6d4", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "2cf0da72-949a-445f-b01e-21328e7f0b01": {"doc_hash": "36bfd3d188f06877b4c92cacf3d05ca7deeb297113d53a6b1ba00f09aa427330", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "e9d81b43-8cdc-4b05-978d-be0256050b44": {"doc_hash": "8ffc6a252999aacdfa0d2c444cdfbb01b42c603e044c51f6da77a5a66e5a1f2c", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "c3d71501-468b-4979-be0a-cfa5e9e57fa0": {"doc_hash": "f513f93f7dd69e829eef4d9badc804579e2ab24763cdab4123e8bd8fa22b3c13", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "898686b6-4513-4f4a-924a-fbdc1018b89f": {"doc_hash": "ea1fbaa3d869f36ed9959aa7a49c299b535e91f4aa69b6551e893faed6a9aacf", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "a9716ea6-2e50-4201-8680-4444e1f88b84": {"doc_hash": "2d98896b248ba74450db6363ebbfc13809bc590f7a529f1372309c297cda76bf", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "675899ad-15e0-4a64-aeec-000470a3dfa9": {"doc_hash": "99f899466e86f1c5044fd5a9dc21635c6faa82297da10cebbd5bcb26ea72e29a", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "bec842a0-27ff-4ba6-893a-3d87dbc652bc": {"doc_hash": "966308f1f13656c33c0b894b6aedfa42fe499a946b9ebee207e351731caafa17", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "afdb50f0-eaa8-401c-a18f-883876dd5e41": {"doc_hash": "b087b5211812b15eeb196350ec90c3417576de3c4ba000966f73adb49e512f78", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "636af58f-c0f6-4ca8-8a88-9ce591624b07": {"doc_hash": "c892bf361935c8a99740e8cc11f0d1bd511b67afbeb607c75a0f1829a5d58b0e", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "2fb8265c-e816-4dc8-b3a1-93196b868a26": {"doc_hash": "efbe9af7b1a2d29a9c3f504049bb69c2eb4cf52cf57c69d274a904daa36d76b7", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "237b7135-6c30-4bdf-bfdd-732db296687e": {"doc_hash": "54e7b404db67ab52ea47fff89292801a8db245396bc4fece74b8195ea93828ec", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "33bca992-e164-40b0-ae12-04d8db6e3bb7": {"doc_hash": "df778f1d176e7e7a5e93d0e126359c5e29d0e62cb8c88bf740e58b3bccf3f1d6", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "d08ce7e3-de42-4f8b-afe0-74f5242a9aa6": {"doc_hash": "a2ae0d2d12952f898156962335c766ab3e6d62c2e4680342760f0ccf828de38f", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "a341bab4-c4a1-40e3-aee6-5189fbcbf433": {"doc_hash": "959fc00aeb38fee4d098ad655e4a0f817ca52805e0698648cd47f67eaed5df1e", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "ab4ecd3f-3cbf-4953-bb7a-3082e9a2b468": {"doc_hash": "7e927d14b15a1074383a6624a484022ec74570c186c49f81e6997d6790c82c85", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "3cb775e2-dbfd-491d-88b0-c71e5a06b076": {"doc_hash": "bfb5f456fe4321b6cc58b67e939a7920fa366b43104474226fae1a1c225748fd", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "801f0a3c-c73f-4d0c-b1e8-cec3ed2fd920": {"doc_hash": "d747d4fcc6e1201fad08ceb0d807bc37a6a332406fcabcc04973b3603ef9bc84", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}, "676db4ca-257a-4966-8e8a-40a607a0a5db": {"doc_hash": "99b9365919924f137d7492be13f18768d19e7d86aec46e337a53769b7512fb88", "ref_doc_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653"}}, "docstore/data": {"f750bfba-6b58-4981-9a34-c76a04e92dad": {"__data__": {"id_": "f750bfba-6b58-4981-9a34-c76a04e92dad", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9cab0272-c293-451f-8dec-26f3228c16a4", "node_type": "1", "metadata": {}, "hash": "c48bacfc4e1d6f5beafe17fb856e9769f04c4e1e937f0804a8ec8d8ec7e406e7", "class_name": "RelatedNodeInfo"}}, "text": "How to Do Great Work\n\nJuly 2023\n\nIf you collected lists of techniques for doing great work in a lot of different fields, what would the intersection look like? I decided to find out by making it.\n\nPartly my goal was to create a guide that could be used by someone working in any field. But I was also curious about the shape of the intersection. And one thing this exercise shows is that it does have a definite shape; it's not just a point labelled \"work hard.\"\n\nThe following recipe assumes you're very ambitious.\n\n\n\n\n\nThe first step is to decide what to work on. The work you choose needs to have three qualities: it has to be something you have a natural aptitude for, that you have a deep interest in, and that offers scope to do great work.\n\nIn practice you don't have to worry much about the third criterion. Ambitious people are if anything already too conservative about it. So all you need to do is find something you have an aptitude for and great interest in. [1]\n\nThat sounds straightforward, but it's often quite difficult. When you're young you don't know what you're good at or what different kinds of work are like. Some kinds of work you end up doing may not even exist yet. So while some people know what they want to do at 14, most have to figure it out.\n\nThe way to figure out what to work on is by working. If you're not sure what to work on, guess. But pick something and get going. You'll probably guess wrong some of the time, but that's fine. It's good to know about multiple things; some of the biggest discoveries come from noticing connections between different fields.\n\nDevelop a habit of working on your own projects. Don't let \"work\" mean something other people tell you to do. If you do manage to do great work one day, it will probably be on a project of your own. It may be within some bigger project, but you'll be driving your part of it.\n\nWhat should your projects be? Whatever seems to you excitingly ambitious. As you grow older and your taste in projects evolves, exciting and important will converge. At 7 it may seem excitingly ambitious to build huge things out of Lego, then at 14 to teach yourself calculus, till at 21 you're starting to explore unanswered questions in physics. But always preserve excitingness.\n\nThere's a kind of excited curiosity that's both the engine and the rudder of great work. It will not only drive you, but if you let it have its way, will also show you what to work on.\n\nWhat are you excessively curious about \u2014 curious to a degree that would bore most other people? That's what you're looking for.\n\nOnce you've found something you're excessively interested in, the next step is to learn enough about it to get you to one of the frontiers of knowledge. Knowledge expands fractally, and from a distance its edges look smooth, but once you learn enough to get close to one, they turn out to be full of gaps.\n\nThe next step is to notice them. This takes some skill, because your brain wants to ignore such gaps in order to make a simpler model of the world. Many discoveries have come from asking questions about things that everyone else took for granted. [2]\n\nIf the answers seem strange, so much the better. Great work often has a tincture of strangeness. You see this from painting to math. It would be affected to try to manufacture it, but if it appears, embrace it.\n\nBoldly chase outlier ideas, even if other people aren't interested in them \u2014 in fact, especially if they aren't. If you're excited about some possibility that everyone else ignores, and you have enough expertise to say precisely what they're all overlooking, that's as good a bet as you'll find. [3]\n\nFour steps: choose a field, learn enough to get to the frontier, notice gaps, explore promising ones. This is how practically everyone who's done great work has done it, from painters to physicists.\n\nSteps two and four will require hard work. It may not be possible to prove that you have to work hard to do great things, but the empirical evidence is on the scale of the evidence for mortality. That's why it's essential to work on something you're deeply interested in. Interest will drive you to work harder than mere diligence ever could.\n\nThe three most powerful motives are curiosity, delight, and the desire to do something impressive. Sometimes they converge, and that combination is the most powerful of all.\n\nThe big prize is to discover a new fractal bud. You notice a crack in the surface of knowledge, pry it open, and there's a whole world inside.", "start_char_idx": 0, "end_char_idx": 4508, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9cab0272-c293-451f-8dec-26f3228c16a4": {"__data__": {"id_": "9cab0272-c293-451f-8dec-26f3228c16a4", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f750bfba-6b58-4981-9a34-c76a04e92dad", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "0864cf1fd5e2396d30bb62ba8db6ce4e7f70529a1bc0589c50eaaa215cdd1f11", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1387d54c-fca3-4622-a4fd-fe50b9f25baf", "node_type": "1", "metadata": {}, "hash": "cb3b785aab14d9e32da866729754fb4464179cfba975542ec7486bb13f6b56ae", "class_name": "RelatedNodeInfo"}}, "text": "Let's talk a little more about the complicated business of figuring out what to work on. The main reason it's hard is that you can't tell what most kinds of work are like except by doing them. Which means the four steps overlap: you may have to work at something for years before you know how much you like it or how good you are at it. And in the meantime you're not doing, and thus not learning about, most other kinds of work. So in the worst case you choose late based on very incomplete information. [4]\n\nThe nature of ambition exacerbates this problem. Ambition comes in two forms, one that precedes interest in the subject and one that grows out of it. Most people who do great work have a mix, and the more you have of the former, the harder it will be to decide what to do.\n\nThe educational systems in most countries pretend it's easy. They expect you to commit to a field long before you could know what it's really like. And as a result an ambitious person on an optimal trajectory will often read to the system as an instance of breakage.\n\nIt would be better if they at least admitted it \u2014 if they admitted that the system not only can't do much to help you figure out what to work on, but is designed on the assumption that you'll somehow magically guess as a teenager. They don't tell you, but I will: when it comes to figuring out what to work on, you're on your own. Some people get lucky and do guess correctly, but the rest will find themselves scrambling diagonally across tracks laid down on the assumption that everyone does.\n\nWhat should you do if you're young and ambitious but don't know what to work on? What you should not do is drift along passively, assuming the problem will solve itself. You need to take action. But there is no systematic procedure you can follow. When you read biographies of people who've done great work, it's remarkable how much luck is involved. They discover what to work on as a result of a chance meeting, or by reading a book they happen to pick up. So you need to make yourself a big target for luck, and the way to do that is to be curious. Try lots of things, meet lots of people, read lots of books, ask lots of questions. [5]\n\nWhen in doubt, optimize for interestingness. Fields change as you learn more about them. What mathematicians do, for example, is very different from what you do in high school math classes. So you need to give different types of work a chance to show you what they're like. But a field should become increasingly interesting as you learn more about it. If it doesn't, it's probably not for you.\n\nDon't worry if you find you're interested in different things than other people. The stranger your tastes in interestingness, the better. Strange tastes are often strong ones, and a strong taste for work means you'll be productive. And you're more likely to find new things if you're looking where few have looked before.\n\nOne sign that you're suited for some kind of work is when you like even the parts that other people find tedious or frightening.\n\nBut fields aren't people; you don't owe them any loyalty. If in the course of working on one thing you discover another that's more exciting, don't be afraid to switch.\n\nIf you're making something for people, make sure it's something they actually want. The best way to do this is to make something you yourself want. Write the story you want to read; build the tool you want to use. Since your friends probably have similar interests, this will also get you your initial audience.\n\nThis should follow from the excitingness rule. Obviously the most exciting story to write will be the one you want to read. The reason I mention this case explicitly is that so many people get it wrong. Instead of making what they want, they try to make what some imaginary, more sophisticated audience wants. And once you go down that route, you're lost. [6]\n\nThere are a lot of forces that will lead you astray when you're trying to figure out what to work on. Pretentiousness, fashion, fear, money, politics, other people's wishes, eminent frauds. But if you stick to what you find genuinely interesting, you'll be proof against all of them. If you're interested, you're not astray.", "start_char_idx": 4514, "end_char_idx": 8720, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1387d54c-fca3-4622-a4fd-fe50b9f25baf": {"__data__": {"id_": "1387d54c-fca3-4622-a4fd-fe50b9f25baf", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9cab0272-c293-451f-8dec-26f3228c16a4", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "af6ed1c2bbde147ac0940dea7124d08daa9508eecc4a944f1bb46f299e2f2e0a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d97f7127-43f0-4be4-87b2-e466444e7821", "node_type": "1", "metadata": {}, "hash": "de0535ab7380d3dba55d32713bf4544758a636d8fe27a941d6617e76cdef9acd", "class_name": "RelatedNodeInfo"}}, "text": "Following your interests may sound like a rather passive strategy, but in practice it usually means following them past all sorts of obstacles. You usually have to risk rejection and failure. So it does take a good deal of boldness.\n\nBut while you need boldness, you don't usually need much planning. In most cases the recipe for doing great work is simply: work hard on excitingly ambitious projects, and something good will come of it. Instead of making a plan and then executing it, you just try to preserve certain invariants.\n\nThe trouble with planning is that it only works for achievements you can describe in advance. You can win a gold medal or get rich by deciding to as a child and then tenaciously pursuing that goal, but you can't discover natural selection that way.\n\nI think for most people who want to do great work, the right strategy is not to plan too much. At each stage do whatever seems most interesting and gives you the best options for the future. I call this approach \"staying upwind.\" This is how most people who've done great work seem to have done it.\n\n\n\n\n\nEven when you've found something exciting to work on, working on it is not always straightforward. There will be times when some new idea makes you leap out of bed in the morning and get straight to work. But there will also be plenty of times when things aren't like that.\n\nYou don't just put out your sail and get blown forward by inspiration. There are headwinds and currents and hidden shoals. So there's a technique to working, just as there is to sailing.\n\nFor example, while you must work hard, it's possible to work too hard, and if you do that you'll find you get diminishing returns: fatigue will make you stupid, and eventually even damage your health. The point at which work yields diminishing returns depends on the type. Some of the hardest types you might only be able to do for four or five hours a day.\n\nIdeally those hours will be contiguous. To the extent you can, try to arrange your life so you have big blocks of time to work in. You'll shy away from hard tasks if you know you might be interrupted.\n\nIt will probably be harder to start working than to keep working. You'll often have to trick yourself to get over that initial threshold. Don't worry about this; it's the nature of work, not a flaw in your character. Work has a sort of activation energy, both per day and per project. And since this threshold is fake in the sense that it's higher than the energy required to keep going, it's ok to tell yourself a lie of corresponding magnitude to get over it.\n\nIt's usually a mistake to lie to yourself if you want to do great work, but this is one of the rare cases where it isn't. When I'm reluctant to start work in the morning, I often trick myself by saying \"I'll just read over what I've got so far.\" Five minutes later I've found something that seems mistaken or incomplete, and I'm off.\n\nSimilar techniques work for starting new projects. It's ok to lie to yourself about how much work a project will entail, for example. Lots of great things began with someone saying \"How hard could it be?\"\n\nThis is one case where the young have an advantage. They're more optimistic, and even though one of the sources of their optimism is ignorance, in this case ignorance can sometimes beat knowledge.\n\nTry to finish what you start, though, even if it turns out to be more work than you expected. Finishing things is not just an exercise in tidiness or self-discipline. In many projects a lot of the best work happens in what was meant to be the final stage.\n\nAnother permissible lie is to exaggerate the importance of what you're working on, at least in your own mind. If that helps you discover something new, it may turn out not to have been a lie after all. [7]\n\n\n\n\n\nSince there are two senses of starting work \u2014 per day and per project \u2014 there are also two forms of procrastination. Per-project procrastination is far the more dangerous. You put off starting that ambitious project from year to year because the time isn't quite right. When you're procrastinating in units of years, you can get a lot not done. [8]\n\nOne reason per-project procrastination is so dangerous is that it usually camouflages itself as work. You're not just sitting around doing nothing; you're working industriously on something else. So per-project procrastination doesn't set off the alarms that per-day procrastination does. You're too busy to notice it.\n\nThe way to beat it is to stop occasionally and ask yourself: Am I working on what I most want to work on? When you're young it's ok if the answer is sometimes no, but this gets increasingly dangerous as you get older. [9]", "start_char_idx": 8726, "end_char_idx": 13397, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d97f7127-43f0-4be4-87b2-e466444e7821": {"__data__": {"id_": "d97f7127-43f0-4be4-87b2-e466444e7821", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1387d54c-fca3-4622-a4fd-fe50b9f25baf", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "0d9626f7ce698c0a9c96de84045c6cbd9f0cb68a296fbdc50298c253ecdda711", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7547bc0a-8f5d-4860-a706-9fba54796dfc", "node_type": "1", "metadata": {}, "hash": "40cf90acd71545d01836ffcf5354ee7be743478febb84682ccdf0a7705a4794c", "class_name": "RelatedNodeInfo"}}, "text": "Since there are two senses of starting work \u2014 per day and per project \u2014 there are also two forms of procrastination. Per-project procrastination is far the more dangerous. You put off starting that ambitious project from year to year because the time isn't quite right. When you're procrastinating in units of years, you can get a lot not done. [8]\n\nOne reason per-project procrastination is so dangerous is that it usually camouflages itself as work. You're not just sitting around doing nothing; you're working industriously on something else. So per-project procrastination doesn't set off the alarms that per-day procrastination does. You're too busy to notice it.\n\nThe way to beat it is to stop occasionally and ask yourself: Am I working on what I most want to work on? When you're young it's ok if the answer is sometimes no, but this gets increasingly dangerous as you get older. [9]\n\n\n\n\n\nGreat work usually entails spending what would seem to most people an unreasonable amount of time on a problem. You can't think of this time as a cost, or it will seem too high. You have to find the work sufficiently engaging as it's happening.\n\nThere may be some jobs where you have to work diligently for years at things you hate before you get to the good part, but this is not how great work happens. Great work happens by focusing consistently on something you're genuinely interested in. When you pause to take stock, you're surprised how far you've come.\n\nThe reason we're surprised is that we underestimate the cumulative effect of work. Writing a page a day doesn't sound like much, but if you do it every day you'll write a book a year. That's the key: consistency. People who do great things don't get a lot done every day. They get something done, rather than nothing.\n\nIf you do work that compounds, you'll get exponential growth. Most people who do this do it unconsciously, but it's worth stopping to think about. Learning, for example, is an instance of this phenomenon: the more you learn about something, the easier it is to learn more. Growing an audience is another: the more fans you have, the more new fans they'll bring you.\n\nThe trouble with exponential growth is that the curve feels flat in the beginning. It isn't; it's still a wonderful exponential curve. But we can't grasp that intuitively, so we underrate exponential growth in its early stages.\n\nSomething that grows exponentially can become so valuable that it's worth making an extraordinary effort to get it started. But since we underrate exponential growth early on, this too is mostly done unconsciously: people push through the initial, unrewarding phase of learning something new because they know from experience that learning new things always takes an initial push, or they grow their audience one fan at a time because they have nothing better to do. If people consciously realized they could invest in exponential growth, many more would do it.\n\n\n\n\n\nWork doesn't just happen when you're trying to. There's a kind of undirected thinking you do when walking or taking a shower or lying in bed that can be very powerful. By letting your mind wander a little, you'll often solve problems you were unable to solve by frontal attack.\n\nYou have to be working hard in the normal way to benefit from this phenomenon, though. You can't just walk around daydreaming. The daydreaming has to be interleaved with deliberate work that feeds it questions. [10]\n\nEveryone knows to avoid distractions at work, but it's also important to avoid them in the other half of the cycle. When you let your mind wander, it wanders to whatever you care about most at that moment. So avoid the kind of distraction that pushes your work out of the top spot, or you'll waste this valuable type of thinking on the distraction instead. (Exception: Don't avoid love.)", "start_char_idx": 12506, "end_char_idx": 16331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7547bc0a-8f5d-4860-a706-9fba54796dfc": {"__data__": {"id_": "7547bc0a-8f5d-4860-a706-9fba54796dfc", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d97f7127-43f0-4be4-87b2-e466444e7821", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "cfeb45f7bc45a3b19542229b730500dc80f4abb309c6a67a9d369a87ce60fc6d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d5f39b6c-4f76-46ca-897b-bdf6d7ad22bf", "node_type": "1", "metadata": {}, "hash": "bd76e437464f134de13a34d13074d8a66866b3e6317d7aa734c8dcc61d9b0607", "class_name": "RelatedNodeInfo"}}, "text": "Work doesn't just happen when you're trying to. There's a kind of undirected thinking you do when walking or taking a shower or lying in bed that can be very powerful. By letting your mind wander a little, you'll often solve problems you were unable to solve by frontal attack.\n\nYou have to be working hard in the normal way to benefit from this phenomenon, though. You can't just walk around daydreaming. The daydreaming has to be interleaved with deliberate work that feeds it questions. [10]\n\nEveryone knows to avoid distractions at work, but it's also important to avoid them in the other half of the cycle. When you let your mind wander, it wanders to whatever you care about most at that moment. So avoid the kind of distraction that pushes your work out of the top spot, or you'll waste this valuable type of thinking on the distraction instead. (Exception: Don't avoid love.)\n\n\n\n\n\nConsciously cultivate your taste in the work done in your field. Until you know which is the best and what makes it so, you don't know what you're aiming for.\n\nAnd that is what you're aiming for, because if you don't try to be the best, you won't even be good. This observation has been made by so many people in so many different fields that it might be worth thinking about why it's true. It could be because ambition is a phenomenon where almost all the error is in one direction \u2014 where almost all the shells that miss the target miss by falling short. Or it could be because ambition to be the best is a qualitatively different thing from ambition to be good. Or maybe being good is simply too vague a standard. Probably all three are true. [11]\n\nFortunately there's a kind of economy of scale here. Though it might seem like you'd be taking on a heavy burden by trying to be the best, in practice you often end up net ahead. It's exciting, and also strangely liberating. It simplifies things. In some ways it's easier to try to be the best than to try merely to be good.\n\nOne way to aim high is to try to make something that people will care about in a hundred years. Not because their opinions matter more than your contemporaries', but because something that still seems good in a hundred years is more likely to be genuinely good.\n\n\n\n\n\nDon't try to work in a distinctive style. Just try to do the best job you can; you won't be able to help doing it in a distinctive way.\n\nStyle is doing things in a distinctive way without trying to. Trying to is affectation.\n\nAffectation is in effect to pretend that someone other than you is doing the work. You adopt an impressive but fake persona, and while you're pleased with the impressiveness, the fakeness is what shows in the work. [12]\n\nThe temptation to be someone else is greatest for the young. They often feel like nobodies. But you never need to worry about that problem, because it's self-solving if you work on sufficiently ambitious projects. If you succeed at an ambitious project, you're not a nobody; you're the person who did it. So just do the work and your identity will take care of itself.", "start_char_idx": 15448, "end_char_idx": 18497, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5f39b6c-4f76-46ca-897b-bdf6d7ad22bf": {"__data__": {"id_": "d5f39b6c-4f76-46ca-897b-bdf6d7ad22bf", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7547bc0a-8f5d-4860-a706-9fba54796dfc", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "870a9af11492f39dc0cac539eebd890504da9a6831abe31b40c64f3f6d4f81a6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b3e9128-c510-4fb8-bdd5-037bf5e8d7c8", "node_type": "1", "metadata": {}, "hash": "2bd04b202832a8ae07b49cbb7de924e010ebeca53b6e258653170d58ae7e5162", "class_name": "RelatedNodeInfo"}}, "text": "Don't try to work in a distinctive style. Just try to do the best job you can; you won't be able to help doing it in a distinctive way.\n\nStyle is doing things in a distinctive way without trying to. Trying to is affectation.\n\nAffectation is in effect to pretend that someone other than you is doing the work. You adopt an impressive but fake persona, and while you're pleased with the impressiveness, the fakeness is what shows in the work. [12]\n\nThe temptation to be someone else is greatest for the young. They often feel like nobodies. But you never need to worry about that problem, because it's self-solving if you work on sufficiently ambitious projects. If you succeed at an ambitious project, you're not a nobody; you're the person who did it. So just do the work and your identity will take care of itself.\n\n\n\n\n\n\"Avoid affectation\" is a useful rule so far as it goes, but how would you express this idea positively? How would you say what to be, instead of what not to be? The best answer is earnest. If you're earnest you avoid not just affectation but a whole set of similar vices.\n\nThe core of being earnest is being intellectually honest. We're taught as children to be honest as an unselfish virtue \u2014 as a kind of sacrifice. But in fact it's a source of power too. To see new ideas, you need an exceptionally sharp eye for the truth. You're trying to see more truth than others have seen so far. And how can you have a sharp eye for the truth if you're intellectually dishonest?\n\nOne way to avoid intellectual dishonesty is to maintain a slight positive pressure in the opposite direction. Be aggressively willing to admit that you're mistaken. Once you've admitted you were mistaken about something, you're free. Till then you have to carry it. [13]\n\nAnother more subtle component of earnestness is informality. Informality is much more important than its grammatically negative name implies. It's not merely the absence of something. It means focusing on what matters instead of what doesn't.\n\nWhat formality and affectation have in common is that as well as doing the work, you're trying to seem a certain way as you're doing it. But any energy that goes into how you seem comes out of being good. That's one reason nerds have an advantage in doing great work: they expend little effort on seeming anything. In fact that's basically the definition of a nerd.\n\nNerds have a kind of innocent boldness that's exactly what you need in doing great work. It's not learned; it's preserved from childhood. So hold onto it. Be the one who puts things out there rather than the one who sits back and offers sophisticated-sounding criticisms of them. \"It's easy to criticize\" is true in the most literal sense, and the route to great work is never easy.\n\nThere may be some jobs where it's an advantage to be cynical and pessimistic, but if you want to do great work it's an advantage to be optimistic, even though that means you'll risk looking like a fool sometimes. There's an old tradition of doing the opposite. The Old Testament says it's better to keep quiet lest you look like a fool. But that's advice for seeming smart. If you actually want to discover new things, it's better to take the risk of telling people your ideas.\n\nSome people are naturally earnest, and with others it takes a conscious effort. Either kind of earnestness will suffice. But I doubt it would be possible to do great work without being earnest. It's so hard to do even if you are. You don't have enough margin for error to accommodate the distortions introduced by being affected, intellectually dishonest, orthodox, fashionable, or cool. [14]", "start_char_idx": 17682, "end_char_idx": 21314, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b3e9128-c510-4fb8-bdd5-037bf5e8d7c8": {"__data__": {"id_": "8b3e9128-c510-4fb8-bdd5-037bf5e8d7c8", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d5f39b6c-4f76-46ca-897b-bdf6d7ad22bf", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "7f01c04d4b23f2a246e7993aa14d63fee34280df37ae3d327b7288a9a078a0ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "efb4c8b6-e048-4593-b57b-63916960d335", "node_type": "1", "metadata": {}, "hash": "9e983e878591750d72c2a8226fb7db39a6766b9b5417bc8d424dc8757e4245a0", "class_name": "RelatedNodeInfo"}}, "text": "Great work is consistent not only with who did it, but with itself. It's usually all of a piece. So if you face a decision in the middle of working on something, ask which choice is more consistent.\n\nYou may have to throw things away and redo them. You won't necessarily have to, but you have to be willing to. And that can take some effort; when there's something you need to redo, status quo bias and laziness will combine to keep you in denial about it. To beat this ask: If I'd already made the change, would I want to revert to what I have now?\n\nHave the confidence to cut. Don't keep something that doesn't fit just because you're proud of it, or because it cost you a lot of effort.\n\nIndeed, in some kinds of work it's good to strip whatever you're doing to its essence. The result will be more concentrated; you'll understand it better; and you won't be able to lie to yourself about whether there's anything real there.\n\nMathematical elegance may sound like a mere metaphor, drawn from the arts. That's what I thought when I first heard the term \"elegant\" applied to a proof. But now I suspect it's conceptually prior \u2014 that the main ingredient in artistic elegance is mathematical elegance. At any rate it's a useful standard well beyond math.\n\nElegance can be a long-term bet, though. Laborious solutions will often have more prestige in the short term. They cost a lot of effort and they're hard to understand, both of which impress people, at least temporarily.\n\nWhereas some of the very best work will seem like it took comparatively little effort, because it was in a sense already there. It didn't have to be built, just seen. It's a very good sign when it's hard to say whether you're creating something or discovering it.\n\nWhen you're doing work that could be seen as either creation or discovery, err on the side of discovery. Try thinking of yourself as a mere conduit through which the ideas take their natural shape.\n\n(Strangely enough, one exception is the problem of choosing a problem to work on. This is usually seen as search, but in the best case it's more like creating something. In the best case you create the field in the process of exploring it.)\n\nSimilarly, if you're trying to build a powerful tool, make it gratuitously unrestrictive. A powerful tool almost by definition will be used in ways you didn't expect, so err on the side of eliminating restrictions, even if you don't know what the benefit will be.\n\nGreat work will often be tool-like in the sense of being something others build on. So it's a good sign if you're creating ideas that others could use, or exposing questions that others could answer. The best ideas have implications in many different areas.\n\nIf you express your ideas in the most general form, they'll be truer than you intended.", "start_char_idx": 21320, "end_char_idx": 24113, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "efb4c8b6-e048-4593-b57b-63916960d335": {"__data__": {"id_": "efb4c8b6-e048-4593-b57b-63916960d335", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b3e9128-c510-4fb8-bdd5-037bf5e8d7c8", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "1bc293a9b1e5490a12d143225a55dcce117441bc634e2ec1032251e5e7a3ee01", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a32f35a5-7c7e-4f3f-ba1b-f7c5fe780653", "node_type": "1", "metadata": {}, "hash": "3a4d9a2666c7e9e13420c6bac670bec4523ff0c0e91fb41889c8331f299873bf", "class_name": "RelatedNodeInfo"}}, "text": "True by itself is not enough, of course. Great ideas have to be true and new. And it takes a certain amount of ability to see new ideas even once you've learned enough to get to one of the frontiers of knowledge.\n\nIn English we give this ability names like originality, creativity, and imagination. And it seems reasonable to give it a separate name, because it does seem to some extent a separate skill. It's possible to have a great deal of ability in other respects \u2014 to have a great deal of what's often called \"technical ability\" \u2014 and yet not have much of this.\n\nI've never liked the term \"creative process.\" It seems misleading. Originality isn't a process, but a habit of mind. Original thinkers throw off new ideas about whatever they focus on, like an angle grinder throwing off sparks. They can't help it.\n\nIf the thing they're focused on is something they don't understand very well, these new ideas might not be good. One of the most original thinkers I know decided to focus on dating after he got divorced. He knew roughly as much about dating as the average 15 year old, and the results were spectacularly colorful. But to see originality separated from expertise like that made its nature all the more clear.\n\nI don't know if it's possible to cultivate originality, but there are definitely ways to make the most of however much you have. For example, you're much more likely to have original ideas when you're working on something. Original ideas don't come from trying to have original ideas. They come from trying to build or understand something slightly too difficult. [15]\n\nTalking or writing about the things you're interested in is a good way to generate new ideas. When you try to put ideas into words, a missing idea creates a sort of vacuum that draws it out of you. Indeed, there's a kind of thinking that can only be done by writing.\n\nChanging your context can help. If you visit a new place, you'll often find you have new ideas there. The journey itself often dislodges them. But you may not have to go far to get this benefit. Sometimes it's enough just to go for a walk. [16]\n\nIt also helps to travel in topic space. You'll have more new ideas if you explore lots of different topics, partly because it gives the angle grinder more surface area to work on, and partly because analogies are an especially fruitful source of new ideas.\n\nDon't divide your attention evenly between many topics though, or you'll spread yourself too thin. You want to distribute it according to something more like a power law. [17] Be professionally curious about a few topics and idly curious about many more.\n\nCuriosity and originality are closely related. Curiosity feeds originality by giving it new things to work on. But the relationship is closer than that. Curiosity is itself a kind of originality; it's roughly to questions what originality is to answers. And since questions at their best are a big component of answers, curiosity at its best is a creative force.", "start_char_idx": 24119, "end_char_idx": 27106, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a32f35a5-7c7e-4f3f-ba1b-f7c5fe780653": {"__data__": {"id_": "a32f35a5-7c7e-4f3f-ba1b-f7c5fe780653", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "efb4c8b6-e048-4593-b57b-63916960d335", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "9a2a201f5a80e829cd1293b3b10be713b43603f510a798566a8a0d5a6a1e0f1e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4bf7b31b-9993-42e3-ac3b-957295b77658", "node_type": "1", "metadata": {}, "hash": "5d3145e7911415636f7bea4f9dd5fa244f9cd7103a5ff4809f40c8745518c420", "class_name": "RelatedNodeInfo"}}, "text": "Having new ideas is a strange game, because it usually consists of seeing things that were right under your nose. Once you've seen a new idea, it tends to seem obvious. Why did no one think of this before?\n\nWhen an idea seems simultaneously novel and obvious, it's probably a good one.\n\nSeeing something obvious sounds easy. And yet empirically having new ideas is hard. What's the source of this apparent contradiction? It's that seeing the new idea usually requires you to change the way you look at the world. We see the world through models that both help and constrain us. When you fix a broken model, new ideas become obvious. But noticing and fixing a broken model is hard. That's how new ideas can be both obvious and yet hard to discover: they're easy to see after you do something hard.\n\nOne way to discover broken models is to be stricter than other people. Broken models of the world leave a trail of clues where they bash against reality. Most people don't want to see these clues. It would be an understatement to say that they're attached to their current model; it's what they think in; so they'll tend to ignore the trail of clues left by its breakage, however conspicuous it may seem in retrospect.\n\nTo find new ideas you have to seize on signs of breakage instead of looking away. That's what Einstein did. He was able to see the wild implications of Maxwell's equations not so much because he was looking for new ideas as because he was stricter.\n\nThe other thing you need is a willingness to break rules. Paradoxical as it sounds, if you want to fix your model of the world, it helps to be the sort of person who's comfortable breaking rules. From the point of view of the old model, which everyone including you initially shares, the new model usually breaks at least implicit rules.\n\nFew understand the degree of rule-breaking required, because new ideas seem much more conservative once they succeed. They seem perfectly reasonable once you're using the new model of the world they brought with them. But they didn't at the time; it took the greater part of a century for the heliocentric model to be generally accepted, even among astronomers, because it felt so wrong.\n\nIndeed, if you think about it, a good new idea has to seem bad to most people, or someone would have already explored it. So what you're looking for is ideas that seem crazy, but the right kind of crazy. How do you recognize these? You can't with certainty. Often ideas that seem bad are bad. But ideas that are the right kind of crazy tend to be exciting; they're rich in implications; whereas ideas that are merely bad tend to be depressing.\n\nThere are two ways to be comfortable breaking rules: to enjoy breaking them, and to be indifferent to them. I call these two cases being aggressively and passively independent-minded.\n\nThe aggressively independent-minded are the naughty ones. Rules don't merely fail to stop them; breaking rules gives them additional energy. For this sort of person, delight at the sheer audacity of a project sometimes supplies enough activation energy to get it started.\n\nThe other way to break rules is not to care about them, or perhaps even to know they exist. This is why novices and outsiders often make new discoveries; their ignorance of a field's assumptions acts as a source of temporary passive independent-mindedness. Aspies also seem to have a kind of immunity to conventional beliefs. Several I know say that this helps them to have new ideas.\n\nStrictness plus rule-breaking sounds like a strange combination. In popular culture they're opposed. But popular culture has a broken model in this respect. It implicitly assumes that issues are trivial ones, and in trivial matters strictness and rule-breaking are opposed. But in questions that really matter, only rule-breakers can be truly strict.", "start_char_idx": 27112, "end_char_idx": 30947, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4bf7b31b-9993-42e3-ac3b-957295b77658": {"__data__": {"id_": "4bf7b31b-9993-42e3-ac3b-957295b77658", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a32f35a5-7c7e-4f3f-ba1b-f7c5fe780653", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "52db48c163a62a95af8e5a7a862242d3bd51a5f431509f0a1a1d36f81777143f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bb395311-aa2b-4d19-86a7-01ab66a57d0d", "node_type": "1", "metadata": {}, "hash": "a907a31a70355a9c0431375dff2eaa86426fc199eb5cdac30d31b5960c830182", "class_name": "RelatedNodeInfo"}}, "text": "An overlooked idea often doesn't lose till the semifinals. You do see it, subconsciously, but then another part of your subconscious shoots it down because it would be too weird, too risky, too much work, too controversial. This suggests an exciting possibility: if you could turn off such filters, you could see more new ideas.\n\nOne way to do that is to ask what would be good ideas for someone else to explore. Then your subconscious won't shoot them down to protect you.\n\nYou could also discover overlooked ideas by working in the other direction: by starting from what's obscuring them. Every cherished but mistaken principle is surrounded by a dead zone of valuable ideas that are unexplored because they contradict it.\n\nReligions are collections of cherished but mistaken principles. So anything that can be described either literally or metaphorically as a religion will have valuable unexplored ideas in its shadow. Copernicus and Darwin both made discoveries of this type. [18]\n\nWhat are people in your field religious about, in the sense of being too attached to some principle that might not be as self-evident as they think? What becomes possible if you discard it?\n\n\n\n\n\nPeople show much more originality in solving problems than in deciding which problems to solve. Even the smartest can be surprisingly conservative when deciding what to work on. People who'd never dream of being fashionable in any other way get sucked into working on fashionable problems.\n\nOne reason people are more conservative when choosing problems than solutions is that problems are bigger bets. A problem could occupy you for years, while exploring a solution might only take days. But even so I think most people are too conservative. They're not merely responding to risk, but to fashion as well. Unfashionable problems are undervalued.\n\nOne of the most interesting kinds of unfashionable problem is the problem that people think has been fully explored, but hasn't. Great work often takes something that already exists and shows its latent potential. Durer and Watt both did this. So if you're interested in a field that others think is tapped out, don't let their skepticism deter you. People are often wrong about this.\n\nWorking on an unfashionable problem can be very pleasing. There's no hype or hurry. Opportunists and critics are both occupied elsewhere. The existing work often has an old-school solidity. And there's a satisfying sense of economy in cultivating ideas that would otherwise be wasted.\n\nBut the most common type of overlooked problem is not explicitly unfashionable in the sense of being out of fashion. It just doesn't seem to matter as much as it actually does. How do you find these? By being self-indulgent \u2014 by letting your curiosity have its way, and tuning out, at least temporarily, the little voice in your head that says you should only be working on \"important\" problems.\n\nYou do need to work on important problems, but almost everyone is too conservative about what counts as one. And if there's an important but overlooked problem in your neighborhood, it's probably already on your subconscious radar screen. So try asking yourself: if you were going to take a break from \"serious\" work to work on something just because it would be really interesting, what would you do? The answer is probably more important than it seems.\n\nOriginality in choosing problems seems to matter even more than originality in solving them. That's what distinguishes the people who discover whole new fields. So what might seem to be merely the initial step \u2014 deciding what to work on \u2014 is in a sense the key to the whole game.", "start_char_idx": 30953, "end_char_idx": 34588, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb395311-aa2b-4d19-86a7-01ab66a57d0d": {"__data__": {"id_": "bb395311-aa2b-4d19-86a7-01ab66a57d0d", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4bf7b31b-9993-42e3-ac3b-957295b77658", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "4e9dd05c028290befda7333a99935ee6f7e5551b927a444750157c0457d3549e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6763962c-e905-400b-94dc-d115ccc5b8e2", "node_type": "1", "metadata": {}, "hash": "dfc97b6419937ad1f94c301111d1c519e2525bf59db2476bd35df37e0b5e6f6b", "class_name": "RelatedNodeInfo"}}, "text": "Few grasp this. One of the biggest misconceptions about new ideas is about the ratio of question to answer in their composition. People think big ideas are answers, but often the real insight was in the question.\n\nPart of the reason we underrate questions is the way they're used in schools. In schools they tend to exist only briefly before being answered, like unstable particles. But a really good question can be much more than that. A really good question is a partial discovery. How do new species arise? Is the force that makes objects fall to earth the same as the one that keeps planets in their orbits? By even asking such questions you were already in excitingly novel territory.\n\nUnanswered questions can be uncomfortable things to carry around with you. But the more you're carrying, the greater the chance of noticing a solution \u2014 or perhaps even more excitingly, noticing that two unanswered questions are the same.\n\nSometimes you carry a question for a long time. Great work often comes from returning to a question you first noticed years before \u2014 in your childhood, even \u2014 and couldn't stop thinking about. People talk a lot about the importance of keeping your youthful dreams alive, but it's just as important to keep your youthful questions alive. [19]\n\nThis is one of the places where actual expertise differs most from the popular picture of it. In the popular picture, experts are certain. But actually the more puzzled you are, the better, so long as (a) the things you're puzzled about matter, and (b) no one else understands them either.\n\nThink about what's happening at the moment just before a new idea is discovered. Often someone with sufficient expertise is puzzled about something. Which means that originality consists partly of puzzlement \u2014 of confusion! You have to be comfortable enough with the world being full of puzzles that you're willing to see them, but not so comfortable that you don't want to solve them. [20]\n\nIt's a great thing to be rich in unanswered questions. And this is one of those situations where the rich get richer, because the best way to acquire new questions is to try answering existing ones. Questions don't just lead to answers, but also to more questions.", "start_char_idx": 34594, "end_char_idx": 36816, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6763962c-e905-400b-94dc-d115ccc5b8e2": {"__data__": {"id_": "6763962c-e905-400b-94dc-d115ccc5b8e2", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bb395311-aa2b-4d19-86a7-01ab66a57d0d", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3bf5547e2114b9b2b2f18e11c27945a9b375049f60b8925853635aff60770e58", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e1ac7c70-407f-49bf-879c-89179e9202b6", "node_type": "1", "metadata": {}, "hash": "809c20bb0545bbdb3238b47b0a738f33d246bc18196e62b212702ce91a386ea1", "class_name": "RelatedNodeInfo"}}, "text": "The best questions grow in the answering. You notice a thread protruding from the current paradigm and try pulling on it, and it just gets longer and longer. So don't require a question to be obviously big before you try answering it. You can rarely predict that. It's hard enough even to notice the thread, let alone to predict how much will unravel if you pull on it.\n\nIt's better to be promiscuously curious \u2014 to pull a little bit on a lot of threads, and see what happens. Big things start small. The initial versions of big things were often just experiments, or side projects, or talks, which then grew into something bigger. So start lots of small things.\n\nBeing prolific is underrated. The more different things you try, the greater the chance of discovering something new. Understand, though, that trying lots of things will mean trying lots of things that don't work. You can't have a lot of good ideas without also having a lot of bad ones. [21]\n\nThough it sounds more responsible to begin by studying everything that's been done before, you'll learn faster and have more fun by trying stuff. And you'll understand previous work better when you do look at it. So err on the side of starting. Which is easier when starting means starting small; those two ideas fit together like two puzzle pieces.\n\nHow do you get from starting small to doing something great? By making successive versions. Great things are almost always made in successive versions. You start with something small and evolve it, and the final version is both cleverer and more ambitious than anything you could have planned.\n\nIt's particularly useful to make successive versions when you're making something for people \u2014 to get an initial version in front of them quickly, and then evolve it based on their response.\n\nBegin by trying the simplest thing that could possibly work. Surprisingly often, it does. If it doesn't, this will at least get you started.\n\nDon't try to cram too much new stuff into any one version. There are names for doing this with the first version (taking too long to ship) and the second (the second system effect), but these are both merely instances of a more general principle.\n\nAn early version of a new project will sometimes be dismissed as a toy. It's a good sign when people do this. That means it has everything a new idea needs except scale, and that tends to follow. [22]\n\nThe alternative to starting with something small and evolving it is to plan in advance what you're going to do. And planning does usually seem the more responsible choice. It sounds more organized to say \"we're going to do x and then y and then z\" than \"we're going to try x and see what happens.\" And it is more organized; it just doesn't work as well.\n\nPlanning per se isn't good. It's sometimes necessary, but it's a necessary evil \u2014 a response to unforgiving conditions. It's something you have to do because you're working with inflexible media, or because you need to coordinate the efforts of a lot of people. If you keep projects small and use flexible media, you don't have to plan as much, and your designs can evolve instead.\n\n\n\n\n\nTake as much risk as you can afford. In an efficient market, risk is proportionate to reward, so don't look for certainty, but for a bet with high expected value. If you're not failing occasionally, you're probably being too conservative.\n\nThough conservatism is usually associated with the old, it's the young who tend to make this mistake. Inexperience makes them fear risk, but it's when you're young that you can afford the most.\n\nEven a project that fails can be valuable. In the process of working on it, you'll have crossed territory few others have seen, and encountered questions few others have asked. And there's probably no better source of questions than the ones you encounter in trying to do something slightly too hard.", "start_char_idx": 36822, "end_char_idx": 40687, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e1ac7c70-407f-49bf-879c-89179e9202b6": {"__data__": {"id_": "e1ac7c70-407f-49bf-879c-89179e9202b6", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6763962c-e905-400b-94dc-d115ccc5b8e2", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "28f8bb7872dcbfa7ec82302dc2f77cefd7aa5cbca57355b0b082dbd3c0231fc5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2d22ee02-5c0e-4572-ba57-d9edc9e31fb2", "node_type": "1", "metadata": {}, "hash": "35a40e7adcc811c4f3ef40b6bf026699e6954b38525d9329798176aeefc70186", "class_name": "RelatedNodeInfo"}}, "text": "Take as much risk as you can afford. In an efficient market, risk is proportionate to reward, so don't look for certainty, but for a bet with high expected value. If you're not failing occasionally, you're probably being too conservative.\n\nThough conservatism is usually associated with the old, it's the young who tend to make this mistake. Inexperience makes them fear risk, but it's when you're young that you can afford the most.\n\nEven a project that fails can be valuable. In the process of working on it, you'll have crossed territory few others have seen, and encountered questions few others have asked. And there's probably no better source of questions than the ones you encounter in trying to do something slightly too hard.\n\n\n\n\n\nUse the advantages of youth when you have them, and the advantages of age once you have those. The advantages of youth are energy, time, optimism, and freedom. The advantages of age are knowledge, efficiency, money, and power. With effort you can acquire some of the latter when young and keep some of the former when old.\n\nThe old also have the advantage of knowing which advantages they have. The young often have them without realizing it. The biggest is probably time. The young have no idea how rich they are in time. The best way to turn this time to advantage is to use it in slightly frivolous ways: to learn about something you don't need to know about, just out of curiosity, or to try building something just because it would be cool, or to become freakishly good at something.\n\nThat \"slightly\" is an important qualification. Spend time lavishly when you're young, but don't simply waste it. There's a big difference between doing something you worry might be a waste of time and doing something you know for sure will be. The former is at least a bet, and possibly a better one than you think. [23]\n\nThe most subtle advantage of youth, or more precisely of inexperience, is that you're seeing everything with fresh eyes. When your brain embraces an idea for the first time, sometimes the two don't fit together perfectly. Usually the problem is with your brain, but occasionally it's with the idea. A piece of it sticks out awkwardly and jabs you when you think about it. People who are used to the idea have learned to ignore it, but you have the opportunity not to. [24]\n\nSo when you're learning about something for the first time, pay attention to things that seem wrong or missing. You'll be tempted to ignore them, since there's a 99% chance the problem is with you. And you may have to set aside your misgivings temporarily to keep progressing. But don't forget about them. When you've gotten further into the subject, come back and check if they're still there. If they're still viable in the light of your present knowledge, they probably represent an undiscovered idea.", "start_char_idx": 39952, "end_char_idx": 42783, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d22ee02-5c0e-4572-ba57-d9edc9e31fb2": {"__data__": {"id_": "2d22ee02-5c0e-4572-ba57-d9edc9e31fb2", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e1ac7c70-407f-49bf-879c-89179e9202b6", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "87acc367490e207661b36e4dc714b475fac0a7e3c9fe485abe0b08b1f0526d0b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e9df62af-ded3-44f0-aa9a-d1b6d1d0c10d", "node_type": "1", "metadata": {}, "hash": "a950af313de80ae5b8e8cb81dce842d0a929fb0bee3d2539c8753b2a13ab3965", "class_name": "RelatedNodeInfo"}}, "text": "One of the most valuable kinds of knowledge you get from experience is to know what you don't have to worry about. The young know all the things that could matter, but not their relative importance. So they worry equally about everything, when they should worry much more about a few things and hardly at all about the rest.\n\nBut what you don't know is only half the problem with inexperience. The other half is what you do know that ain't so. You arrive at adulthood with your head full of nonsense \u2014 bad habits you've acquired and false things you've been taught \u2014 and you won't be able to do great work till you clear away at least the nonsense in the way of whatever type of work you want to do.\n\nMuch of the nonsense left in your head is left there by schools. We're so used to schools that we unconsciously treat going to school as identical with learning, but in fact schools have all sorts of strange qualities that warp our ideas about learning and thinking.\n\nFor example, schools induce passivity. Since you were a small child, there was an authority at the front of the class telling all of you what you had to learn and then measuring whether you did. But neither classes nor tests are intrinsic to learning; they're just artifacts of the way schools are usually designed.\n\nThe sooner you overcome this passivity, the better. If you're still in school, try thinking of your education as your project, and your teachers as working for you rather than vice versa. That may seem a stretch, but it's not merely some weird thought experiment. It's the truth, economically, and in the best case it's the truth intellectually as well. The best teachers don't want to be your bosses. They'd prefer it if you pushed ahead, using them as a source of advice, rather than being pulled by them through the material.\n\nSchools also give you a misleading impression of what work is like. In school they tell you what the problems are, and they're almost always soluble using no more than you've been taught so far. In real life you have to figure out what the problems are, and you often don't know if they're soluble at all.\n\nBut perhaps the worst thing schools do to you is train you to win by hacking the test. You can't do great work by doing that. You can't trick God. So stop looking for that kind of shortcut. The way to beat the system is to focus on problems and solutions that others have overlooked, not to skimp on the work itself.\n\n\n\n\n\nDon't think of yourself as dependent on some gatekeeper giving you a \"big break.\" Even if this were true, the best way to get it would be to focus on doing good work rather than chasing influential people.\n\nAnd don't take rejection by committees to heart. The qualities that impress admissions officers and prize committees are quite different from those required to do great work. The decisions of selection committees are only meaningful to the extent that they're part of a feedback loop, and very few are.", "start_char_idx": 42789, "end_char_idx": 45743, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9df62af-ded3-44f0-aa9a-d1b6d1d0c10d": {"__data__": {"id_": "e9df62af-ded3-44f0-aa9a-d1b6d1d0c10d", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2d22ee02-5c0e-4572-ba57-d9edc9e31fb2", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "89f16807e1ca425773b21c1d85c8ff17ccc840fef8e1642b5ba99cdcfb5a1f38", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b3c24fef-b7e6-4983-84fd-c6dbb85631a8", "node_type": "1", "metadata": {}, "hash": "7e8ea71cf20be710f842ddfddb488c5afda70ddb889d7930da43902cccb5d3c6", "class_name": "RelatedNodeInfo"}}, "text": "Don't think of yourself as dependent on some gatekeeper giving you a \"big break.\" Even if this were true, the best way to get it would be to focus on doing good work rather than chasing influential people.\n\nAnd don't take rejection by committees to heart. The qualities that impress admissions officers and prize committees are quite different from those required to do great work. The decisions of selection committees are only meaningful to the extent that they're part of a feedback loop, and very few are.\n\n\n\n\n\nPeople new to a field will often copy existing work. There's nothing inherently bad about that. There's no better way to learn how something works than by trying to reproduce it. Nor does copying necessarily make your work unoriginal. Originality is the presence of new ideas, not the absence of old ones.\n\nThere's a good way to copy and a bad way. If you're going to copy something, do it openly instead of furtively, or worse still, unconsciously. This is what's meant by the famously misattributed phrase \"Great artists steal.\" The really dangerous kind of copying, the kind that gives copying a bad name, is the kind that's done without realizing it, because you're nothing more than a train running on tracks laid down by someone else. But at the other extreme, copying can be a sign of superiority rather than subordination. [25]\n\nIn many fields it's almost inevitable that your early work will be in some sense based on other people's. Projects rarely arise in a vacuum. They're usually a reaction to previous work. When you're first starting out, you don't have any previous work; if you're going to react to something, it has to be someone else's. Once you're established, you can react to your own. But while the former gets called derivative and the latter doesn't, structurally the two cases are more similar than they seem.\n\nOddly enough, the very novelty of the most novel ideas sometimes makes them seem at first to be more derivative than they are. New discoveries often have to be conceived initially as variations of existing things, even by their discoverers, because there isn't yet the conceptual vocabulary to express them.\n\nThere are definitely some dangers to copying, though. One is that you'll tend to copy old things \u2014 things that were in their day at the frontier of knowledge, but no longer are.\n\nAnd when you do copy something, don't copy every feature of it. Some will make you ridiculous if you do. Don't copy the manner of an eminent 50 year old professor if you're 18, for example, or the idiom of a Renaissance poem hundreds of years later.\n\nSome of the features of things you admire are flaws they succeeded despite. Indeed, the features that are easiest to imitate are the most likely to be the flaws.\n\nThis is particularly true for behavior. Some talented people are jerks, and this sometimes makes it seem to the inexperienced that being a jerk is part of being talented. It isn't; being talented is merely how they get away with it.\n\nOne of the most powerful kinds of copying is to copy something from one field into another. History is so full of chance discoveries of this type that it's probably worth giving chance a hand by deliberately learning about other kinds of work. You can take ideas from quite distant fields if you let them be metaphors.\n\nNegative examples can be as inspiring as positive ones. In fact you can sometimes learn more from things done badly than from things done well; sometimes it only becomes clear what's needed when it's missing.\n\n\n\n\n\nIf a lot of the best people in your field are collected in one place, it's usually a good idea to visit for a while. It will increase your ambition, and also, by showing you that these people are human, increase your self-confidence. [26]\n\nIf you're earnest you'll probably get a warmer welcome than you might expect. Most people who are very good at something are happy to talk about it with anyone who's genuinely interested. If they're really good at their work, then they probably have a hobbyist's interest in it, and hobbyists always want to talk about their hobbies.\n\nIt may take some effort to find the people who are really good, though. Doing great work has such prestige that in some places, particularly universities, there's a polite fiction that everyone is engaged in it. And that is far from true. People within universities can't say so openly, but the quality of the work being done in different departments varies immensely. Some departments have people doing great work; others have in the past; others never have.", "start_char_idx": 45234, "end_char_idx": 49791, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3c24fef-b7e6-4983-84fd-c6dbb85631a8": {"__data__": {"id_": "b3c24fef-b7e6-4983-84fd-c6dbb85631a8", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e9df62af-ded3-44f0-aa9a-d1b6d1d0c10d", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "de545dd9ed77d0ab49d951d360f8feab54087c6fc0f4ae2fd7446f72fdec397f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "59fbd9b7-e822-4cba-88f0-461fbdedb304", "node_type": "1", "metadata": {}, "hash": "d4f7b47914b459b723195d6037c7cf21e823e6624ed0683607e9aebbae5b395b", "class_name": "RelatedNodeInfo"}}, "text": "Seek out the best colleagues. There are a lot of projects that can't be done alone, and even if you're working on one that can be, it's good to have other people to encourage you and to bounce ideas off.\n\nColleagues don't just affect your work, though; they also affect you. So work with people you want to become like, because you will.\n\nQuality is more important than quantity in colleagues. It's better to have one or two great ones than a building full of pretty good ones. In fact it's not merely better, but necessary, judging from history: the degree to which great work happens in clusters suggests that one's colleagues often make the difference between doing great work and not.\n\nHow do you know when you have sufficiently good colleagues? In my experience, when you do, you know. Which means if you're unsure, you probably don't. But it may be possible to give a more concrete answer than that. Here's an attempt: sufficiently good colleagues offer surprising insights. They can see and do things that you can't. So if you have a handful of colleagues good enough to keep you on your toes in this sense, you're probably over the threshold.\n\nMost of us can benefit from collaborating with colleagues, but some projects require people on a larger scale, and starting one of those is not for everyone. If you want to run a project like that, you'll have to become a manager, and managing well takes aptitude and interest like any other kind of work. If you don't have them, there is no middle path: you must either force yourself to learn management as a second language, or avoid such projects. [27]\n\n\n\n\n\nHusband your morale. It's the basis of everything when you're working on ambitious projects. You have to nurture and protect it like a living organism.\n\nMorale starts with your view of life. You're more likely to do great work if you're an optimist, and more likely to if you think of yourself as lucky than if you think of yourself as a victim.\n\nIndeed, work can to some extent protect you from your problems. If you choose work that's pure, its very difficulties will serve as a refuge from the difficulties of everyday life. If this is escapism, it's a very productive form of it, and one that has been used by some of the greatest minds in history.\n\nMorale compounds via work: high morale helps you do good work, which increases your morale and helps you do even better work. But this cycle also operates in the other direction: if you're not doing good work, that can demoralize you and make it even harder to. Since it matters so much for this cycle to be running in the right direction, it can be a good idea to switch to easier work when you're stuck, just so you start to get something done.\n\nOne of the biggest mistakes ambitious people make is to allow setbacks to destroy their morale all at once, like a balloon bursting. You can inoculate yourself against this by explicitly considering setbacks a part of your process. Solving hard problems always involves some backtracking.\n\nDoing great work is a depth-first search whose root node is the desire to. So \"If at first you don't succeed, try, try again\" isn't quite right. It should be: If at first you don't succeed, either try again, or backtrack and then try again.\n\n\"Never give up\" is also not quite right. Obviously there are times when it's the right choice to eject. A more precise version would be: Never let setbacks panic you into backtracking more than you need to. Corollary: Never abandon the root node.\n\nIt's not necessarily a bad sign if work is a struggle, any more than it's a bad sign to be out of breath while running. It depends how fast you're running. So learn to distinguish good pain from bad. Good pain is a sign of effort; bad pain is a sign of damage.", "start_char_idx": 49797, "end_char_idx": 53553, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59fbd9b7-e822-4cba-88f0-461fbdedb304": {"__data__": {"id_": "59fbd9b7-e822-4cba-88f0-461fbdedb304", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b3c24fef-b7e6-4983-84fd-c6dbb85631a8", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "a31417e15b3ba07ec5c1ba8f2aff7be6fd4a18de81ee110582cb6b8c7ae12e5a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "28c1f503-0170-4cac-a56a-9d4050aa16b9", "node_type": "1", "metadata": {}, "hash": "acb5297522fca9cd3e9a7ca0ef48641b126981ececc79f4cd29558bf4a936532", "class_name": "RelatedNodeInfo"}}, "text": "An audience is a critical component of morale. If you're a scholar, your audience may be your peers; in the arts, it may be an audience in the traditional sense. Either way it doesn't need to be big. The value of an audience doesn't grow anything like linearly with its size. Which is bad news if you're famous, but good news if you're just starting out, because it means a small but dedicated audience can be enough to sustain you. If a handful of people genuinely love what you're doing, that's enough.\n\nTo the extent you can, avoid letting intermediaries come between you and your audience. In some types of work this is inevitable, but it's so liberating to escape it that you might be better off switching to an adjacent type if that will let you go direct. [28]\n\nThe people you spend time with will also have a big effect on your morale. You'll find there are some who increase your energy and others who decrease it, and the effect someone has is not always what you'd expect. Seek out the people who increase your energy and avoid those who decrease it. Though of course if there's someone you need to take care of, that takes precedence.\n\nDon't marry someone who doesn't understand that you need to work, or sees your work as competition for your attention. If you're ambitious, you need to work; it's almost like a medical condition; so someone who won't let you work either doesn't understand you, or does and doesn't care.\n\nUltimately morale is physical. You think with your body, so it's important to take care of it. That means exercising regularly, eating and sleeping well, and avoiding the more dangerous kinds of drugs. Running and walking are particularly good forms of exercise because they're good for thinking. [29]\n\nPeople who do great work are not necessarily happier than everyone else, but they're happier than they'd be if they didn't. In fact, if you're smart and ambitious, it's dangerous not to be productive. People who are smart and ambitious but don't achieve much tend to become bitter.\n\n\n\n\n\nIt's ok to want to impress other people, but choose the right people. The opinion of people you respect is signal. Fame, which is the opinion of a much larger group you might or might not respect, just adds noise.\n\nThe prestige of a type of work is at best a trailing indicator and sometimes completely mistaken. If you do anything well enough, you'll make it prestigious. So the question to ask about a type of work is not how much prestige it has, but how well it could be done.\n\nCompetition can be an effective motivator, but don't let it choose the problem for you; don't let yourself get drawn into chasing something just because others are. In fact, don't let competitors make you do anything much more specific than work harder.\n\nCuriosity is the best guide. Your curiosity never lies, and it knows more than you do about what's worth paying attention to.\n\n\n\n\n\nNotice how often that word has come up. If you asked an oracle the secret to doing great work and the oracle replied with a single word, my bet would be on \"curiosity.\"\n\nThat doesn't translate directly to advice. It's not enough just to be curious, and you can't command curiosity anyway. But you can nurture it and let it drive you.\n\nCuriosity is the key to all four steps in doing great work: it will choose the field for you, get you to the frontier, cause you to notice the gaps in it, and drive you to explore them. The whole process is a kind of dance with curiosity.", "start_char_idx": 53559, "end_char_idx": 57026, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "28c1f503-0170-4cac-a56a-9d4050aa16b9": {"__data__": {"id_": "28c1f503-0170-4cac-a56a-9d4050aa16b9", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "59fbd9b7-e822-4cba-88f0-461fbdedb304", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "ee8d2711e8d6f64065af9a563adeaa2b52f6da3d9f0b6dc29ff4a121dade4b5e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "19d7b26f-5148-4cba-b5a7-de455aef8551", "node_type": "1", "metadata": {}, "hash": "fff49317da50478b4a6c4d7b19d3fb5bfc4d1bf1e639ff4721ef95813ba46088", "class_name": "RelatedNodeInfo"}}, "text": "Notice how often that word has come up. If you asked an oracle the secret to doing great work and the oracle replied with a single word, my bet would be on \"curiosity.\"\n\nThat doesn't translate directly to advice. It's not enough just to be curious, and you can't command curiosity anyway. But you can nurture it and let it drive you.\n\nCuriosity is the key to all four steps in doing great work: it will choose the field for you, get you to the frontier, cause you to notice the gaps in it, and drive you to explore them. The whole process is a kind of dance with curiosity.\n\n\n\n\n\nBelieve it or not, I tried to make this essay as short as I could. But its length at least means it acts as a filter. If you made it this far, you must be interested in doing great work. And if so you're already further along than you might realize, because the set of people willing to want to is small.\n\nThe factors in doing great work are factors in the literal, mathematical sense, and they are: ability, interest, effort, and luck. Luck by definition you can't do anything about, so we can ignore that. And we can assume effort, if you do in fact want to do great work. So the problem boils down to ability and interest. Can you find a kind of work where your ability and interest will combine to yield an explosion of new ideas?\n\nHere there are grounds for optimism. There are so many different ways to do great work, and even more that are still undiscovered. Out of all those different types of work, the one you're most suited for is probably a pretty close match. Probably a comically close match. It's just a question of finding it, and how far into it your ability and interest can take you. And you can only answer that by trying.\n\nMany more people could try to do great work than do. What holds them back is a combination of modesty and fear. It seems presumptuous to try to be Newton or Shakespeare. It also seems hard; surely if you tried something like that, you'd fail. Presumably the calculation is rarely explicit. Few people consciously decide not to try to do great work. But that's what's going on subconsciously; they shy away from the question.\n\nSo I'm going to pull a sneaky trick on you. Do you want to do great work, or not? Now you have to decide consciously. Sorry about that. I wouldn't have done it to a general audience. But we already know you're interested.\n\nDon't worry about being presumptuous. You don't have to tell anyone. And if it's too hard and you fail, so what? Lots of people have worse problems than that. In fact you'll be lucky if it's the worst problem you have.\n\nYes, you'll have to work hard. But again, lots of people have to work hard. And if you're working on something you find very interesting, which you necessarily will if you're on the right path, the work will probably feel less burdensome than a lot of your peers'.\n\nThe discoveries are out there, waiting to be made. Why not by you?\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] I don't think you could give a precise definition of what counts as great work. Doing great work means doing something important so well that you expand people's ideas of what's possible. But there's no threshold for importance. It's a matter of degree, and often hard to judge at the time anyway. So I'd rather people focused on developing their interests rather than worrying about whether they're important or not. Just try to do something amazing, and leave it to future generations to say if you succeeded.\n\n[2] A lot of standup comedy is based on noticing anomalies in everyday life. \"Did you ever notice...?\" New ideas come from doing this about nontrivial things. Which may help explain why people's reaction to a new idea is often the first half of laughing: Ha!\n\n[3] That second qualifier is critical. If you're excited about something most authorities discount, but you can't give a more precise explanation than \"they don't get it,\" then you're starting to drift into the territory of cranks.\n\n[4] Finding something to work on is not simply a matter of finding a match between the current version of you and a list of known problems. You'll often have to coevolve with the problem. That's why it can sometimes be so hard to figure out what to work on. The search space is huge. It's the cartesian product of all possible types of work, both known and yet to be discovered, and all possible future versions of you.", "start_char_idx": 56453, "end_char_idx": 60824, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19d7b26f-5148-4cba-b5a7-de455aef8551": {"__data__": {"id_": "19d7b26f-5148-4cba-b5a7-de455aef8551", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "28c1f503-0170-4cac-a56a-9d4050aa16b9", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "a17021f6141d33afadd45482189f2d4a37fa07698dbdddab9ccd637f46e3eb2e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "38e91fa7-8a12-434c-9187-2d3b30b5152f", "node_type": "1", "metadata": {}, "hash": "28a81a5d0e1a3116cb6299993f59da09f6dd11cd53d9128bc22142ba36610738", "class_name": "RelatedNodeInfo"}}, "text": "\"Did you ever notice...?\" New ideas come from doing this about nontrivial things. Which may help explain why people's reaction to a new idea is often the first half of laughing: Ha!\n\n[3] That second qualifier is critical. If you're excited about something most authorities discount, but you can't give a more precise explanation than \"they don't get it,\" then you're starting to drift into the territory of cranks.\n\n[4] Finding something to work on is not simply a matter of finding a match between the current version of you and a list of known problems. You'll often have to coevolve with the problem. That's why it can sometimes be so hard to figure out what to work on. The search space is huge. It's the cartesian product of all possible types of work, both known and yet to be discovered, and all possible future versions of you.\n\nThere's no way you could search this whole space, so you have to rely on heuristics to generate promising paths through it and hope the best matches will be clustered. Which they will not always be; different types of work have been collected together as much by accidents of history as by the intrinsic similarities between them.\n\n[5] There are many reasons curious people are more likely to do great work, but one of the more subtle is that, by casting a wide net, they're more likely to find the right thing to work on in the first place.\n\n[6] It can also be dangerous to make things for an audience you feel is less sophisticated than you, if that causes you to talk down to them. You can make a lot of money doing that, if you do it in a sufficiently cynical way, but it's not the route to great work. Not that anyone using this m.o. would care.\n\n[7] This idea I learned from Hardy's A Mathematician's Apology, which I recommend to anyone ambitious to do great work, in any field.\n\n[8] Just as we overestimate what we can do in a day and underestimate what we can do over several years, we overestimate the damage done by procrastinating for a day and underestimate the damage done by procrastinating for several years.\n\n[9] You can't usually get paid for doing exactly what you want, especially early on. There are two options: get paid for doing work close to what you want and hope to push it closer, or get paid for doing something else entirely and do your own projects on the side. Both can work, but both have drawbacks: in the first approach your work is compromised by default, and in the second you have to fight to get time to do it.\n\n[10] If you set your life up right, it will deliver the focus-relax cycle automatically. The perfect setup is an office you work in and that you walk to and from.\n\n[11] There may be some very unworldly people who do great work without consciously trying to. If you want to expand this rule to cover that case, it becomes: Don't try to be anything except the best.\n\n[12] This gets more complicated in work like acting, where the goal is to adopt a fake persona. But even here it's possible to be affected. Perhaps the rule in such fields should be to avoid unintentional affectation.\n\n[13] It's safe to have beliefs that you treat as unquestionable if and only if they're also unfalsifiable. For example, it's safe to have the principle that everyone should be treated equally under the law, because a sentence with a \"should\" in it isn't really a statement about the world and is therefore hard to disprove. And if there's no evidence that could disprove one of your principles, there can't be any facts you'd need to ignore in order to preserve it.\n\n[14] Affectation is easier to cure than intellectual dishonesty. Affectation is often a shortcoming of the young that burns off in time, while intellectual dishonesty is more of a character flaw.\n\n[15] Obviously you don't have to be working at the exact moment you have the idea, but you'll probably have been working fairly recently.\n\n[16] Some say psychoactive drugs have a similar effect. I'm skeptical, but also almost totally ignorant of their effects.\n\n[17] For example you might give the nth most important topic (m-1)/m^n of your attention, for some m > 1. You couldn't allocate your attention so precisely, of course, but this at least gives an idea of a reasonable distribution.\n\n[18] The principles defining a religion have to be mistaken. Otherwise anyone might adopt them, and there would be nothing to distinguish the adherents of the religion from everyone else.", "start_char_idx": 59989, "end_char_idx": 64405, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38e91fa7-8a12-434c-9187-2d3b30b5152f": {"__data__": {"id_": "38e91fa7-8a12-434c-9187-2d3b30b5152f", "embedding": null, "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16b44bdc-2e04-4252-a87d-05ebd45afe03", "node_type": "4", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "67dd518f070cd331958f336e217c50c9a25ed49b5b41d3239b2d727feafad7f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "19d7b26f-5148-4cba-b5a7-de455aef8551", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "c4ba1faaac50a4a14cbe295360067cd73a5c0bdac361f813aef798bf2c93c0c7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "40f33ad3-33a5-427f-b5ac-6a682ea5e5c1", "node_type": "1", "metadata": {}, "hash": "b53ff92a4c85bc848676a664599540da71fb768391db50fa3c93708c1a7c9cd5", "class_name": "RelatedNodeInfo"}}, "text": "[14] Affectation is easier to cure than intellectual dishonesty. Affectation is often a shortcoming of the young that burns off in time, while intellectual dishonesty is more of a character flaw.\n\n[15] Obviously you don't have to be working at the exact moment you have the idea, but you'll probably have been working fairly recently.\n\n[16] Some say psychoactive drugs have a similar effect. I'm skeptical, but also almost totally ignorant of their effects.\n\n[17] For example you might give the nth most important topic (m-1)/m^n of your attention, for some m > 1. You couldn't allocate your attention so precisely, of course, but this at least gives an idea of a reasonable distribution.\n\n[18] The principles defining a religion have to be mistaken. Otherwise anyone might adopt them, and there would be nothing to distinguish the adherents of the religion from everyone else.\n\n[19] It might be a good exercise to try writing down a list of questions you wondered about in your youth. You might find you're now in a position to do something about some of them.\n\n[20] The connection between originality and uncertainty causes a strange phenomenon: because the conventional-minded are more certain than the independent-minded, this tends to give them the upper hand in disputes, even though they're generally stupider.\nThe best lack all conviction, while the worst\nAre full of passionate intensity.\n[21] Derived from Linus Pauling's \"If you want to have good ideas, you must have many ideas.\"\n\n[22] Attacking a project as a \"toy\" is similar to attacking a statement as \"inappropriate.\" It means that no more substantial criticism can be made to stick.\n\n[23] One way to tell whether you're wasting time is to ask if you're producing or consuming. Writing computer games is less likely to be a waste of time than playing them, and playing games where you create something is less likely to be a waste of time than playing games where you don't.\n\n[24] Another related advantage is that if you haven't said anything publicly yet, you won't be biased toward evidence that supports your earlier conclusions. With sufficient integrity you could achieve eternal youth in this respect, but few manage to. For most people, having previously published opinions has an effect similar to ideology, just in quantity 1.\n\n[25] In the early 1630s Daniel Mytens made a painting of Henrietta Maria handing a laurel wreath to Charles I. Van Dyck then painted his own version to show how much better he was.\n\n[26] I'm being deliberately vague about what a place is. As of this writing, being in the same physical place has advantages that are hard to duplicate, but that could change.\n\n[27] This is false when the work the other people have to do is very constrained, as with SETI@home or Bitcoin. It may be possible to expand the area in which it's false by defining similarly restricted protocols with more freedom of action in the nodes.\n\n[28] Corollary: Building something that enables people to go around intermediaries and engage directly with their audience is probably a good idea.\n\n[29] It may be helpful always to walk or run the same route, because that frees attention for thinking. It feels that way to me, and there is some historical evidence for it.", "start_char_idx": 63528, "end_char_idx": 66771, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "40f33ad3-33a5-427f-b5ac-6a682ea5e5c1": {"__data__": {"id_": "40f33ad3-33a5-427f-b5ac-6a682ea5e5c1", "embedding": null, "metadata": {"file_path": "data/Four quadrants of Conformism.txt", "file_name": "Four quadrants of Conformism.txt", "file_type": "text/plain", "file_size": 12089, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ed7dff1-04db-4ce5-858d-c43aee47320f", "node_type": "4", "metadata": {"file_path": "data/Four quadrants of Conformism.txt", "file_name": "Four quadrants of Conformism.txt", "file_type": "text/plain", "file_size": 12089, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "7258956ade9d7c25fd4eedf4c8e016451bc2ea71d949cc7857b89a31a50b65d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "38e91fa7-8a12-434c-9187-2d3b30b5152f", "node_type": "1", "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "a2cdc7b6e9eeb657a1516679718943a7eef1ea5055d76f084fb99ba5770c13eb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c9e5357e-e386-4494-a394-edba02b3c4a2", "node_type": "1", "metadata": {}, "hash": "54ccdf67e66011a4205eb1d1454a2ef5fc2b061269e5ed6a042601af93907503", "class_name": "RelatedNodeInfo"}}, "text": "The Four Quadrants of Conformism\n\nJuly 2020\n\nOne of the most revealing ways to classify people is by the degree and aggressiveness of their conformism. Imagine a Cartesian coordinate system whose horizontal axis runs from conventional-minded on the left to independent-minded on the right, and whose vertical axis runs from passive at the bottom to aggressive at the top. The resulting four quadrants define four types of people. Starting in the upper left and going counter-clockwise: aggressively conventional-minded, passively conventional-minded, passively independent-minded, and aggressively independent-minded.\n\nI think that you'll find all four types in most societies, and that which quadrant people fall into depends more on their own personality than the beliefs prevalent in their society. [1]\n\nYoung children offer some of the best evidence for both points. Anyone who's been to primary school has seen the four types, and the fact that school rules are so arbitrary is strong evidence that which quadrant people fall into depends more on them than the rules.\n\nThe kids in the upper left quadrant, the aggressively conventional-minded ones, are the tattletales. They believe not only that rules must be obeyed, but that those who disobey them must be punished.\n\nThe kids in the lower left quadrant, the passively conventional-minded, are the sheep. They're careful to obey the rules, but when other kids break them, their impulse is to worry that those kids will be punished, not to ensure that they will.\n\nThe kids in the lower right quadrant, the passively independent-minded, are the dreamy ones. They don't care much about rules and probably aren't 100% sure what the rules even are.\n\nAnd the kids in the upper right quadrant, the aggressively independent-minded, are the naughty ones. When they see a rule, their first impulse is to question it. Merely being told what to do makes them inclined to do the opposite.\n\nWhen measuring conformism, of course, you have to say with respect to what, and this changes as kids get older. For younger kids it's the rules set by adults. But as kids get older, the source of rules becomes their peers. So a pack of teenagers who all flout school rules in the same way are not independent-minded; rather the opposite.\n\nIn adulthood we can recognize the four types by their distinctive calls, much as you could recognize four species of birds. The call of the aggressively conventional-minded is \"Crush <outgroup>!\" (It's rather alarming to see an exclamation point after a variable, but that's the whole problem with the aggressively conventional-minded.) The call of the passively conventional-minded is \"What will the neighbors think?\" The call of the passively independent-minded is \"To each his own.\" And the call of the aggressively independent-minded is \"Eppur si muove.\"\n\nThe four types are not equally common. There are more passive people than aggressive ones, and far more conventional-minded people than independent-minded ones. So the passively conventional-minded are the largest group, and the aggressively independent-minded the smallest.\n\nSince one's quadrant depends more on one's personality than the nature of the rules, most people would occupy the same quadrant even if they'd grown up in a quite different society.\n\nPrinceton professor Robert George recently wrote:\nI sometimes ask students what their position on slavery would have been had they been white and living in the South before abolition. Guess what? They all would have been abolitionists! They all would have bravely spoken out against slavery, and worked tirelessly against it.\nHe's too polite to say so, but of course they wouldn't. And indeed, our default assumption should not merely be that his students would, on average, have behaved the same way people did at the time, but that the ones who are aggressively conventional-minded today would have been aggressively conventional-minded then too. In other words, that they'd not only not have fought against slavery, but that they'd have been among its staunchest defenders.\n\nI'm biased, I admit, but it seems to me that aggressively conventional-minded people are responsible for a disproportionate amount of the trouble in the world, and that a lot of the customs we've evolved since the Enlightenment have been designed to protect the rest of us from them. In particular, the retirement of the concept of heresy and its replacement by the principle of freely debating all sorts of different ideas, even ones that are currently considered unacceptable, without any punishment for those who try them out to see if they work. [2]\n\nWhy do the independent-minded need to be protected, though? Because they have all the new ideas. To be a successful scientist, for example, it's not enough just to be right. You have to be right when everyone else is wrong. Conventional-minded people can't do that.", "start_char_idx": 3, "end_char_idx": 4893, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9e5357e-e386-4494-a394-edba02b3c4a2": {"__data__": {"id_": "c9e5357e-e386-4494-a394-edba02b3c4a2", "embedding": null, "metadata": {"file_path": "data/Four quadrants of Conformism.txt", "file_name": "Four quadrants of Conformism.txt", "file_type": "text/plain", "file_size": 12089, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ed7dff1-04db-4ce5-858d-c43aee47320f", "node_type": "4", "metadata": {"file_path": "data/Four quadrants of Conformism.txt", "file_name": "Four quadrants of Conformism.txt", "file_type": "text/plain", "file_size": 12089, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "7258956ade9d7c25fd4eedf4c8e016451bc2ea71d949cc7857b89a31a50b65d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "40f33ad3-33a5-427f-b5ac-6a682ea5e5c1", "node_type": "1", "metadata": {"file_path": "data/Four quadrants of Conformism.txt", "file_name": "Four quadrants of Conformism.txt", "file_type": "text/plain", "file_size": 12089, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "db75614f5fb1ff33c83d98115f7111de92641eab2239a3e0f5c4fb7dc6bcf3ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b6f6b6d-0d96-44a3-a45a-4d2e237412c1", "node_type": "1", "metadata": {}, "hash": "0ca34502899493a74183bd71ee2df20e18880a8ea8755fb6947ac58adf14e220", "class_name": "RelatedNodeInfo"}}, "text": "In other words, that they'd not only not have fought against slavery, but that they'd have been among its staunchest defenders.\n\nI'm biased, I admit, but it seems to me that aggressively conventional-minded people are responsible for a disproportionate amount of the trouble in the world, and that a lot of the customs we've evolved since the Enlightenment have been designed to protect the rest of us from them. In particular, the retirement of the concept of heresy and its replacement by the principle of freely debating all sorts of different ideas, even ones that are currently considered unacceptable, without any punishment for those who try them out to see if they work. [2]\n\nWhy do the independent-minded need to be protected, though? Because they have all the new ideas. To be a successful scientist, for example, it's not enough just to be right. You have to be right when everyone else is wrong. Conventional-minded people can't do that. For similar reasons, all successful startup CEOs are not merely independent-minded, but aggressively so. So it's no coincidence that societies prosper only to the extent that they have customs for keeping the conventional-minded at bay. [3]\n\nIn the last few years, many of us have noticed that the customs protecting free inquiry have been weakened. Some say we're overreacting \u2014 that they haven't been weakened very much, or that they've been weakened in the service of a greater good. The latter I'll dispose of immediately. When the conventional-minded get the upper hand, they always say it's in the service of a greater good. It just happens to be a different, incompatible greater good each time.\n\nAs for the former worry, that the independent-minded are being oversensitive, and that free inquiry hasn't been shut down that much, you can't judge that unless you are yourself independent-minded. You can't know how much of the space of ideas is being lopped off unless you have them, and only the independent-minded have the ones at the edges. Precisely because of this, they tend to be very sensitive to changes in how freely one can explore ideas. They're the canaries in this coalmine.\n\nThe conventional-minded say, as they always do, that they don't want to shut down the discussion of all ideas, just the bad ones.\n\nYou'd think it would be obvious just from that sentence what a dangerous game they're playing. But I'll spell it out. There are two reasons why we need to be able to discuss even \"bad\" ideas.\n\nThe first is that any process for deciding which ideas to ban is bound to make mistakes. All the more so because no one intelligent wants to undertake that kind of work, so it ends up being done by the stupid. And when a process makes a lot of mistakes, you need to leave a margin for error. Which in this case means you need to ban fewer ideas than you'd like to. But that's hard for the aggressively conventional-minded to do, partly because they enjoy seeing people punished, as they have since they were children, and partly because they compete with one another. Enforcers of orthodoxy can't allow a borderline idea to exist, because that gives other enforcers an opportunity to one-up them in the moral purity department, and perhaps even to turn enforcer upon them. So instead of getting the margin for error we need, we get the opposite: a race to the bottom in which any idea that seems at all bannable ends up being banned. [4]\n\nThe second reason it's dangerous to ban the discussion of ideas is that ideas are more closely related than they look. Which means if you restrict the discussion of some topics, it doesn't only affect those topics. The restrictions propagate back into any topic that yields implications in the forbidden ones. And that is not an edge case. The best ideas do exactly that: they have consequences in fields far removed from their origins. Having ideas in a world where some ideas are banned is like playing soccer on a pitch that has a minefield in one corner. You don't just play the same game you would have, but on a different shaped pitch. You play a much more subdued game even on the ground that's safe.\n\nIn the past, the way the independent-minded protected themselves was to congregate in a handful of places \u2014 first in courts, and later in universities \u2014 where they could to some extent make their own rules. Places where people work with ideas tend to have customs protecting free inquiry, for the same reason wafer fabs have powerful air filters, or recording studios good sound insulation. For the last couple centuries at least, when the aggressively conventional-minded were on the rampage for whatever reason, universities were the safest places to be.", "start_char_idx": 3944, "end_char_idx": 8618, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b6f6b6d-0d96-44a3-a45a-4d2e237412c1": {"__data__": {"id_": "8b6f6b6d-0d96-44a3-a45a-4d2e237412c1", "embedding": null, "metadata": {"file_path": "data/Four quadrants of Conformism.txt", "file_name": "Four quadrants of Conformism.txt", "file_type": "text/plain", "file_size": 12089, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ed7dff1-04db-4ce5-858d-c43aee47320f", "node_type": "4", "metadata": {"file_path": "data/Four quadrants of Conformism.txt", "file_name": "Four quadrants of Conformism.txt", "file_type": "text/plain", "file_size": 12089, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "7258956ade9d7c25fd4eedf4c8e016451bc2ea71d949cc7857b89a31a50b65d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c9e5357e-e386-4494-a394-edba02b3c4a2", "node_type": "1", "metadata": {"file_path": "data/Four quadrants of Conformism.txt", "file_name": "Four quadrants of Conformism.txt", "file_type": "text/plain", "file_size": 12089, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "c7cc2e6ee133d40215cd97b384ce11493fea18a74dc9ab32fb76027388715c55", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "22d1b845-dcd1-4e9d-a158-5d3e652595da", "node_type": "1", "metadata": {}, "hash": "3f28181915633467070161d117a0d4e4c6a56a00cc9451ca8fb5684b41d7bc00", "class_name": "RelatedNodeInfo"}}, "text": "And that is not an edge case. The best ideas do exactly that: they have consequences in fields far removed from their origins. Having ideas in a world where some ideas are banned is like playing soccer on a pitch that has a minefield in one corner. You don't just play the same game you would have, but on a different shaped pitch. You play a much more subdued game even on the ground that's safe.\n\nIn the past, the way the independent-minded protected themselves was to congregate in a handful of places \u2014 first in courts, and later in universities \u2014 where they could to some extent make their own rules. Places where people work with ideas tend to have customs protecting free inquiry, for the same reason wafer fabs have powerful air filters, or recording studios good sound insulation. For the last couple centuries at least, when the aggressively conventional-minded were on the rampage for whatever reason, universities were the safest places to be.\n\nThat may not work this time though, due to the unfortunate fact that the latest wave of intolerance began in universities. It began in the mid 1980s, and by 2000 seemed to have died down, but it has recently flared up again with the arrival of social media. This seems, unfortunately, to have been an own goal by Silicon Valley. Though the people who run Silicon Valley are almost all independent-minded, they've handed the aggressively conventional-minded a tool such as they could only have dreamed of.\n\nOn the other hand, perhaps the decline in the spirit of free inquiry within universities is as much the symptom of the departure of the independent-minded as the cause. People who would have become professors 50 years ago have other options now. Now they can become quants or start startups. You have to be independent-minded to succeed at either of those. If these people had been professors, they'd have put up a stiffer resistance on behalf of academic freedom. So perhaps the picture of the independent-minded fleeing declining universities is too gloomy. Perhaps the universities are declining because so many have already left. [5]\n\nThough I've spent a lot of time thinking about this situation, I can't predict how it plays out. Could some universities reverse the current trend and remain places where the independent-minded want to congregate? Or will the independent-minded gradually abandon them? I worry a lot about what we might lose if that happened.\n\nBut I'm hopeful long term. The independent-minded are good at protecting themselves. If existing institutions are compromised, they'll create new ones. That may require some imagination. But imagination is, after all, their specialty.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] I realize of course that if people's personalities vary in any two ways, you can use them as axes and call the resulting four quadrants personality types. So what I'm really claiming is that the axes are orthogonal and that there's significant variation in both.\n\n[2] The aggressively conventional-minded aren't responsible for all the trouble in the world. Another big source of trouble is the sort of charismatic leader who gains power by appealing to them. They become much more dangerous when such leaders emerge.\n\n[3] I never worried about writing things that offended the conventional-minded when I was running Y Combinator. If YC were a cookie company, I'd have faced a difficult moral choice. Conventional-minded people eat cookies too. But they don't start successful startups. So if I deterred them from applying to YC, the only effect was to save us work reading applications.\n\n[4] There has been progress in one area: the punishments for talking about banned ideas are less severe than in the past. There's little danger of being killed, at least in richer countries. The aggressively conventional-minded are mostly satisfied with getting people fired.\n\n[5] Many professors are independent-minded \u2014 especially in math, the hard sciences, and engineering, where you have to be to succeed. But students are more representative of the general population, and thus mostly conventional-minded. So when professors and students are in conflict, it's not just a conflict between generations but also between different types of people.\n\n\n\nThanks to Sam Altman, Trevor Blackwell, Nicholas Christakis, Patrick Collison, Sam Gichuru, Jessica Livingston, Patrick McKenzie, Geoff Ralston, and Harj Taggar for reading drafts of this.", "start_char_idx": 7663, "end_char_idx": 12081, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "22d1b845-dcd1-4e9d-a158-5d3e652595da": {"__data__": {"id_": "22d1b845-dcd1-4e9d-a158-5d3e652595da", "embedding": null, "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7898c51-29da-4c33-8dc6-2b93d0d1a432", "node_type": "4", "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "1aa6001e7f4aeec183a6bc175bb38b68babf1059c984b79eb9f505151a174b9a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b6f6b6d-0d96-44a3-a45a-4d2e237412c1", "node_type": "1", "metadata": {"file_path": "data/Four quadrants of Conformism.txt", "file_name": "Four quadrants of Conformism.txt", "file_type": "text/plain", "file_size": 12089, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3f9bf3b83bc3dbf3288f729483baf2b122fc0704191aa3b6674a8c336b02dcd3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "93ac1188-dd13-4e4e-ae41-4849cd2333a5", "node_type": "1", "metadata": {}, "hash": "633d7dddb49ac52103bf3fbf7cf4f48d14b9013d5a3c1d8157046b2dac5d265d", "class_name": "RelatedNodeInfo"}}, "text": "The Lesson to Unlearn\n\nDecember 2019\n\nThe most damaging thing you learned in school wasn't something you learned in any specific class. It was learning to get good grades.\n\nWhen I was in college, a particularly earnest philosophy grad student once told me that he never cared what grade he got in a class, only what he learned in it. This stuck in my mind because it was the only time I ever heard anyone say such a thing.\n\nFor me, as for most students, the measurement of what I was learning completely dominated actual learning in college. I was fairly earnest; I was genuinely interested in most of the classes I took, and I worked hard. And yet I worked by far the hardest when I was studying for a test.\n\nIn theory, tests are merely what their name implies: tests of what you've learned in the class. In theory you shouldn't have to prepare for a test in a class any more than you have to prepare for a blood test. In theory you learn from taking the class, from going to the lectures and doing the reading and/or assignments, and the test that comes afterward merely measures how well you learned.\n\nIn practice, as almost everyone reading this will know, things are so different that hearing this explanation of how classes and tests are meant to work is like hearing the etymology of a word whose meaning has changed completely. In practice, the phrase \"studying for a test\" was almost redundant, because that was when one really studied. The difference between diligent and slack students was that the former studied hard for tests and the latter didn't. No one was pulling all-nighters two weeks into the semester.\n\nEven though I was a diligent student, almost all the work I did in school was aimed at getting a good grade on something.\n\nTo many people, it would seem strange that the preceding sentence has a \"though\" in it. Aren't I merely stating a tautology? Isn't that what a diligent student is, a straight-A student? That's how deeply the conflation of learning with grades has infused our culture.\n\nIs it so bad if learning is conflated with grades? Yes, it is bad. And it wasn't till decades after college, when I was running Y Combinator, that I realized how bad it is.\n\nI knew of course when I was a student that studying for a test is far from identical with actual learning. At the very least, you don't retain knowledge you cram into your head the night before an exam. But the problem is worse than that. The real problem is that most tests don't come close to measuring what they're supposed to.\n\nIf tests truly were tests of learning, things wouldn't be so bad. Getting good grades and learning would converge, just a little late. The problem is that nearly all tests given to students are terribly hackable. Most people who've gotten good grades know this, and know it so well they've ceased even to question it. You'll see when you realize how naive it sounds to act otherwise.\n\nSuppose you're taking a class on medieval history and the final exam is coming up. The final exam is supposed to be a test of your knowledge of medieval history, right? So if you have a couple days between now and the exam, surely the best way to spend the time, if you want to do well on the exam, is to read the best books you can find about medieval history. Then you'll know a lot about it, and do well on the exam.\n\nNo, no, no, experienced students are saying to themselves. If you merely read good books on medieval history, most of the stuff you learned wouldn't be on the test. It's not good books you want to read, but the lecture notes and assigned reading in this class. And even most of that you can ignore, because you only have to worry about the sort of thing that could turn up as a test question. You're looking for sharply-defined chunks of information. If one of the assigned readings has an interesting digression on some subtle point, you can safely ignore that, because it's not the sort of thing that could be turned into a test question. But if the professor tells you that there were three underlying causes of the Schism of 1378, or three main consequences of the Black Death, you'd better know them. And whether they were in fact the causes or consequences is beside the point. For the purposes of this class they are.\n\nAt a university there are often copies of old exams floating around, and these narrow still further what you have to learn. As well as learning what kind of questions this professor asks, you'll often get actual exam questions. Many professors re-use them. After teaching a class for 10 years, it would be hard not to, at least inadvertently.", "start_char_idx": 0, "end_char_idx": 4597, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "93ac1188-dd13-4e4e-ae41-4849cd2333a5": {"__data__": {"id_": "93ac1188-dd13-4e4e-ae41-4849cd2333a5", "embedding": null, "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7898c51-29da-4c33-8dc6-2b93d0d1a432", "node_type": "4", "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "1aa6001e7f4aeec183a6bc175bb38b68babf1059c984b79eb9f505151a174b9a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "22d1b845-dcd1-4e9d-a158-5d3e652595da", "node_type": "1", "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "0f319933a9c9b1b5e2b0b0c2bf188d05e6a637b0edd15ecb3fd73c6f000e7b6b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4fe16796-d411-4d5a-979e-9667004cfeb8", "node_type": "1", "metadata": {}, "hash": "b869b9e244919248a8bb73931db288e2f0d1ba168f482a4fa73b0cb9de46a85f", "class_name": "RelatedNodeInfo"}}, "text": "You're looking for sharply-defined chunks of information. If one of the assigned readings has an interesting digression on some subtle point, you can safely ignore that, because it's not the sort of thing that could be turned into a test question. But if the professor tells you that there were three underlying causes of the Schism of 1378, or three main consequences of the Black Death, you'd better know them. And whether they were in fact the causes or consequences is beside the point. For the purposes of this class they are.\n\nAt a university there are often copies of old exams floating around, and these narrow still further what you have to learn. As well as learning what kind of questions this professor asks, you'll often get actual exam questions. Many professors re-use them. After teaching a class for 10 years, it would be hard not to, at least inadvertently.\n\nIn some classes, your professor will have had some sort of political axe to grind, and if so you'll have to grind it too. The need for this varies. In classes in math or the hard sciences or engineering it's rarely necessary, but at the other end of the spectrum there are classes where you couldn't get a good grade without it.\n\nGetting a good grade in a class on x is so different from learning a lot about x that you have to choose one or the other, and you can't blame students if they choose grades. Everyone judges them by their grades \u2014 graduate programs, employers, scholarships, even their own parents.\n\nI liked learning, and I really enjoyed some of the papers and programs I wrote in college. But did I ever, after turning in a paper in some class, sit down and write another just for fun? Of course not. I had things due in other classes. If it ever came to a choice of learning or grades, I chose grades. I hadn't come to college to do badly.\n\nAnyone who cares about getting good grades has to play this game, or they'll be surpassed by those who do. And at elite universities, that means nearly everyone, since someone who didn't care about getting good grades probably wouldn't be there in the first place. The result is that students compete to maximize the difference between learning and getting good grades.\n\nWhy are tests so bad? More precisely, why are they so hackable? Any experienced programmer could answer that. How hackable is software whose author hasn't paid any attention to preventing it from being hacked? Usually it's as porous as a colander.\n\nHackable is the default for any test imposed by an authority. The reason the tests you're given are so consistently bad \u2014 so consistently far from measuring what they're supposed to measure \u2014 is simply that the people creating them haven't made much effort to prevent them from being hacked.\n\nBut you can't blame teachers if their tests are hackable. Their job is to teach, not to create unhackable tests. The real problem is grades, or more precisely, that grades have been overloaded. If grades were merely a way for teachers to tell students what they were doing right and wrong, like a coach giving advice to an athlete, students wouldn't be tempted to hack tests. But unfortunately after a certain age grades become more than advice. After a certain age, whenever you're being taught, you're usually also being judged.\n\nI've used college tests as an example, but those are actually the least hackable. All the tests most students take their whole lives are at least as bad, including, most spectacularly of all, the test that gets them into college. If getting into college were merely a matter of having the quality of one's mind measured by admissions officers the way scientists measure the mass of an object, we could tell teenage kids \"learn a lot\" and leave it at that. You can tell how bad college admissions are, as a test, from how unlike high school that sounds. In practice, the freakishly specific nature of the stuff ambitious kids have to do in high school is directly proportionate to the hackability of college admissions. The classes you don't care about that are mostly memorization, the random \"extracurricular activities\" you have to participate in to show you're \"well-rounded,\" the standardized tests as artificial as chess, the \"essay\" you have to write that's presumably meant to hit some very specific target, but you're not told what.\n\nAs well as being bad in what it does to kids, this test is also bad in the sense of being very hackable. So hackable that whole industries have grown up to hack it. This is the explicit purpose of test-prep companies and admissions counsellors, but it's also a significant part of the function of private schools.\n\nWhy is this particular test so hackable?", "start_char_idx": 3722, "end_char_idx": 8398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4fe16796-d411-4d5a-979e-9667004cfeb8": {"__data__": {"id_": "4fe16796-d411-4d5a-979e-9667004cfeb8", "embedding": null, "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7898c51-29da-4c33-8dc6-2b93d0d1a432", "node_type": "4", "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "1aa6001e7f4aeec183a6bc175bb38b68babf1059c984b79eb9f505151a174b9a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "93ac1188-dd13-4e4e-ae41-4849cd2333a5", "node_type": "1", "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "757ccfd8e938a982292b0387cf397d01b8e5c2535b12b01ebceaaf088181a36c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5682fbee-481f-4173-b159-b8cbe7a60299", "node_type": "1", "metadata": {}, "hash": "d172a8d4de3ce8860aebccd2fb451adfb1bc91cc1c0f828e2b9d0c91c907f94a", "class_name": "RelatedNodeInfo"}}, "text": "In practice, the freakishly specific nature of the stuff ambitious kids have to do in high school is directly proportionate to the hackability of college admissions. The classes you don't care about that are mostly memorization, the random \"extracurricular activities\" you have to participate in to show you're \"well-rounded,\" the standardized tests as artificial as chess, the \"essay\" you have to write that's presumably meant to hit some very specific target, but you're not told what.\n\nAs well as being bad in what it does to kids, this test is also bad in the sense of being very hackable. So hackable that whole industries have grown up to hack it. This is the explicit purpose of test-prep companies and admissions counsellors, but it's also a significant part of the function of private schools.\n\nWhy is this particular test so hackable? I think because of what it's measuring. Although the popular story is that the way to get into a good college is to be really smart, admissions officers at elite colleges neither are, nor claim to be, looking only for that. What are they looking for? They're looking for people who are not simply smart, but admirable in some more general sense. And how is this more general admirableness measured? The admissions officers feel it. In other words, they accept who they like.\n\nSo what college admissions is a test of is whether you suit the taste of some group of people. Well, of course a test like that is going to be hackable. And because it's both very hackable and there's (thought to be) a lot at stake, it's hacked like nothing else. That's why it distorts your life so much for so long.\n\nIt's no wonder high school students often feel alienated. The shape of their lives is completely artificial.\n\nBut wasting your time is not the worst thing the educational system does to you. The worst thing it does is to train you that the way to win is by hacking bad tests. This is a much subtler problem that I didn't recognize until I saw it happening to other people.\n\nWhen I started advising startup founders at Y Combinator, especially young ones, I was puzzled by the way they always seemed to make things overcomplicated. How, they would ask, do you raise money? What's the trick for making venture capitalists want to invest in you? The best way to make VCs want to invest in you, I would explain, is to actually be a good investment. Even if you could trick VCs into investing in a bad startup, you'd be tricking yourselves too. You're investing time in the same company you're asking them to invest money in. If it's not a good investment, why are you even doing it?\n\nOh, they'd say, and then after a pause to digest this revelation, they'd ask: What makes a startup a good investment?\n\nSo I would explain that what makes a startup promising, not just in the eyes of investors but in fact, is growth. Ideally in revenue, but failing that in usage. What they needed to do was get lots of users.\n\nHow does one get lots of users? They had all kinds of ideas about that. They needed to do a big launch that would get them \"exposure.\" They needed influential people to talk about them. They even knew they needed to launch on a tuesday, because that's when one gets the most attention.\n\nNo, I would explain, that is not how to get lots of users. The way you get lots of users is to make the product really great. Then people will not only use it but recommend it to their friends, so your growth will be exponential once you get it started.\n\nAt this point I've told the founders something you'd think would be completely obvious: that they should make a good company by making a good product. And yet their reaction would be something like the reaction many physicists must have had when they first heard about the theory of relativity: a mixture of astonishment at its apparent genius, combined with a suspicion that anything so weird couldn't possibly be right. Ok, they would say, dutifully. And could you introduce us to such-and-such influential person? And remember, we want to launch on Tuesday.\n\nIt would sometimes take founders years to grasp these simple lessons. And not because they were lazy or stupid. They just seemed blind to what was right in front of them.\n\nWhy, I would ask myself, do they always make things so complicated? And then one day I realized this was not a rhetorical question.\n\nWhy did founders tie themselves in knots doing the wrong things when the answer was right in front of them? Because that was what they'd been trained to do.", "start_char_idx": 7554, "end_char_idx": 12066, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5682fbee-481f-4173-b159-b8cbe7a60299": {"__data__": {"id_": "5682fbee-481f-4173-b159-b8cbe7a60299", "embedding": null, "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7898c51-29da-4c33-8dc6-2b93d0d1a432", "node_type": "4", "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "1aa6001e7f4aeec183a6bc175bb38b68babf1059c984b79eb9f505151a174b9a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4fe16796-d411-4d5a-979e-9667004cfeb8", "node_type": "1", "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "7385a81843ea19dcb3a4118e954c9e66783f8d3cb848f6f419976394daf2d3df", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "312079db-f837-486f-a031-d90ed52ef056", "node_type": "1", "metadata": {}, "hash": "d7f6aca74eaa5b42fd7922e631bb29ac8818db0bb3b9d11a3699026565d8b8ed", "class_name": "RelatedNodeInfo"}}, "text": "And yet their reaction would be something like the reaction many physicists must have had when they first heard about the theory of relativity: a mixture of astonishment at its apparent genius, combined with a suspicion that anything so weird couldn't possibly be right. Ok, they would say, dutifully. And could you introduce us to such-and-such influential person? And remember, we want to launch on Tuesday.\n\nIt would sometimes take founders years to grasp these simple lessons. And not because they were lazy or stupid. They just seemed blind to what was right in front of them.\n\nWhy, I would ask myself, do they always make things so complicated? And then one day I realized this was not a rhetorical question.\n\nWhy did founders tie themselves in knots doing the wrong things when the answer was right in front of them? Because that was what they'd been trained to do. Their education had taught them that the way to win was to hack the test. And without even telling them they were being trained to do this. The younger ones, the recent graduates, had never faced a non-artificial test. They thought this was just how the world worked: that the first thing you did, when facing any kind of challenge, was to figure out what the trick was for hacking the test. That's why the conversation would always start with how to raise money, because that read as the test. It came at the end of YC. It had numbers attached to it, and higher numbers seemed to be better. It must be the test.\n\nThere are certainly big chunks of the world where the way to win is to hack the test. This phenomenon isn't limited to schools. And some people, either due to ideology or ignorance, claim that this is true of startups too. But it isn't. In fact, one of the most striking things about startups is the degree to which you win by simply doing good work. There are edge cases, as there are in anything, but in general you win by getting users, and what users care about is whether the product does what they want.\n\nWhy did it take me so long to understand why founders made startups overcomplicated? Because I hadn't realized explicitly that schools train us to win by hacking bad tests. And not just them, but me! I'd been trained to hack bad tests too, and hadn't realized it till decades later.\n\nI had lived as if I realized it, but without knowing why. For example, I had avoided working for big companies. But if you'd asked why, I'd have said it was because they were bogus, or bureaucratic. Or just yuck. I never understood how much of my dislike of big companies was due to the fact that you win by hacking bad tests.\n\nSimilarly, the fact that the tests were unhackable was a lot of what attracted me to startups. But again, I hadn't realized that explicitly.\n\nI had in effect achieved by successive approximations something that may have a closed-form solution. I had gradually undone my training in hacking bad tests without knowing I was doing it. Could someone coming out of school banish this demon just by knowing its name, and saying begone? It seems worth trying.\n\nMerely talking explicitly about this phenomenon is likely to make things better, because much of its power comes from the fact that we take it for granted. After you've noticed it, it seems the elephant in the room, but it's a pretty well camouflaged elephant. The phenomenon is so old, and so pervasive. And it's simply the result of neglect. No one meant things to be this way. This is just what happens when you combine learning with grades, competition, and the naive assumption of unhackability.\n\nIt was mind-blowing to realize that two of the things I'd puzzled about the most \u2014 the bogusness of high school, and the difficulty of getting founders to see the obvious \u2014 both had the same cause. It's rare for such a big block to slide into place so late.\n\nUsually when that happens it has implications in a lot of different areas, and this case seems no exception. For example, it suggests both that education could be done better, and how you might fix it. But it also suggests a potential answer to the question all big companies seem to have: how can we be more like a startup? I'm not going to chase down all the implications now. What I want to focus on here is what it means for individuals.\n\nTo start with, it means that most ambitious kids graduating from college have something they may want to unlearn. But it also changes how you look at the world.", "start_char_idx": 11194, "end_char_idx": 15622, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "312079db-f837-486f-a031-d90ed52ef056": {"__data__": {"id_": "312079db-f837-486f-a031-d90ed52ef056", "embedding": null, "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7898c51-29da-4c33-8dc6-2b93d0d1a432", "node_type": "4", "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "1aa6001e7f4aeec183a6bc175bb38b68babf1059c984b79eb9f505151a174b9a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5682fbee-481f-4173-b159-b8cbe7a60299", "node_type": "1", "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "f4324507de1b32aaf1655438bd2059f396e52f0a535472d7658a22a0c6b5b897", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e010bab3-21ac-4a78-bd9f-057387c59a1c", "node_type": "1", "metadata": {}, "hash": "9d8caf81892cf55ca50defb0d58876ed9c57954a4b696ab4de33847c9fda0d24", "class_name": "RelatedNodeInfo"}}, "text": "It was mind-blowing to realize that two of the things I'd puzzled about the most \u2014 the bogusness of high school, and the difficulty of getting founders to see the obvious \u2014 both had the same cause. It's rare for such a big block to slide into place so late.\n\nUsually when that happens it has implications in a lot of different areas, and this case seems no exception. For example, it suggests both that education could be done better, and how you might fix it. But it also suggests a potential answer to the question all big companies seem to have: how can we be more like a startup? I'm not going to chase down all the implications now. What I want to focus on here is what it means for individuals.\n\nTo start with, it means that most ambitious kids graduating from college have something they may want to unlearn. But it also changes how you look at the world. Instead of looking at all the different kinds of work people do and thinking of them vaguely as more or less appealing, you can now ask a very specific question that will sort them in an interesting way: to what extent do you win at this kind of work by hacking bad tests?\n\nIt would help if there was a way to recognize bad tests quickly. Is there a pattern here? It turns out there is.\n\nTests can be divided into two kinds: those that are imposed by authorities, and those that aren't. Tests that aren't imposed by authorities are inherently unhackable, in the sense that no one is claiming they're tests of anything more than they actually test. A football match, for example, is simply a test of who wins, not which team is better. You can tell that from the fact that commentators sometimes say afterward that the better team won. Whereas tests imposed by authorities are usually proxies for something else. A test in a class is supposed to measure not just how well you did on that particular test, but how much you learned in the class. While tests that aren't imposed by authorities are inherently unhackable, those imposed by authorities have to be made unhackable. Usually they aren't. So as a first approximation, bad tests are roughly equivalent to tests imposed by authorities.\n\nYou might actually like to win by hacking bad tests. Presumably some people do. But I bet most people who find themselves doing this kind of work don't like it. They just take it for granted that this is how the world works, unless you want to drop out and be some kind of hippie artisan.\n\nI suspect many people implicitly assume that working in a field with bad tests is the price of making lots of money. But that, I can tell you, is false. It used to be true. In the mid-twentieth century, when the economy was composed of oligopolies, the only way to the top was by playing their game. But it's not true now. There are now ways to get rich by doing good work, and that's part of the reason people are so much more excited about getting rich than they used to be. When I was a kid, you could either become an engineer and make cool things, or make lots of money by becoming an \"executive.\" Now you can make lots of money by making cool things.\n\nHacking bad tests is becoming less important as the link between work and authority erodes. The erosion of that link is one of the most important trends happening now, and we see its effects in almost every kind of work people do. Startups are one of the most visible examples, but we see much the same thing in writing. Writers no longer have to submit to publishers and editors to reach readers; now they can go direct.\n\nThe more I think about this question, the more optimistic I get. This seems one of those situations where we don't realize how much something was holding us back until it's eliminated. And I can foresee the whole bogus edifice crumbling. Imagine what happens as more and more people start to ask themselves if they want to win by hacking bad tests, and decide that they don't. The kinds of work where you win by hacking bad tests will be starved of talent, and the kinds where you win by doing good work will see an influx of the most ambitious people. And as hacking bad tests shrinks in importance, education will evolve to stop training us to do it. Imagine what the world could look like if that happened.\n\nThis is not just a lesson for individuals to unlearn, but one for society to unlearn, and we'll be amazed at the energy that's liberated when we do.", "start_char_idx": 14760, "end_char_idx": 19144, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e010bab3-21ac-4a78-bd9f-057387c59a1c": {"__data__": {"id_": "e010bab3-21ac-4a78-bd9f-057387c59a1c", "embedding": null, "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7898c51-29da-4c33-8dc6-2b93d0d1a432", "node_type": "4", "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "1aa6001e7f4aeec183a6bc175bb38b68babf1059c984b79eb9f505151a174b9a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "312079db-f837-486f-a031-d90ed52ef056", "node_type": "1", "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "e8023cf12278ce4ef07da1129986c040d89b413a2a247f7cd0b9bff97cc17072", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a0e90e9-b24a-4011-89dc-deffed751f9c", "node_type": "1", "metadata": {}, "hash": "476a2e40b9f6b8b37bd2bca395dd490645215cb8a535d36d0aaa5bcf4a22b843", "class_name": "RelatedNodeInfo"}}, "text": "The more I think about this question, the more optimistic I get. This seems one of those situations where we don't realize how much something was holding us back until it's eliminated. And I can foresee the whole bogus edifice crumbling. Imagine what happens as more and more people start to ask themselves if they want to win by hacking bad tests, and decide that they don't. The kinds of work where you win by hacking bad tests will be starved of talent, and the kinds where you win by doing good work will see an influx of the most ambitious people. And as hacking bad tests shrinks in importance, education will evolve to stop training us to do it. Imagine what the world could look like if that happened.\n\nThis is not just a lesson for individuals to unlearn, but one for society to unlearn, and we'll be amazed at the energy that's liberated when we do.\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] If using tests only to measure learning sounds impossibly utopian, that is already the way things work at Lambda School. Lambda School doesn't have grades. You either graduate or you don't. The only purpose of tests is to decide at each stage of the curriculum whether you can continue to the next. So in effect the whole school is pass/fail.\n\n[2] If the final exam consisted of a long conversation with the professor, you could prepare for it by reading good books on medieval history. A lot of the hackability of tests in schools is due to the fact that the same test has to be given to large numbers of students.\n\n[3] Learning is the naive algorithm for getting good grades.\n\n[4] Hacking has multiple senses. There's a narrow sense in which it means to compromise something. That's the sense in which one hacks a bad test. But there's another, more general sense, meaning to find a surprising solution to a problem, often by thinking differently about it. Hacking in this sense is a wonderful thing. And indeed, some of the hacks people use on bad tests are impressively ingenious; the problem is not so much the hacking as that, because the tests are hackable, they don't test what they're meant to.\n\n[5] The people who pick startups at Y Combinator are similar to admissions officers, except that instead of being arbitrary, their acceptance criteria are trained by a very tight feedback loop. If you accept a bad startup or reject a good one, you will usually know it within a year or two at the latest, and often within a month.\n\n[6] I'm sure admissions officers are tired of reading applications from kids who seem to have no personality beyond being willing to seem however they're supposed to seem to get accepted. What they don't realize is that they are, in a sense, looking in a mirror. The lack of authenticity in the applicants is a reflection of the arbitrariness of the application process. A dictator might just as well complain about the lack of authenticity in the people around him.\n\n[7] By good work, I don't mean morally good, but good in the sense in which a good craftsman does good work.\n\n[8] There are borderline cases where it's hard to say which category a test falls in. For example, is raising venture capital like college admissions, or is it like selling to a customer?\n\n[9] Note that a good test is merely one that's unhackable. Good here doesn't mean morally good, but good in the sense of working well. The difference between fields with bad tests and good ones is not that the former are bad and the latter are good, but that the former are bogus and the latter aren't. But those two measures are not unrelated. As Tara Ploughman said, the path from good to evil goes through bogus.\n\n[10] People who think the recent increase in economic inequality is due to changes in tax policy seem very naive to anyone with experience in startups. Different people are getting rich now than used to, and they're getting much richer than mere tax savings could make them.\n\n[11] Note to tiger parents: you may think you're training your kids to win, but if you're training them to win by hacking bad tests, you are, as parents so often do, training them to fight the last war.", "start_char_idx": 18285, "end_char_idx": 22366, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a0e90e9-b24a-4011-89dc-deffed751f9c": {"__data__": {"id_": "6a0e90e9-b24a-4011-89dc-deffed751f9c", "embedding": null, "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db", "node_type": "4", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "14ac75d56b042ce741d8f144ae6018a029ff8ef4c12864eb9b4c5b97c4b09320", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e010bab3-21ac-4a78-bd9f-057387c59a1c", "node_type": "1", "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "99a8b3652b8ba4cc8e819606d4da39819da6f54484aea5dc883b23cc8235ba94", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0ca2d67a-610c-4b0d-a683-a9381c923ef0", "node_type": "1", "metadata": {}, "hash": "2c1ec17f02d59212bff0a6491b66643d6a1c5a865ac374cc6939cc93d7ef9989", "class_name": "RelatedNodeInfo"}}, "text": "Superlinear Returns\n\nOctober 2023\n\nOne of the most important things I didn't understand about the world when I was a child is the degree to which the returns for performance are superlinear.\n\nTeachers and coaches implicitly told us the returns were linear. \"You get out,\" I heard a thousand times, \"what you put in.\" They meant well, but this is rarely true. If your product is only half as good as your competitor's, you don't get half as many customers. You get no customers, and you go out of business.\n\nIt's obviously true that the returns for performance are superlinear in business. Some think this is a flaw of capitalism, and that if we changed the rules it would stop being true. But superlinear returns for performance are a feature of the world, not an artifact of rules we've invented. We see the same pattern in fame, power, military victories, knowledge, and even benefit to humanity. In all of these, the rich get richer. [1]\n\nYou can't understand the world without understanding the concept of superlinear returns. And if you're ambitious you definitely should, because this will be the wave you surf on.\n\n\n\n\n\nIt may seem as if there are a lot of different situations with superlinear returns, but as far as I can tell they reduce to two fundamental causes: exponential growth and thresholds.\n\nThe most obvious case of superlinear returns is when you're working on something that grows exponentially. For example, growing bacterial cultures. When they grow at all, they grow exponentially. But they're tricky to grow. Which means the difference in outcome between someone who's adept at it and someone who's not is very great.\n\nStartups can also grow exponentially, and we see the same pattern there. Some manage to achieve high growth rates. Most don't. And as a result you get qualitatively different outcomes: the companies with high growth rates tend to become immensely valuable, while the ones with lower growth rates may not even survive.\n\nY Combinator encourages founders to focus on growth rate rather than absolute numbers. It prevents them from being discouraged early on, when the absolute numbers are still low. It also helps them decide what to focus on: you can use growth rate as a compass to tell you how to evolve the company. But the main advantage is that by focusing on growth rate you tend to get something that grows exponentially.\n\nYC doesn't explicitly tell founders that with growth rate \"you get out what you put in,\" but it's not far from the truth. And if growth rate were proportional to performance, then the reward for performance p over time t would be proportional to pt.\n\nEven after decades of thinking about this, I find that sentence startling.\n\nWhenever how well you do depends on how well you've done, you'll get exponential growth. But neither our DNA nor our customs prepare us for it. No one finds exponential growth natural; every child is surprised, the first time they hear it, by the story of the man who asks the king for a single grain of rice the first day and double the amount each successive day.\n\nWhat we don't understand naturally we develop customs to deal with, but we don't have many customs about exponential growth either, because there have been so few instances of it in human history. In principle herding should have been one: the more animals you had, the more offspring they'd have. But in practice grazing land was the limiting factor, and there was no plan for growing that exponentially.\n\nOr more precisely, no generally applicable plan. There was a way to grow one's territory exponentially: by conquest. The more territory you control, the more powerful your army becomes, and the easier it is to conquer new territory. This is why history is full of empires. But so few people created or ran empires that their experiences didn't affect customs very much. The emperor was a remote and terrifying figure, not a source of lessons one could use in one's own life.\n\nThe most common case of exponential growth in preindustrial times was probably scholarship. The more you know, the easier it is to learn new things. The result, then as now, was that some people were startlingly more knowledgeable than the rest about certain topics. But this didn't affect customs much either. Although empires of ideas can overlap and there can thus be far more emperors, in preindustrial times this type of empire had little practical effect. [2]\n\nThat has changed in the last few centuries. Now the emperors of ideas can design bombs that defeat the emperors of territory. But this phenomenon is still so new that we haven't fully assimilated it. Few even of the participants realize they're benefitting from exponential growth or ask what they can learn from other instances of it.", "start_char_idx": 0, "end_char_idx": 4751, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ca2d67a-610c-4b0d-a683-a9381c923ef0": {"__data__": {"id_": "0ca2d67a-610c-4b0d-a683-a9381c923ef0", "embedding": null, "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db", "node_type": "4", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "14ac75d56b042ce741d8f144ae6018a029ff8ef4c12864eb9b4c5b97c4b09320", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a0e90e9-b24a-4011-89dc-deffed751f9c", "node_type": "1", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "cca064ec269e496120bcaff9b61d57f5982b43b1993611ec1d493b29fa6c5542", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "23858170-68a0-48ae-ad6e-20a5ffac6194", "node_type": "1", "metadata": {}, "hash": "3f7591809be2b00036678c43e876600520969531a5387d24a3d0328244d01616", "class_name": "RelatedNodeInfo"}}, "text": "The emperor was a remote and terrifying figure, not a source of lessons one could use in one's own life.\n\nThe most common case of exponential growth in preindustrial times was probably scholarship. The more you know, the easier it is to learn new things. The result, then as now, was that some people were startlingly more knowledgeable than the rest about certain topics. But this didn't affect customs much either. Although empires of ideas can overlap and there can thus be far more emperors, in preindustrial times this type of empire had little practical effect. [2]\n\nThat has changed in the last few centuries. Now the emperors of ideas can design bombs that defeat the emperors of territory. But this phenomenon is still so new that we haven't fully assimilated it. Few even of the participants realize they're benefitting from exponential growth or ask what they can learn from other instances of it.\n\nThe other source of superlinear returns is embodied in the expression \"winner take all.\" In a sports match the relationship between performance and return is a step function: the winning team gets one win whether they do much better or just slightly better. [3]\n\nThe source of the step function is not competition per se, however. It's that there are thresholds in the outcome. You don't need competition to get those. There can be thresholds in situations where you're the only participant, like proving a theorem or hitting a target.\n\nIt's remarkable how often a situation with one source of superlinear returns also has the other. Crossing thresholds leads to exponential growth: the winning side in a battle usually suffers less damage, which makes them more likely to win in the future. And exponential growth helps you cross thresholds: in a market with network effects, a company that grows fast enough can shut out potential competitors.\n\nFame is an interesting example of a phenomenon that combines both sources of superlinear returns. Fame grows exponentially because existing fans bring you new ones. But the fundamental reason it's so concentrated is thresholds: there's only so much room on the A-list in the average person's head.\n\nThe most important case combining both sources of superlinear returns may be learning. Knowledge grows exponentially, but there are also thresholds in it. Learning to ride a bicycle, for example. Some of these thresholds are akin to machine tools: once you learn to read, you're able to learn anything else much faster. But the most important thresholds of all are those representing new discoveries. Knowledge seems to be fractal in the sense that if you push hard at the boundary of one area of knowledge, you sometimes discover a whole new field. And if you do, you get first crack at all the new discoveries to be made in it. Newton did this, and so did Durer and Darwin.", "start_char_idx": 3843, "end_char_idx": 6674, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23858170-68a0-48ae-ad6e-20a5ffac6194": {"__data__": {"id_": "23858170-68a0-48ae-ad6e-20a5ffac6194", "embedding": null, "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db", "node_type": "4", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "14ac75d56b042ce741d8f144ae6018a029ff8ef4c12864eb9b4c5b97c4b09320", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0ca2d67a-610c-4b0d-a683-a9381c923ef0", "node_type": "1", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "d42a5329a62cdec8c9ae42445ea31cd74e4ce2b8ccb3dfc17b7e8522f76c7662", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6db238cf-e02d-4256-96c6-3e7e89769f73", "node_type": "1", "metadata": {}, "hash": "4b2a952c4c1a539dbc49782e3201d5b468778d545f5ff18633116def10423ff6", "class_name": "RelatedNodeInfo"}}, "text": "Fame grows exponentially because existing fans bring you new ones. But the fundamental reason it's so concentrated is thresholds: there's only so much room on the A-list in the average person's head.\n\nThe most important case combining both sources of superlinear returns may be learning. Knowledge grows exponentially, but there are also thresholds in it. Learning to ride a bicycle, for example. Some of these thresholds are akin to machine tools: once you learn to read, you're able to learn anything else much faster. But the most important thresholds of all are those representing new discoveries. Knowledge seems to be fractal in the sense that if you push hard at the boundary of one area of knowledge, you sometimes discover a whole new field. And if you do, you get first crack at all the new discoveries to be made in it. Newton did this, and so did Durer and Darwin.\n\n\n\n\n\nAre there general rules for finding situations with superlinear returns? The most obvious one is to seek work that compounds.\n\nThere are two ways work can compound. It can compound directly, in the sense that doing well in one cycle causes you to do better in the next. That happens for example when you're building infrastructure, or growing an audience or brand. Or work can compound by teaching you, since learning compounds. This second case is an interesting one because you may feel you're doing badly as it's happening. You may be failing to achieve your immediate goal. But if you're learning a lot, then you're getting exponential growth nonetheless.\n\nThis is one reason Silicon Valley is so tolerant of failure. People in Silicon Valley aren't blindly tolerant of failure. They'll only continue to bet on you if you're learning from your failures. But if you are, you are in fact a good bet: maybe your company didn't grow the way you wanted, but you yourself have, and that should yield results eventually.\n\nIndeed, the forms of exponential growth that don't consist of learning are so often intermixed with it that we should probably treat this as the rule rather than the exception. Which yields another heuristic: always be learning. If you're not learning, you're probably not on a path that leads to superlinear returns.\n\nBut don't overoptimize what you're learning. Don't limit yourself to learning things that are already known to be valuable. You're learning; you don't know for sure yet what's going to be valuable, and if you're too strict you'll lop off the outliers.\n\nWhat about step functions? Are there also useful heuristics of the form \"seek thresholds\" or \"seek competition?\" Here the situation is trickier. The existence of a threshold doesn't guarantee the game will be worth playing. If you play a round of Russian roulette, you'll be in a situation with a threshold, certainly, but in the best case you're no better off. \"Seek competition\" is similarly useless; what if the prize isn't worth competing for? Sufficiently fast exponential growth guarantees both the shape and magnitude of the return curve \u2014 because something that grows fast enough will grow big even if it's trivially small at first \u2014 but thresholds only guarantee the shape. [4]\n\nA principle for taking advantage of thresholds has to include a test to ensure the game is worth playing. Here's one that does: if you come across something that's mediocre yet still popular, it could be a good idea to replace it. For example, if a company makes a product that people dislike yet still buy, then presumably they'd buy a better alternative if you made one. [5]\n\nIt would be great if there were a way to find promising intellectual thresholds. Is there a way to tell which questions have whole new fields beyond them? I doubt we could ever predict this with certainty, but the prize is so valuable that it would be useful to have predictors that were even a little better than random, and there's hope of finding those. We can to some degree predict when a research problem isn't likely to lead to new discoveries: when it seems legit but boring. Whereas the kind that do lead to new discoveries tend to seem very mystifying, but perhaps unimportant. (If they were mystifying and obviously important, they'd be famous open questions with lots of people already working on them.) So one heuristic here is to be driven by curiosity rather than careerism \u2014 to give free rein to your curiosity instead of working on what you're supposed to.", "start_char_idx": 5798, "end_char_idx": 10210, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6db238cf-e02d-4256-96c6-3e7e89769f73": {"__data__": {"id_": "6db238cf-e02d-4256-96c6-3e7e89769f73", "embedding": null, "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db", "node_type": "4", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "14ac75d56b042ce741d8f144ae6018a029ff8ef4c12864eb9b4c5b97c4b09320", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "23858170-68a0-48ae-ad6e-20a5ffac6194", "node_type": "1", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "8b7db72e7a5d78fd1a48d1436e858c31c1e6b22ed23b512754045480093c94e1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d936a809-99eb-48d8-b330-cff4c0e95dd5", "node_type": "1", "metadata": {}, "hash": "74d28f81a9055d92e1aec15a01e8750fe05d300e196e7f1a0a526254ea7d0680", "class_name": "RelatedNodeInfo"}}, "text": "The prospect of superlinear returns for performance is an exciting one for the ambitious. And there's good news in this department: this territory is expanding in both directions. There are more types of work in which you can get superlinear returns, and the returns themselves are growing.\n\nThere are two reasons for this, though they're so closely intertwined that they're more like one and a half: progress in technology, and the decreasing importance of organizations.\n\nFifty years ago it used to be much more necessary to be part of an organization to work on ambitious projects. It was the only way to get the resources you needed, the only way to have colleagues, and the only way to get distribution. So in 1970 your prestige was in most cases the prestige of the organization you belonged to. And prestige was an accurate predictor, because if you weren't part of an organization, you weren't likely to achieve much. There were a handful of exceptions, most notably artists and writers, who worked alone using inexpensive tools and had their own brands. But even they were at the mercy of organizations for reaching audiences. [6]\n\nA world dominated by organizations damped variation in the returns for performance. But this world has eroded significantly just in my lifetime. Now a lot more people can have the freedom that artists and writers had in the 20th century. There are lots of ambitious projects that don't require much initial funding, and lots of new ways to learn, make money, find colleagues, and reach audiences.\n\nThere's still plenty of the old world left, but the rate of change has been dramatic by historical standards. Especially considering what's at stake. It's hard to imagine a more fundamental change than one in the returns for performance.\n\nWithout the damping effect of institutions, there will be more variation in outcomes. Which doesn't imply everyone will be better off: people who do well will do even better, but those who do badly will do worse. That's an important point to bear in mind. Exposing oneself to superlinear returns is not for everyone. Most people will be better off as part of the pool. So who should shoot for superlinear returns? Ambitious people of two types: those who know they're so good that they'll be net ahead in a world with higher variation, and those, particularly the young, who can afford to risk trying it to find out. [7]\n\nThe switch away from institutions won't simply be an exodus of their current inhabitants. Many of the new winners will be people they'd never have let in. So the resulting democratization of opportunity will be both greater and more authentic than any tame intramural version the institutions themselves might have cooked up.", "start_char_idx": 10216, "end_char_idx": 12941, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d936a809-99eb-48d8-b330-cff4c0e95dd5": {"__data__": {"id_": "d936a809-99eb-48d8-b330-cff4c0e95dd5", "embedding": null, "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db", "node_type": "4", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "14ac75d56b042ce741d8f144ae6018a029ff8ef4c12864eb9b4c5b97c4b09320", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6db238cf-e02d-4256-96c6-3e7e89769f73", "node_type": "1", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "e2eeea953f848ba49aa6e31c92b73acf30bbb62f8d23ba92901cc70bf8903a99", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4d2629b8-419b-4615-b1bc-7a082feff008", "node_type": "1", "metadata": {}, "hash": "512093b1084b2c6d8419a4bb9744d7a54b6125f4120d7e8ccaf9bebee2653109", "class_name": "RelatedNodeInfo"}}, "text": "Not everyone is happy about this great unlocking of ambition. It threatens some vested interests and contradicts some ideologies. [8] But if you're an ambitious individual it's good news for you. How should you take advantage of it?\n\nThe most obvious way to take advantage of superlinear returns for performance is by doing exceptionally good work. At the far end of the curve, incremental effort is a bargain. All the more so because there's less competition at the far end \u2014 and not just for the obvious reason that it's hard to do something exceptionally well, but also because people find the prospect so intimidating that few even try. Which means it's not just a bargain to do exceptional work, but a bargain even to try to.\n\nThere are many variables that affect how good your work is, and if you want to be an outlier you need to get nearly all of them right. For example, to do something exceptionally well, you have to be interested in it. Mere diligence is not enough. So in a world with superlinear returns, it's even more valuable to know what you're interested in, and to find ways to work on it. [9] It will also be important to choose work that suits your circumstances. For example, if there's a kind of work that inherently requires a huge expenditure of time and energy, it will be increasingly valuable to do it when you're young and don't yet have children.\n\nThere's a surprising amount of technique to doing great work. It's not just a matter of trying hard. I'm going to take a shot giving a recipe in one paragraph.\n\nChoose work you have a natural aptitude for and a deep interest in. Develop a habit of working on your own projects; it doesn't matter what they are so long as you find them excitingly ambitious. Work as hard as you can without burning out, and this will eventually bring you to one of the frontiers of knowledge. These look smooth from a distance, but up close they're full of gaps. Notice and explore such gaps, and if you're lucky one will expand into a whole new field. Take as much risk as you can afford; if you're not failing occasionally you're probably being too conservative. Seek out the best colleagues. Develop good taste and learn from the best examples. Be honest, especially with yourself. Exercise and eat and sleep well and avoid the more dangerous drugs. When in doubt, follow your curiosity. It never lies, and it knows more than you do about what's worth paying attention to. [10]\n\nAnd there is of course one other thing you need: to be lucky. Luck is always a factor, but it's even more of a factor when you're working on your own rather than as part of an organization. And though there are some valid aphorisms about luck being where preparedness meets opportunity and so on, there's also a component of true chance that you can't do anything about. The solution is to take multiple shots. Which is another reason to start taking risks early.", "start_char_idx": 12947, "end_char_idx": 15853, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d2629b8-419b-4615-b1bc-7a082feff008": {"__data__": {"id_": "4d2629b8-419b-4615-b1bc-7a082feff008", "embedding": null, "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db", "node_type": "4", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "14ac75d56b042ce741d8f144ae6018a029ff8ef4c12864eb9b4c5b97c4b09320", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d936a809-99eb-48d8-b330-cff4c0e95dd5", "node_type": "1", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "7f79ddc566f96ceff945652c83fea1bdee7b9d44741af7056df6c101205c5fd6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7a472ee7-7fb3-46cc-a12f-b7ce9be16b0d", "node_type": "1", "metadata": {}, "hash": "ef938ac815b902df05663b3ec68a451b6071c55da34d0e88d4f392f234ea71d3", "class_name": "RelatedNodeInfo"}}, "text": "The best example of a field with superlinear returns is probably science. It has exponential growth, in the form of learning, combined with thresholds at the extreme edge of performance \u2014 literally at the limits of knowledge.\n\nThe result has been a level of inequality in scientific discovery that makes the wealth inequality of even the most stratified societies seem mild by comparison. Newton's discoveries were arguably greater than all his contemporaries' combined. [11]\n\nThis point may seem obvious, but it might be just as well to spell it out. Superlinear returns imply inequality. The steeper the return curve, the greater the variation in outcomes.\n\nIn fact, the correlation between superlinear returns and inequality is so strong that it yields another heuristic for finding work of this type: look for fields where a few big winners outperform everyone else. A kind of work where everyone does about the same is unlikely to be one with superlinear returns.\n\nWhat are fields where a few big winners outperform everyone else? Here are some obvious ones: sports, politics, art, music, acting, directing, writing, math, science, starting companies, and investing. In sports the phenomenon is due to externally imposed thresholds; you only need to be a few percent faster to win every race. In politics, power grows much as it did in the days of emperors. And in some of the other fields (including politics) success is driven largely by fame, which has its own source of superlinear growth. But when we exclude sports and politics and the effects of fame, a remarkable pattern emerges: the remaining list is exactly the same as the list of fields where you have to be independent-minded to succeed \u2014 where your ideas have to be not just correct, but novel as well. [12]\n\nThis is obviously the case in science. You can't publish papers saying things that other people have already said. But it's just as true in investing, for example. It's only useful to believe that a company will do well if most other investors don't; if everyone else thinks the company will do well, then its stock price will already reflect that, and there's no room to make money.\n\nWhat else can we learn from these fields? In all of them you have to put in the initial effort. Superlinear returns seem small at first. At this rate, you find yourself thinking, I'll never get anywhere. But because the reward curve rises so steeply at the far end, it's worth taking extraordinary measures to get there.\n\nIn the startup world, the name for this principle is \"do things that don't scale.\" If you pay a ridiculous amount of attention to your tiny initial set of customers, ideally you'll kick off exponential growth by word of mouth. But this same principle applies to anything that grows exponentially. Learning, for example. When you first start learning something, you feel lost. But it's worth making the initial effort to get a toehold, because the more you learn, the easier it will get.\n\nThere's another more subtle lesson in the list of fields with superlinear returns: not to equate work with a job. For most of the 20th century the two were identical for nearly everyone, and as a result we've inherited a custom that equates productivity with having a job. Even now to most people the phrase \"your work\" means their job. But to a writer or artist or scientist it means whatever they're currently studying or creating. For someone like that, their work is something they carry with them from job to job, if they have jobs at all. It may be done for an employer, but it's part of their portfolio.\n\n\n\n\n\nIt's an intimidating prospect to enter a field where a few big winners outperform everyone else. Some people do this deliberately, but you don't need to. If you have sufficient natural ability and you follow your curiosity sufficiently far, you'll end up in one. Your curiosity won't let you be interested in boring questions, and interesting questions tend to create fields with superlinear returns if they're not already part of one.\n\nThe territory of superlinear returns is by no means static. Indeed, the most extreme returns come from expanding it. So while both ambition and curiosity can get you into this territory, curiosity may be the more powerful of the two. Ambition tends to make you climb existing peaks, but if you stick close enough to an interesting enough question, it may grow into a mountain beneath you.", "start_char_idx": 15859, "end_char_idx": 20274, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a472ee7-7fb3-46cc-a12f-b7ce9be16b0d": {"__data__": {"id_": "7a472ee7-7fb3-46cc-a12f-b7ce9be16b0d", "embedding": null, "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54341fe1-e901-44cc-92cd-2ab2b695a3db", "node_type": "4", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "14ac75d56b042ce741d8f144ae6018a029ff8ef4c12864eb9b4c5b97c4b09320", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4d2629b8-419b-4615-b1bc-7a082feff008", "node_type": "1", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "5947f2ad2166bb789ddd78269c576f5daa112b2c37c790ae3fb1a304c0c9261c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d31775c8-a378-4fb0-97c8-caafc702d231", "node_type": "1", "metadata": {}, "hash": "ba4be88d0769a7a7a4438db233b0e58524f00adf25a0f173f1e72694e6952553", "class_name": "RelatedNodeInfo"}}, "text": "It's an intimidating prospect to enter a field where a few big winners outperform everyone else. Some people do this deliberately, but you don't need to. If you have sufficient natural ability and you follow your curiosity sufficiently far, you'll end up in one. Your curiosity won't let you be interested in boring questions, and interesting questions tend to create fields with superlinear returns if they're not already part of one.\n\nThe territory of superlinear returns is by no means static. Indeed, the most extreme returns come from expanding it. So while both ambition and curiosity can get you into this territory, curiosity may be the more powerful of the two. Ambition tends to make you climb existing peaks, but if you stick close enough to an interesting enough question, it may grow into a mountain beneath you.\n\n\n\n\n\n\n\n\n\nNotes\n\nThere's a limit to how sharply you can distinguish between effort, performance, and return, because they're not sharply distinguished in fact. What counts as return to one person might be performance to another. But though the borders of these concepts are blurry, they're not meaningless. I've tried to write about them as precisely as I could without crossing into error.\n\n[1] Evolution itself is probably the most pervasive example of superlinear returns for performance. But this is hard for us to empathize with because we're not the recipients; we're the returns.\n\n[2] Knowledge did of course have a practical effect before the Industrial Revolution. The development of agriculture changed human life completely. But this kind of change was the result of broad, gradual improvements in technique, not the discoveries of a few exceptionally learned people.\n\n[3] It's not mathematically correct to describe a step function as superlinear, but a step function starting from zero works like a superlinear function when it describes the reward curve for effort by a rational actor. If it starts at zero then the part before the step is below any linearly increasing return, and the part after the step must be above the necessary return at that point or no one would bother.\n\n[4] Seeking competition could be a good heuristic in the sense that some people find it motivating. It's also somewhat of a guide to promising problems, because it's a sign that other people find them promising. But it's a very imperfect sign: often there's a clamoring crowd chasing some problem, and they all end up being trumped by someone quietly working on another one.\n\n[5] Not always, though. You have to be careful with this rule. When something is popular despite being mediocre, there's often a hidden reason why. Perhaps monopoly or regulation make it hard to compete. Perhaps customers have bad taste or have broken procedures for deciding what to buy. There are huge swathes of mediocre things that exist for such reasons.\n\n[6] In my twenties I wanted to be an artist and even went to art school to study painting. Mostly because I liked art, but a nontrivial part of my motivation came from the fact that artists seemed least at the mercy of organizations.\n\n[7] In principle everyone is getting superlinear returns. Learning compounds, and everyone learns in the course of their life. But in practice few push this kind of everyday learning to the point where the return curve gets really steep.\n\n[8] It's unclear exactly what advocates of \"equity\" mean by it. They seem to disagree among themselves. But whatever they mean is probably at odds with a world in which institutions have less power to control outcomes, and a handful of outliers do much better than everyone else.\n\nIt may seem like bad luck for this concept that it arose at just the moment when the world was shifting in the opposite direction, but I don't think this was a coincidence. I think one reason it arose now is because its adherents feel threatened by rapidly increasing variation in performance.\n\n[9] Corollary: Parents who pressure their kids to work on something prestigious, like medicine, even though they have no interest in it, will be hosing them even more than they have in the past.\n\n[10] The original version of this paragraph was the first draft of \"How to Do Great Work.\" As soon as I wrote it I realized it was a more important topic than superlinear returns, so I paused the present essay to expand this paragraph into its own. Practically nothing remains of the original version, because after I finished \"How to Do Great Work\" I rewrote it based on that.\n\n[11] Before the Industrial Revolution, people who got rich usually did it like emperors: capturing some resource made them more powerful and enabled them to capture more. Now it can be done like a scientist, by discovering or building something uniquely valuable. Most people who get rich use a mix of the old and the new ways, but in the most advanced economies the ratio has shifted dramatically toward discovery just in the last half century.\n\n[12] It's not surprising that conventional-minded people would dislike inequality if independent-mindedness is one of the biggest drivers of it. But it's not simply that they don't want anyone to have what they can't. The conventional-minded literally can't imagine what it's like to have novel ideas. So the whole phenomenon of great variation in performance seems unnatural to them, and when they encounter it they assume it must be due to cheating or to some malign external influence.", "start_char_idx": 19449, "end_char_idx": 24865, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d31775c8-a378-4fb0-97c8-caafc702d231": {"__data__": {"id_": "d31775c8-a378-4fb0-97c8-caafc702d231", "embedding": null, "metadata": {"file_path": "data/Words into Ideas.txt", "file_name": "Words into Ideas.txt", "file_type": "text/plain", "file_size": 5790, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c417791a-3540-4073-81b8-7a8cf4f11db3", "node_type": "4", "metadata": {"file_path": "data/Words into Ideas.txt", "file_name": "Words into Ideas.txt", "file_type": "text/plain", "file_size": 5790, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "5d18974691e6bb396ba181a0aedc30b275cd28e149a19b7e696711f35b5ec9ee", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7a472ee7-7fb3-46cc-a12f-b7ce9be16b0d", "node_type": "1", "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "9b048d378e331d9e7864a1043b82d41691052d08082ac97bf279276b393f24d6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "31728af0-7143-463d-8270-c667625f9a6c", "node_type": "1", "metadata": {}, "hash": "1bf791636b852619814eb932aad1a31ce7329787e08e5c005b1c1c292f7e6326", "class_name": "RelatedNodeInfo"}}, "text": "Putting Ideas into Words\n\nFebruary 2022\n\nWriting about something, even something you know well, usually shows you that you didn't know it as well as you thought. Putting ideas into words is a severe test. The first words you choose are usually wrong; you have to rewrite sentences over and over to get them exactly right. And your ideas won't just be imprecise, but incomplete too. Half the ideas that end up in an essay will be ones you thought of while you were writing it. Indeed, that's why I write them.\n\nOnce you publish something, the convention is that whatever you wrote was what you thought before you wrote it. These were your ideas, and now you've expressed them. But you know this isn't true. You know that putting your ideas into words changed them. And not just the ideas you published. Presumably there were others that turned out to be too broken to fix, and those you discarded instead.\n\nIt's not just having to commit your ideas to specific words that makes writing so exacting. The real test is reading what you've written. You have to pretend to be a neutral reader who knows nothing of what's in your head, only what you wrote. When he reads what you wrote, does it seem correct? Does it seem complete? If you make an effort, you can read your writing as if you were a complete stranger, and when you do the news is usually bad. It takes me many cycles before I can get an essay past the stranger. But the stranger is rational, so you always can, if you ask him what he needs. If he's not satisfied because you failed to mention x or didn't qualify some sentence sufficiently, then you mention x or add more qualifications. Happy now? It may cost you some nice sentences, but you have to resign yourself to that. You just have to make them as good as you can and still satisfy the stranger.\n\nThis much, I assume, won't be that controversial. I think it will accord with the experience of anyone who has tried to write about anything nontrivial. There may exist people whose thoughts are so perfectly formed that they just flow straight into words. But I've never known anyone who could do this, and if I met someone who said they could, it would seem evidence of their limitations rather than their ability. Indeed, this is a trope in movies: the guy who claims to have a plan for doing some difficult thing, and who when questioned further, taps his head and says \"It's all up here.\" Everyone watching the movie knows what that means. At best the plan is vague and incomplete. Very likely there's some undiscovered flaw that invalidates it completely. At best it's a plan for a plan.\n\nIn precisely defined domains it's possible to form complete ideas in your head. People can play chess in their heads, for example. And mathematicians can do some amount of math in their heads, though they don't seem to feel sure of a proof over a certain length till they write it down. But this only seems possible with ideas you can express in a formal language. [1] Arguably what such people are doing is putting ideas into words in their heads. I can to some extent write essays in my head. I'll sometimes think of a paragraph while walking or lying in bed that survives nearly unchanged in the final version. But really I'm writing when I do this. I'm doing the mental part of writing; my fingers just aren't moving as I do it. [2]\n\nYou can know a great deal about something without writing about it. Can you ever know so much that you wouldn't learn more from trying to explain what you know? I don't think so. I've written about at least two subjects I know well \u2014 Lisp hacking and startups \u2014 and in both cases I learned a lot from writing about them. In both cases there were things I didn't consciously realize till I had to explain them. And I don't think my experience was anomalous. A great deal of knowledge is unconscious, and experts have if anything a higher proportion of unconscious knowledge than beginners.\n\nI'm not saying that writing is the best way to explore all ideas. If you have ideas about architecture, presumably the best way to explore them is to build actual buildings. What I'm saying is that however much you learn from exploring ideas in other ways, you'll still learn new things from writing about them.\n\nPutting ideas into words doesn't have to mean writing, of course. You can also do it the old way, by talking. But in my experience, writing is the stricter test. You have to commit to a single, optimal sequence of words.", "start_char_idx": 0, "end_char_idx": 4469, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "31728af0-7143-463d-8270-c667625f9a6c": {"__data__": {"id_": "31728af0-7143-463d-8270-c667625f9a6c", "embedding": null, "metadata": {"file_path": "data/Words into Ideas.txt", "file_name": "Words into Ideas.txt", "file_type": "text/plain", "file_size": 5790, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c417791a-3540-4073-81b8-7a8cf4f11db3", "node_type": "4", "metadata": {"file_path": "data/Words into Ideas.txt", "file_name": "Words into Ideas.txt", "file_type": "text/plain", "file_size": 5790, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "5d18974691e6bb396ba181a0aedc30b275cd28e149a19b7e696711f35b5ec9ee", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d31775c8-a378-4fb0-97c8-caafc702d231", "node_type": "1", "metadata": {"file_path": "data/Words into Ideas.txt", "file_name": "Words into Ideas.txt", "file_type": "text/plain", "file_size": 5790, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "8cf4b9a5df03743256727b6a83590af983c45443bcdfbd25b4dceae39d06bebc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "655e89fd-8cbc-4af6-a9c6-f5178a184cb1", "node_type": "1", "metadata": {}, "hash": "257c92039bcb45a69a0a8bdde735ec7ebd0a7e9a3ab052074a84979e181f8a1e", "class_name": "RelatedNodeInfo"}}, "text": "In both cases there were things I didn't consciously realize till I had to explain them. And I don't think my experience was anomalous. A great deal of knowledge is unconscious, and experts have if anything a higher proportion of unconscious knowledge than beginners.\n\nI'm not saying that writing is the best way to explore all ideas. If you have ideas about architecture, presumably the best way to explore them is to build actual buildings. What I'm saying is that however much you learn from exploring ideas in other ways, you'll still learn new things from writing about them.\n\nPutting ideas into words doesn't have to mean writing, of course. You can also do it the old way, by talking. But in my experience, writing is the stricter test. You have to commit to a single, optimal sequence of words. Less can go unsaid when you don't have tone of voice to carry meaning. And you can focus in a way that would seem excessive in conversation. I'll often spend 2 weeks on an essay and reread drafts 50 times. If you did that in conversation it would seem evidence of some kind of mental disorder. If you're lazy, of course, writing and talking are equally useless. But if you want to push yourself to get things right, writing is the steeper hill. [3]\n\nThe reason I've spent so long establishing this rather obvious point is that it leads to another that many people will find shocking. If writing down your ideas always makes them more precise and more complete, then no one who hasn't written about a topic has fully formed ideas about it. And someone who never writes has no fully formed ideas about anything nontrivial.\n\nIt feels to them as if they do, especially if they're not in the habit of critically examining their own thinking. Ideas can feel complete. It's only when you try to put them into words that you discover they're not. So if you never subject your ideas to that test, you'll not only never have fully formed ideas, but also never realize it.\n\nPutting ideas into words is certainly no guarantee that they'll be right. Far from it. But though it's not a sufficient condition, it is a necessary one.", "start_char_idx": 3667, "end_char_idx": 5786, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "655e89fd-8cbc-4af6-a9c6-f5178a184cb1": {"__data__": {"id_": "655e89fd-8cbc-4af6-a9c6-f5178a184cb1", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "31728af0-7143-463d-8270-c667625f9a6c", "node_type": "1", "metadata": {"file_path": "data/Words into Ideas.txt", "file_name": "Words into Ideas.txt", "file_type": "text/plain", "file_size": 5790, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "dda939c97c7f51b6da312ddaa3baf26ee54ea2ecfaeef9b6b300cc860ca3d24d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f729d99c-fe22-40b2-a60b-0a8d155f83fd", "node_type": "1", "metadata": {}, "hash": "692d74391b6ad961556d19669374a543e4752bab10e415d8eeeda9ccf682a597", "class_name": "RelatedNodeInfo"}}, "text": "What I Worked On\n\nFebruary 2021\n\nBefore college the two main things I worked on, outside of school, were writing and programming. I didn't write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.\n\nThe first programs I tried writing were on the IBM 1401 that our school district used for what was then called \"data processing.\" This was in 9th grade, so I was 13 or 14. The school district's 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain's lair down there, with all these alien-looking machines \u2014 CPU, disk drives, printer, card reader \u2014 sitting up on a raised floor under bright fluorescent lights.\n\nThe language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.\n\nI was puzzled by the 1401. I couldn't figure out what to do with it. And in retrospect there's not much I could have done with it. The only form of input to programs was data stored on punched cards, and I didn't have any data stored on punched cards. The only other option was to do things that didn't rely on any input, like calculate approximations of pi, but I didn't know enough math to do anything interesting of that type. So I'm not surprised I can't remember any programs I wrote, because they can't have done much. My clearest memory is of the moment I learned it was possible for programs not to terminate, when one of mine didn't. On a machine without time-sharing, this was a social as well as a technical error, as the data center manager's expression made clear.\n\nWith microcomputers, everything changed. Now you could have a computer sitting right in front of you, on a desk, that could respond to your keystrokes as it was running instead of just churning through a stack of punch cards and then stopping. [1]\n\nThe first of my friends to get a microcomputer built it himself. It was sold as a kit by Heathkit. I remember vividly how impressed and envious I felt watching him sitting in front of it, typing programs right into the computer.\n\nComputers were expensive in those days and it took me years of nagging before I convinced my father to buy one, a TRS-80, in about 1980. The gold standard then was the Apple II, but a TRS-80 was good enough. This was when I really started programming. I wrote simple games, a program to predict how high my model rockets would fly, and a word processor that my father used to write at least one book. There was only room in memory for about 2 pages of text, so he'd write 2 pages at a time and then print them out, but it was a lot better than a typewriter.\n\nThough I liked programming, I didn't plan to study it in college. In college I was going to study philosophy, which sounded much more powerful. It seemed, to my naive high school self, to be the study of the ultimate truths, compared to which the things studied in other fields would be mere domain knowledge. What I discovered when I got to college was that the other fields took up so much of the space of ideas that there wasn't much left for these supposed ultimate truths. All that seemed left for philosophy were edge cases that people in other fields felt could safely be ignored.\n\nI couldn't have put this into words when I was 18. All I knew at the time was that I kept taking philosophy courses and they kept being boring. So I decided to switch to AI.\n\nAI was in the air in the mid 1980s, but there were two things especially that made me want to work on it: a novel by Heinlein called The Moon is a Harsh Mistress, which featured an intelligent computer called Mike, and a PBS documentary that showed Terry Winograd using SHRDLU. I haven't tried rereading The Moon is a Harsh Mistress, so I don't know how well it has aged, but when I read it I was drawn entirely into its world. It seemed only a matter of time before we'd have Mike, and when I saw Winograd using SHRDLU, it seemed like that time would be a few years at most.", "start_char_idx": 2, "end_char_idx": 4320, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f729d99c-fe22-40b2-a60b-0a8d155f83fd": {"__data__": {"id_": "f729d99c-fe22-40b2-a60b-0a8d155f83fd", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "655e89fd-8cbc-4af6-a9c6-f5178a184cb1", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "e9999706d7286cc08f28dd81e46c385549a1bf012f35d5c36a5c5c769e74cc0a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f17f435-e361-402a-a45b-239ae2de1499", "node_type": "1", "metadata": {}, "hash": "7b1166ade1a6a878598a7786489c3ee1544e028f3a96b65887064e8440a63c8f", "class_name": "RelatedNodeInfo"}}, "text": "I couldn't have put this into words when I was 18. All I knew at the time was that I kept taking philosophy courses and they kept being boring. So I decided to switch to AI.\n\nAI was in the air in the mid 1980s, but there were two things especially that made me want to work on it: a novel by Heinlein called The Moon is a Harsh Mistress, which featured an intelligent computer called Mike, and a PBS documentary that showed Terry Winograd using SHRDLU. I haven't tried rereading The Moon is a Harsh Mistress, so I don't know how well it has aged, but when I read it I was drawn entirely into its world. It seemed only a matter of time before we'd have Mike, and when I saw Winograd using SHRDLU, it seemed like that time would be a few years at most. All you had to do was teach SHRDLU more words.\n\nThere weren't any classes in AI at Cornell then, not even graduate classes, so I started trying to teach myself. Which meant learning Lisp, since in those days Lisp was regarded as the language of AI. The commonly used programming languages then were pretty primitive, and programmers' ideas correspondingly so. The default language at Cornell was a Pascal-like language called PL/I, and the situation was similar elsewhere. Learning Lisp expanded my concept of a program so fast that it was years before I started to have a sense of where the new limits were. This was more like it; this was what I had expected college to do. It wasn't happening in a class, like it was supposed to, but that was ok. For the next couple years I was on a roll. I knew what I was going to do.\n\nFor my undergraduate thesis, I reverse-engineered SHRDLU. My God did I love working on that program. It was a pleasing bit of code, but what made it even more exciting was my belief \u2014 hard to imagine now, but not unique in 1985 \u2014 that it was already climbing the lower slopes of intelligence.\n\nI had gotten into a program at Cornell that didn't make you choose a major. You could take whatever classes you liked, and choose whatever you liked to put on your degree. I of course chose \"Artificial Intelligence.\" When I got the actual physical diploma, I was dismayed to find that the quotes had been included, which made them read as scare-quotes. At the time this bothered me, but now it seems amusingly accurate, for reasons I was about to discover.\n\nI applied to 3 grad schools: MIT and Yale, which were renowned for AI at the time, and Harvard, which I'd visited because Rich Draves went there, and was also home to Bill Woods, who'd invented the type of parser I used in my SHRDLU clone. Only Harvard accepted me, so that was where I went.\n\nI don't remember the moment it happened, or if there even was a specific moment, but during the first year of grad school I realized that AI, as practiced at the time, was a hoax. By which I mean the sort of AI in which a program that's told \"the dog is sitting on the chair\" translates this into some formal representation and adds it to the list of things it knows.\n\nWhat these programs really showed was that there's a subset of natural language that's a formal language. But a very proper subset. It was clear that there was an unbridgeable gap between what they could do and actually understanding natural language. It was not, in fact, simply a matter of teaching SHRDLU more words. That whole way of doing AI, with explicit data structures representing concepts, was not going to work. Its brokenness did, as so often happens, generate a lot of opportunities to write papers about various band-aids that could be applied to it, but it was never going to get us Mike.\n\nSo I looked around to see what I could salvage from the wreckage of my plans, and there was Lisp. I knew from experience that Lisp was interesting for its own sake and not just for its association with AI, even though that was the main reason people cared about it at the time. So I decided to focus on Lisp. In fact, I decided to write a book about Lisp hacking. It's scary to think how little I knew about Lisp hacking when I started writing that book. But there's nothing like writing a book about something to help you learn it. The book, On Lisp, wasn't published till 1993, but I wrote much of it in grad school.\n\nComputer Science is an uneasy alliance between two halves, theory and systems. The theory people prove things, and the systems people build things. I wanted to build things.", "start_char_idx": 3570, "end_char_idx": 7959, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f17f435-e361-402a-a45b-239ae2de1499": {"__data__": {"id_": "9f17f435-e361-402a-a45b-239ae2de1499", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f729d99c-fe22-40b2-a60b-0a8d155f83fd", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "88788c9e61cf112e773d0fccd5f51095936a61c02e6063c2c6e06175200b63ce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2cf0da72-949a-445f-b01e-21328e7f0b01", "node_type": "1", "metadata": {}, "hash": "db7cc1a67fa3afd1e5f24c8c61583781ce6a00c444da8f25a5374468c17b7de0", "class_name": "RelatedNodeInfo"}}, "text": "So I looked around to see what I could salvage from the wreckage of my plans, and there was Lisp. I knew from experience that Lisp was interesting for its own sake and not just for its association with AI, even though that was the main reason people cared about it at the time. So I decided to focus on Lisp. In fact, I decided to write a book about Lisp hacking. It's scary to think how little I knew about Lisp hacking when I started writing that book. But there's nothing like writing a book about something to help you learn it. The book, On Lisp, wasn't published till 1993, but I wrote much of it in grad school.\n\nComputer Science is an uneasy alliance between two halves, theory and systems. The theory people prove things, and the systems people build things. I wanted to build things. I had plenty of respect for theory \u2014 indeed, a sneaking suspicion that it was the more admirable of the two halves \u2014 but building things seemed so much more exciting.\n\nThe problem with systems work, though, was that it didn't last. Any program you wrote today, no matter how good, would be obsolete in a couple decades at best. People might mention your software in footnotes, but no one would actually use it. And indeed, it would seem very feeble work. Only people with a sense of the history of the field would even realize that, in its time, it had been good.\n\nThere were some surplus Xerox Dandelions floating around the computer lab at one point. Anyone who wanted one to play around with could have one. I was briefly tempted, but they were so slow by present standards; what was the point? No one else wanted one either, so off they went. That was what happened to systems work.\n\nI wanted not just to build things, but to build things that would last.\n\nIn this dissatisfied state I went in 1988 to visit Rich Draves at CMU, where he was in grad school. One day I went to visit the Carnegie Institute, where I'd spent a lot of time as a kid. While looking at a painting there I realized something that might seem obvious, but was a big surprise to me. There, right on the wall, was something you could make that would last. Paintings didn't become obsolete. Some of the best ones were hundreds of years old.\n\nAnd moreover this was something you could make a living doing. Not as easily as you could by writing software, of course, but I thought if you were really industrious and lived really cheaply, it had to be possible to make enough to survive. And as an artist you could be truly independent. You wouldn't have a boss, or even need to get research funding.\n\nI had always liked looking at paintings. Could I make them? I had no idea. I'd never imagined it was even possible. I knew intellectually that people made art \u2014 that it didn't just appear spontaneously \u2014 but it was as if the people who made it were a different species. They either lived long ago or were mysterious geniuses doing strange things in profiles in Life magazine. The idea of actually being able to make art, to put that verb before that noun, seemed almost miraculous.\n\nThat fall I started taking art classes at Harvard. Grad students could take classes in any department, and my advisor, Tom Cheatham, was very easy going. If he even knew about the strange classes I was taking, he never said anything.\n\nSo now I was in a PhD program in computer science, yet planning to be an artist, yet also genuinely in love with Lisp hacking and working away at On Lisp. In other words, like many a grad student, I was working energetically on multiple projects that were not my thesis.\n\nI didn't see a way out of this situation. I didn't want to drop out of grad school, but how else was I going to get out? I remember when my friend Robert Morris got kicked out of Cornell for writing the internet worm of 1988, I was envious that he'd found such a spectacular way to get out of grad school.\n\nThen one day in April 1990 a crack appeared in the wall. I ran into professor Cheatham and he asked if I was far enough along to graduate that June. I didn't have a word of my dissertation written, but in what must have been the quickest bit of thinking in my life, I decided to take a shot at writing one in the 5 weeks or so that remained before the deadline, reusing parts of On Lisp where I could, and I was able to respond, with no perceptible delay \"Yes, I think so. I'll give you something to read in a few days.\"", "start_char_idx": 7166, "end_char_idx": 11549, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cf0da72-949a-445f-b01e-21328e7f0b01": {"__data__": {"id_": "2cf0da72-949a-445f-b01e-21328e7f0b01", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f17f435-e361-402a-a45b-239ae2de1499", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "cae0d3c8a909549c9a9556e4ee0265a9e8d8ca803d91de4a7fbd2a1325eaa6d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e9d81b43-8cdc-4b05-978d-be0256050b44", "node_type": "1", "metadata": {}, "hash": "e2113e037176fee3ca0a39e438391443ddef7be5532d5af8ec3fac40179c5a22", "class_name": "RelatedNodeInfo"}}, "text": "I didn't want to drop out of grad school, but how else was I going to get out? I remember when my friend Robert Morris got kicked out of Cornell for writing the internet worm of 1988, I was envious that he'd found such a spectacular way to get out of grad school.\n\nThen one day in April 1990 a crack appeared in the wall. I ran into professor Cheatham and he asked if I was far enough along to graduate that June. I didn't have a word of my dissertation written, but in what must have been the quickest bit of thinking in my life, I decided to take a shot at writing one in the 5 weeks or so that remained before the deadline, reusing parts of On Lisp where I could, and I was able to respond, with no perceptible delay \"Yes, I think so. I'll give you something to read in a few days.\"\n\nI picked applications of continuations as the topic. In retrospect I should have written about macros and embedded languages. There's a whole world there that's barely been explored. But all I wanted was to get out of grad school, and my rapidly written dissertation sufficed, just barely.\n\nMeanwhile I was applying to art schools. I applied to two: RISD in the US, and the Accademia di Belli Arti in Florence, which, because it was the oldest art school, I imagined would be good. RISD accepted me, and I never heard back from the Accademia, so off to Providence I went.\n\nI'd applied for the BFA program at RISD, which meant in effect that I had to go to college again. This was not as strange as it sounds, because I was only 25, and art schools are full of people of different ages. RISD counted me as a transfer sophomore and said I had to do the foundation that summer. The foundation means the classes that everyone has to take in fundamental subjects like drawing, color, and design.\n\nToward the end of the summer I got a big surprise: a letter from the Accademia, which had been delayed because they'd sent it to Cambridge England instead of Cambridge Massachusetts, inviting me to take the entrance exam in Florence that fall. This was now only weeks away. My nice landlady let me leave my stuff in her attic. I had some money saved from consulting work I'd done in grad school; there was probably enough to last a year if I lived cheaply. Now all I had to do was learn Italian.\n\nOnly stranieri (foreigners) had to take this entrance exam. In retrospect it may well have been a way of excluding them, because there were so many stranieri attracted by the idea of studying art in Florence that the Italian students would otherwise have been outnumbered. I was in decent shape at painting and drawing from the RISD foundation that summer, but I still don't know how I managed to pass the written exam. I remember that I answered the essay question by writing about Cezanne, and that I cranked up the intellectual level as high as I could to make the most of my limited vocabulary. [2]\n\nI'm only up to age 25 and already there are such conspicuous patterns. Here I was, yet again about to attend some august institution in the hopes of learning about some prestigious subject, and yet again about to be disappointed. The students and faculty in the painting department at the Accademia were the nicest people you could imagine, but they had long since arrived at an arrangement whereby the students wouldn't require the faculty to teach anything, and in return the faculty wouldn't require the students to learn anything. And at the same time all involved would adhere outwardly to the conventions of a 19th century atelier. We actually had one of those little stoves, fed with kindling, that you see in 19th century studio paintings, and a nude model sitting as close to it as possible without getting burned. Except hardly anyone else painted her besides me. The rest of the students spent their time chatting or occasionally trying to imitate things they'd seen in American art magazines.\n\nOur model turned out to live just down the street from me. She made a living from a combination of modelling and making fakes for a local antique dealer. She'd copy an obscure old painting out of a book, and then he'd take the copy and maltreat it to make it look old. [3]\n\nWhile I was a student at the Accademia I started painting still lives in my bedroom at night. These paintings were tiny, because the room was, and because I painted them on leftover scraps of canvas, which was all I could afford at the time.", "start_char_idx": 10764, "end_char_idx": 15165, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9d81b43-8cdc-4b05-978d-be0256050b44": {"__data__": {"id_": "e9d81b43-8cdc-4b05-978d-be0256050b44", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2cf0da72-949a-445f-b01e-21328e7f0b01", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "36bfd3d188f06877b4c92cacf3d05ca7deeb297113d53a6b1ba00f09aa427330", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c3d71501-468b-4979-be0a-cfa5e9e57fa0", "node_type": "1", "metadata": {}, "hash": "aec09c4a114c909775f4053eba58f3160ddfd61329b030bd8111aef7da76bc5a", "class_name": "RelatedNodeInfo"}}, "text": "We actually had one of those little stoves, fed with kindling, that you see in 19th century studio paintings, and a nude model sitting as close to it as possible without getting burned. Except hardly anyone else painted her besides me. The rest of the students spent their time chatting or occasionally trying to imitate things they'd seen in American art magazines.\n\nOur model turned out to live just down the street from me. She made a living from a combination of modelling and making fakes for a local antique dealer. She'd copy an obscure old painting out of a book, and then he'd take the copy and maltreat it to make it look old. [3]\n\nWhile I was a student at the Accademia I started painting still lives in my bedroom at night. These paintings were tiny, because the room was, and because I painted them on leftover scraps of canvas, which was all I could afford at the time. Painting still lives is different from painting people, because the subject, as its name suggests, can't move. People can't sit for more than about 15 minutes at a time, and when they do they don't sit very still. So the traditional m.o. for painting people is to know how to paint a generic person, which you then modify to match the specific person you're painting. Whereas a still life you can, if you want, copy pixel by pixel from what you're seeing. You don't want to stop there, of course, or you get merely photographic accuracy, and what makes a still life interesting is that it's been through a head. You want to emphasize the visual cues that tell you, for example, that the reason the color changes suddenly at a certain point is that it's the edge of an object. By subtly emphasizing such things you can make paintings that are more realistic than photographs not just in some metaphorical sense, but in the strict information-theoretic sense. [4]\n\nI liked painting still lives because I was curious about what I was seeing. In everyday life, we aren't consciously aware of much we're seeing. Most visual perception is handled by low-level processes that merely tell your brain \"that's a water droplet\" without telling you details like where the lightest and darkest points are, or \"that's a bush\" without telling you the shape and position of every leaf. This is a feature of brains, not a bug. In everyday life it would be distracting to notice every leaf on every bush. But when you have to paint something, you have to look more closely, and when you do there's a lot to see. You can still be noticing new things after days of trying to paint something people usually take for granted, just as you can after days of trying to write an essay about something people usually take for granted.\n\nThis is not the only way to paint. I'm not 100% sure it's even a good way to paint. But it seemed a good enough bet to be worth trying.\n\nOur teacher, professor Ulivi, was a nice guy. He could see I worked hard, and gave me a good grade, which he wrote down in a sort of passport each student had. But the Accademia wasn't teaching me anything except Italian, and my money was running out, so at the end of the first year I went back to the US.\n\nI wanted to go back to RISD, but I was now broke and RISD was very expensive, so I decided to get a job for a year and then return to RISD the next fall. I got one at a company called Interleaf, which made software for creating documents. You mean like Microsoft Word? Exactly. That was how I learned that low end software tends to eat high end software. But Interleaf still had a few years to live yet. [5]\n\nInterleaf had done something pretty bold. Inspired by Emacs, they'd added a scripting language, and even made the scripting language a dialect of Lisp. Now they wanted a Lisp hacker to write things in it. This was the closest thing I've had to a normal job, and I hereby apologize to my boss and coworkers, because I was a bad employee. Their Lisp was the thinnest icing on a giant C cake, and since I didn't know C and didn't want to learn it, I never understood most of the software. Plus I was terribly irresponsible. This was back when a programming job meant showing up every day during certain working hours. That seemed unnatural to me, and on this point the rest of the world is coming around to my way of thinking, but at the time it caused a lot of friction.", "start_char_idx": 14282, "end_char_idx": 18597, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3d71501-468b-4979-be0a-cfa5e9e57fa0": {"__data__": {"id_": "c3d71501-468b-4979-be0a-cfa5e9e57fa0", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e9d81b43-8cdc-4b05-978d-be0256050b44", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "8ffc6a252999aacdfa0d2c444cdfbb01b42c603e044c51f6da77a5a66e5a1f2c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "898686b6-4513-4f4a-924a-fbdc1018b89f", "node_type": "1", "metadata": {}, "hash": "813a8a7651f1f1033796cb012302988149cd169105ffa14a0ae81073c7f54c6c", "class_name": "RelatedNodeInfo"}}, "text": "But Interleaf still had a few years to live yet. [5]\n\nInterleaf had done something pretty bold. Inspired by Emacs, they'd added a scripting language, and even made the scripting language a dialect of Lisp. Now they wanted a Lisp hacker to write things in it. This was the closest thing I've had to a normal job, and I hereby apologize to my boss and coworkers, because I was a bad employee. Their Lisp was the thinnest icing on a giant C cake, and since I didn't know C and didn't want to learn it, I never understood most of the software. Plus I was terribly irresponsible. This was back when a programming job meant showing up every day during certain working hours. That seemed unnatural to me, and on this point the rest of the world is coming around to my way of thinking, but at the time it caused a lot of friction. Toward the end of the year I spent much of my time surreptitiously working on On Lisp, which I had by this time gotten a contract to publish.\n\nThe good part was that I got paid huge amounts of money, especially by art student standards. In Florence, after paying my part of the rent, my budget for everything else had been $7 a day. Now I was getting paid more than 4 times that every hour, even when I was just sitting in a meeting. By living cheaply I not only managed to save enough to go back to RISD, but also paid off my college loans.\n\nI learned some useful things at Interleaf, though they were mostly about what not to do. I learned that it's better for technology companies to be run by product people than sales people (though sales is a real skill and people who are good at it are really good at it), that it leads to bugs when code is edited by too many people, that cheap office space is no bargain if it's depressing, that planned meetings are inferior to corridor conversations, that big, bureaucratic customers are a dangerous source of money, and that there's not much overlap between conventional office hours and the optimal time for hacking, or conventional offices and the optimal place for it.\n\nBut the most important thing I learned, and which I used in both Viaweb and Y Combinator, is that the low end eats the high end: that it's good to be the \"entry level\" option, even though that will be less prestigious, because if you're not, someone else will be, and will squash you against the ceiling. Which in turn means that prestige is a danger sign.\n\nWhen I left to go back to RISD the next fall, I arranged to do freelance work for the group that did projects for customers, and this was how I survived for the next several years. When I came back to visit for a project later on, someone told me about a new thing called HTML, which was, as he described it, a derivative of SGML. Markup language enthusiasts were an occupational hazard at Interleaf and I ignored him, but this HTML thing later became a big part of my life.\n\nIn the fall of 1992 I moved back to Providence to continue at RISD. The foundation had merely been intro stuff, and the Accademia had been a (very civilized) joke. Now I was going to see what real art school was like. But alas it was more like the Accademia than not. Better organized, certainly, and a lot more expensive, but it was now becoming clear that art school did not bear the same relationship to art that medical school bore to medicine. At least not the painting department. The textile department, which my next door neighbor belonged to, seemed to be pretty rigorous. No doubt illustration and architecture were too. But painting was post-rigorous. Painting students were supposed to express themselves, which to the more worldly ones meant to try to cook up some sort of distinctive signature style.\n\nA signature style is the visual equivalent of what in show business is known as a \"schtick\": something that immediately identifies the work as yours and no one else's. For example, when you see a painting that looks like a certain kind of cartoon, you know it's by Roy Lichtenstein. So if you see a big painting of this type hanging in the apartment of a hedge fund manager, you know he paid millions of dollars for it. That's not always why artists have a signature style, but it's usually why buyers pay a lot for such work. [6]\n\nThere were plenty of earnest students too: kids who \"could draw\" in high school, and now had come to what was supposed to be the best art school in the country, to learn to draw even better.", "start_char_idx": 17775, "end_char_idx": 22189, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "898686b6-4513-4f4a-924a-fbdc1018b89f": {"__data__": {"id_": "898686b6-4513-4f4a-924a-fbdc1018b89f", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c3d71501-468b-4979-be0a-cfa5e9e57fa0", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "f513f93f7dd69e829eef4d9badc804579e2ab24763cdab4123e8bd8fa22b3c13", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a9716ea6-2e50-4201-8680-4444e1f88b84", "node_type": "1", "metadata": {}, "hash": "fa08674834d64bb1534f161e24b0cb83e59c033da47ebad609e3de8d7e5feba1", "class_name": "RelatedNodeInfo"}}, "text": "Painting students were supposed to express themselves, which to the more worldly ones meant to try to cook up some sort of distinctive signature style.\n\nA signature style is the visual equivalent of what in show business is known as a \"schtick\": something that immediately identifies the work as yours and no one else's. For example, when you see a painting that looks like a certain kind of cartoon, you know it's by Roy Lichtenstein. So if you see a big painting of this type hanging in the apartment of a hedge fund manager, you know he paid millions of dollars for it. That's not always why artists have a signature style, but it's usually why buyers pay a lot for such work. [6]\n\nThere were plenty of earnest students too: kids who \"could draw\" in high school, and now had come to what was supposed to be the best art school in the country, to learn to draw even better. They tended to be confused and demoralized by what they found at RISD, but they kept going, because painting was what they did. I was not one of the kids who could draw in high school, but at RISD I was definitely closer to their tribe than the tribe of signature style seekers.\n\nI learned a lot in the color class I took at RISD, but otherwise I was basically teaching myself to paint, and I could do that for free. So in 1993 I dropped out. I hung around Providence for a bit, and then my college friend Nancy Parmet did me a big favor. A rent-controlled apartment in a building her mother owned in New York was becoming vacant. Did I want it? It wasn't much more than my current place, and New York was supposed to be where the artists were. So yes, I wanted it! [7]\n\nAsterix comics begin by zooming in on a tiny corner of Roman Gaul that turns out not to be controlled by the Romans. You can do something similar on a map of New York City: if you zoom in on the Upper East Side, there's a tiny corner that's not rich, or at least wasn't in 1993. It's called Yorkville, and that was my new home. Now I was a New York artist \u2014 in the strictly technical sense of making paintings and living in New York.\n\nI was nervous about money, because I could sense that Interleaf was on the way down. Freelance Lisp hacking work was very rare, and I didn't want to have to program in another language, which in those days would have meant C++ if I was lucky. So with my unerring nose for financial opportunity, I decided to write another book on Lisp. This would be a popular book, the sort of book that could be used as a textbook. I imagined myself living frugally off the royalties and spending all my time painting. (The painting on the cover of this book, ANSI Common Lisp, is one that I painted around this time.)\n\nThe best thing about New York for me was the presence of Idelle and Julian Weber. Idelle Weber was a painter, one of the early photorealists, and I'd taken her painting class at Harvard. I've never known a teacher more beloved by her students. Large numbers of former students kept in touch with her, including me. After I moved to New York I became her de facto studio assistant.\n\nShe liked to paint on big, square canvases, 4 to 5 feet on a side. One day in late 1994 as I was stretching one of these monsters there was something on the radio about a famous fund manager. He wasn't that much older than me, and was super rich. The thought suddenly occurred to me: why don't I become rich? Then I'll be able to work on whatever I want.\n\nMeanwhile I'd been hearing more and more about this new thing called the World Wide Web. Robert Morris showed it to me when I visited him in Cambridge, where he was now in grad school at Harvard. It seemed to me that the web would be a big deal. I'd seen what graphical user interfaces had done for the popularity of microcomputers. It seemed like the web would do the same for the internet.\n\nIf I wanted to get rich, here was the next train leaving the station. I was right about that part. What I got wrong was the idea. I decided we should start a company to put art galleries online. I can't honestly say, after reading so many Y Combinator applications, that this was the worst startup idea ever, but it was up there. Art galleries didn't want to be online, and still don't, not the fancy ones. That's not how they sell.", "start_char_idx": 21314, "end_char_idx": 25564, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9716ea6-2e50-4201-8680-4444e1f88b84": {"__data__": {"id_": "a9716ea6-2e50-4201-8680-4444e1f88b84", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "898686b6-4513-4f4a-924a-fbdc1018b89f", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "ea1fbaa3d869f36ed9959aa7a49c299b535e91f4aa69b6551e893faed6a9aacf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "675899ad-15e0-4a64-aeec-000470a3dfa9", "node_type": "1", "metadata": {}, "hash": "7858d77d2173b2b010580d5dce2db796d3de779891907b6515e466f3ffd10583", "class_name": "RelatedNodeInfo"}}, "text": "Meanwhile I'd been hearing more and more about this new thing called the World Wide Web. Robert Morris showed it to me when I visited him in Cambridge, where he was now in grad school at Harvard. It seemed to me that the web would be a big deal. I'd seen what graphical user interfaces had done for the popularity of microcomputers. It seemed like the web would do the same for the internet.\n\nIf I wanted to get rich, here was the next train leaving the station. I was right about that part. What I got wrong was the idea. I decided we should start a company to put art galleries online. I can't honestly say, after reading so many Y Combinator applications, that this was the worst startup idea ever, but it was up there. Art galleries didn't want to be online, and still don't, not the fancy ones. That's not how they sell. I wrote some software to generate web sites for galleries, and Robert wrote some to resize images and set up an http server to serve the pages. Then we tried to sign up galleries. To call this a difficult sale would be an understatement. It was difficult to give away. A few galleries let us make sites for them for free, but none paid us.\n\nThen some online stores started to appear, and I realized that except for the order buttons they were identical to the sites we'd been generating for galleries. This impressive-sounding thing called an \"internet storefront\" was something we already knew how to build.\n\nSo in the summer of 1995, after I submitted the camera-ready copy of ANSI Common Lisp to the publishers, we started trying to write software to build online stores. At first this was going to be normal desktop software, which in those days meant Windows software. That was an alarming prospect, because neither of us knew how to write Windows software or wanted to learn. We lived in the Unix world. But we decided we'd at least try writing a prototype store builder on Unix. Robert wrote a shopping cart, and I wrote a new site generator for stores \u2014 in Lisp, of course.\n\nWe were working out of Robert's apartment in Cambridge. His roommate was away for big chunks of time, during which I got to sleep in his room. For some reason there was no bed frame or sheets, just a mattress on the floor. One morning as I was lying on this mattress I had an idea that made me sit up like a capital L. What if we ran the software on the server, and let users control it by clicking on links? Then we'd never have to write anything to run on users' computers. We could generate the sites on the same server we'd serve them from. Users wouldn't need anything more than a browser.\n\nThis kind of software, known as a web app, is common now, but at the time it wasn't clear that it was even possible. To find out, we decided to try making a version of our store builder that you could control through the browser. A couple days later, on August 12, we had one that worked. The UI was horrible, but it proved you could build a whole store through the browser, without any client software or typing anything into the command line on the server.\n\nNow we felt like we were really onto something. I had visions of a whole new generation of software working this way. You wouldn't need versions, or ports, or any of that crap. At Interleaf there had been a whole group called Release Engineering that seemed to be at least as big as the group that actually wrote the software. Now you could just update the software right on the server.\n\nWe started a new company we called Viaweb, after the fact that our software worked via the web, and we got $10,000 in seed funding from Idelle's husband Julian. In return for that and doing the initial legal work and giving us business advice, we gave him 10% of the company. Ten years later this deal became the model for Y Combinator's. We knew founders needed something like this, because we'd needed it ourselves.\n\nAt this stage I had a negative net worth, because the thousand dollars or so I had in the bank was more than counterbalanced by what I owed the government in taxes. (Had I diligently set aside the proper proportion of the money I'd made consulting for Interleaf? No, I had not.) So although Robert had his graduate student stipend, I needed that seed funding to live on.\n\nWe originally hoped to launch in September, but we got more ambitious about the software as we worked on it.", "start_char_idx": 24739, "end_char_idx": 29091, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "675899ad-15e0-4a64-aeec-000470a3dfa9": {"__data__": {"id_": "675899ad-15e0-4a64-aeec-000470a3dfa9", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a9716ea6-2e50-4201-8680-4444e1f88b84", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "2d98896b248ba74450db6363ebbfc13809bc590f7a529f1372309c297cda76bf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bec842a0-27ff-4ba6-893a-3d87dbc652bc", "node_type": "1", "metadata": {}, "hash": "ead8610d6f2b0022ddbb406bd4441e89d294c7d640ce185a97d0099cbcf0e036", "class_name": "RelatedNodeInfo"}}, "text": "In return for that and doing the initial legal work and giving us business advice, we gave him 10% of the company. Ten years later this deal became the model for Y Combinator's. We knew founders needed something like this, because we'd needed it ourselves.\n\nAt this stage I had a negative net worth, because the thousand dollars or so I had in the bank was more than counterbalanced by what I owed the government in taxes. (Had I diligently set aside the proper proportion of the money I'd made consulting for Interleaf? No, I had not.) So although Robert had his graduate student stipend, I needed that seed funding to live on.\n\nWe originally hoped to launch in September, but we got more ambitious about the software as we worked on it. Eventually we managed to build a WYSIWYG site builder, in the sense that as you were creating pages, they looked exactly like the static ones that would be generated later, except that instead of leading to static pages, the links all referred to closures stored in a hash table on the server.\n\nIt helped to have studied art, because the main goal of an online store builder is to make users look legit, and the key to looking legit is high production values. If you get page layouts and fonts and colors right, you can make a guy running a store out of his bedroom look more legit than a big company.\n\n(If you're curious why my site looks so old-fashioned, it's because it's still made with this software. It may look clunky today, but in 1996 it was the last word in slick.)\n\nIn September, Robert rebelled. \"We've been working on this for a month,\" he said, \"and it's still not done.\" This is funny in retrospect, because he would still be working on it almost 3 years later. But I decided it might be prudent to recruit more programmers, and I asked Robert who else in grad school with him was really good. He recommended Trevor Blackwell, which surprised me at first, because at that point I knew Trevor mainly for his plan to reduce everything in his life to a stack of notecards, which he carried around with him. But Rtm was right, as usual. Trevor turned out to be a frighteningly effective hacker.\n\nIt was a lot of fun working with Robert and Trevor. They're the two most independent-minded people I know, and in completely different ways. If you could see inside Rtm's brain it would look like a colonial New England church, and if you could see inside Trevor's it would look like the worst excesses of Austrian Rococo.\n\nWe opened for business, with 6 stores, in January 1996. It was just as well we waited a few months, because although we worried we were late, we were actually almost fatally early. There was a lot of talk in the press then about ecommerce, but not many people actually wanted online stores. [8]\n\nThere were three main parts to the software: the editor, which people used to build sites and which I wrote, the shopping cart, which Robert wrote, and the manager, which kept track of orders and statistics, and which Trevor wrote. In its time, the editor was one of the best general-purpose site builders. I kept the code tight and didn't have to integrate with any other software except Robert's and Trevor's, so it was quite fun to work on. If all I'd had to do was work on this software, the next 3 years would have been the easiest of my life. Unfortunately I had to do a lot more, all of it stuff I was worse at than programming, and the next 3 years were instead the most stressful.\n\nThere were a lot of startups making ecommerce software in the second half of the 90s. We were determined to be the Microsoft Word, not the Interleaf. Which meant being easy to use and inexpensive. It was lucky for us that we were poor, because that caused us to make Viaweb even more inexpensive than we realized. We charged $100 a month for a small store and $300 a month for a big one. This low price was a big attraction, and a constant thorn in the sides of competitors, but it wasn't because of some clever insight that we set the price low. We had no idea what businesses paid for things. $300 a month seemed like a lot of money to us.\n\nWe did a lot of things right by accident like that. For example, we did what's now called \"doing things that don't scale,\" although at the time we would have described it as \"being so lame that we're driven to the most desperate measures to get users.\" The most common of which was building stores for them.", "start_char_idx": 28353, "end_char_idx": 32760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bec842a0-27ff-4ba6-893a-3d87dbc652bc": {"__data__": {"id_": "bec842a0-27ff-4ba6-893a-3d87dbc652bc", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "675899ad-15e0-4a64-aeec-000470a3dfa9", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "99f899466e86f1c5044fd5a9dc21635c6faa82297da10cebbd5bcb26ea72e29a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "afdb50f0-eaa8-401c-a18f-883876dd5e41", "node_type": "1", "metadata": {}, "hash": "c42110d220de022a08c002d57f05088cfe8c1fcec1e2196c41017780e44aef72", "class_name": "RelatedNodeInfo"}}, "text": "Which meant being easy to use and inexpensive. It was lucky for us that we were poor, because that caused us to make Viaweb even more inexpensive than we realized. We charged $100 a month for a small store and $300 a month for a big one. This low price was a big attraction, and a constant thorn in the sides of competitors, but it wasn't because of some clever insight that we set the price low. We had no idea what businesses paid for things. $300 a month seemed like a lot of money to us.\n\nWe did a lot of things right by accident like that. For example, we did what's now called \"doing things that don't scale,\" although at the time we would have described it as \"being so lame that we're driven to the most desperate measures to get users.\" The most common of which was building stores for them. This seemed particularly humiliating, since the whole raison d'etre of our software was that people could use it to make their own stores. But anything to get users.\n\nWe learned a lot more about retail than we wanted to know. For example, that if you could only have a small image of a man's shirt (and all images were small then by present standards), it was better to have a closeup of the collar than a picture of the whole shirt. The reason I remember learning this was that it meant I had to rescan about 30 images of men's shirts. My first set of scans were so beautiful too.\n\nThough this felt wrong, it was exactly the right thing to be doing. Building stores for users taught us about retail, and about how it felt to use our software. I was initially both mystified and repelled by \"business\" and thought we needed a \"business person\" to be in charge of it, but once we started to get users, I was converted, in much the same way I was converted to fatherhood once I had kids. Whatever users wanted, I was all theirs. Maybe one day we'd have so many users that I couldn't scan their images for them, but in the meantime there was nothing more important to do.\n\nAnother thing I didn't get at the time is that growth rate is the ultimate test of a startup. Our growth rate was fine. We had about 70 stores at the end of 1996 and about 500 at the end of 1997. I mistakenly thought the thing that mattered was the absolute number of users. And that is the thing that matters in the sense that that's how much money you're making, and if you're not making enough, you might go out of business. But in the long term the growth rate takes care of the absolute number. If we'd been a startup I was advising at Y Combinator, I would have said: Stop being so stressed out, because you're doing fine. You're growing 7x a year. Just don't hire too many more people and you'll soon be profitable, and then you'll control your own destiny.\n\nAlas I hired lots more people, partly because our investors wanted me to, and partly because that's what startups did during the Internet Bubble. A company with just a handful of employees would have seemed amateurish. So we didn't reach breakeven until about when Yahoo bought us in the summer of 1998. Which in turn meant we were at the mercy of investors for the entire life of the company. And since both we and our investors were noobs at startups, the result was a mess even by startup standards.\n\nIt was a huge relief when Yahoo bought us. In principle our Viaweb stock was valuable. It was a share in a business that was profitable and growing rapidly. But it didn't feel very valuable to me; I had no idea how to value a business, but I was all too keenly aware of the near-death experiences we seemed to have every few months. Nor had I changed my grad student lifestyle significantly since we started. So when Yahoo bought us it felt like going from rags to riches. Since we were going to California, I bought a car, a yellow 1998 VW GTI. I remember thinking that its leather seats alone were by far the most luxurious thing I owned.\n\nThe next year, from the summer of 1998 to the summer of 1999, must have been the least productive of my life. I didn't realize it at the time, but I was worn out from the effort and stress of running Viaweb. For a while after I got to California I tried to continue my usual m.o. of programming till 3 in the morning, but fatigue combined with Yahoo's prematurely aged culture and grim cube farm in Santa Clara gradually dragged me down.", "start_char_idx": 31960, "end_char_idx": 36280, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "afdb50f0-eaa8-401c-a18f-883876dd5e41": {"__data__": {"id_": "afdb50f0-eaa8-401c-a18f-883876dd5e41", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bec842a0-27ff-4ba6-893a-3d87dbc652bc", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "966308f1f13656c33c0b894b6aedfa42fe499a946b9ebee207e351731caafa17", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "636af58f-c0f6-4ca8-8a88-9ce591624b07", "node_type": "1", "metadata": {}, "hash": "ad22805b20d228817dc82f1b822446ca72d8791a19bb485d8ebbbb7d867a2c41", "class_name": "RelatedNodeInfo"}}, "text": "Nor had I changed my grad student lifestyle significantly since we started. So when Yahoo bought us it felt like going from rags to riches. Since we were going to California, I bought a car, a yellow 1998 VW GTI. I remember thinking that its leather seats alone were by far the most luxurious thing I owned.\n\nThe next year, from the summer of 1998 to the summer of 1999, must have been the least productive of my life. I didn't realize it at the time, but I was worn out from the effort and stress of running Viaweb. For a while after I got to California I tried to continue my usual m.o. of programming till 3 in the morning, but fatigue combined with Yahoo's prematurely aged culture and grim cube farm in Santa Clara gradually dragged me down. After a few months it felt disconcertingly like working at Interleaf.\n\nYahoo had given us a lot of options when they bought us. At the time I thought Yahoo was so overvalued that they'd never be worth anything, but to my astonishment the stock went up 5x in the next year. I hung on till the first chunk of options vested, then in the summer of 1999 I left. It had been so long since I'd painted anything that I'd half forgotten why I was doing this. My brain had been entirely full of software and men's shirts for 4 years. But I had done this to get rich so I could paint, I reminded myself, and now I was rich, so I should go paint.\n\nWhen I said I was leaving, my boss at Yahoo had a long conversation with me about my plans. I told him all about the kinds of pictures I wanted to paint. At the time I was touched that he took such an interest in me. Now I realize it was because he thought I was lying. My options at that point were worth about $2 million a month. If I was leaving that kind of money on the table, it could only be to go and start some new startup, and if I did, I might take people with me. This was the height of the Internet Bubble, and Yahoo was ground zero of it. My boss was at that moment a billionaire. Leaving then to start a new startup must have seemed to him an insanely, and yet also plausibly, ambitious plan.\n\nBut I really was quitting to paint, and I started immediately. There was no time to lose. I'd already burned 4 years getting rich. Now when I talk to founders who are leaving after selling their companies, my advice is always the same: take a vacation. That's what I should have done, just gone off somewhere and done nothing for a month or two, but the idea never occurred to me.\n\nSo I tried to paint, but I just didn't seem to have any energy or ambition. Part of the problem was that I didn't know many people in California. I'd compounded this problem by buying a house up in the Santa Cruz Mountains, with a beautiful view but miles from anywhere. I stuck it out for a few more months, then in desperation I went back to New York, where unless you understand about rent control you'll be surprised to hear I still had my apartment, sealed up like a tomb of my old life. Idelle was in New York at least, and there were other people trying to paint there, even though I didn't know any of them.\n\nWhen I got back to New York I resumed my old life, except now I was rich. It was as weird as it sounds. I resumed all my old patterns, except now there were doors where there hadn't been. Now when I was tired of walking, all I had to do was raise my hand, and (unless it was raining) a taxi would stop to pick me up. Now when I walked past charming little restaurants I could go in and order lunch. It was exciting for a while. Painting started to go better. I experimented with a new kind of still life where I'd paint one painting in the old way, then photograph it and print it, blown up, on canvas, and then use that as the underpainting for a second still life, painted from the same objects (which hopefully hadn't rotted yet).\n\nMeanwhile I looked for an apartment to buy. Now I could actually choose what neighborhood to live in. Where, I asked myself and various real estate agents, is the Cambridge of New York? Aided by occasional visits to actual Cambridge, I gradually realized there wasn't one. Huh.\n\nAround this time, in the spring of 2000, I had an idea. It was clear from our experience with Viaweb that web apps were the future.", "start_char_idx": 35534, "end_char_idx": 39771, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "636af58f-c0f6-4ca8-8a88-9ce591624b07": {"__data__": {"id_": "636af58f-c0f6-4ca8-8a88-9ce591624b07", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "afdb50f0-eaa8-401c-a18f-883876dd5e41", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "b087b5211812b15eeb196350ec90c3417576de3c4ba000966f73adb49e512f78", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2fb8265c-e816-4dc8-b3a1-93196b868a26", "node_type": "1", "metadata": {}, "hash": "f3a3f08a496f960f1bfd346e0ffe0826a77d42805975e29f6f3dae7e06478e65", "class_name": "RelatedNodeInfo"}}, "text": "Now when I walked past charming little restaurants I could go in and order lunch. It was exciting for a while. Painting started to go better. I experimented with a new kind of still life where I'd paint one painting in the old way, then photograph it and print it, blown up, on canvas, and then use that as the underpainting for a second still life, painted from the same objects (which hopefully hadn't rotted yet).\n\nMeanwhile I looked for an apartment to buy. Now I could actually choose what neighborhood to live in. Where, I asked myself and various real estate agents, is the Cambridge of New York? Aided by occasional visits to actual Cambridge, I gradually realized there wasn't one. Huh.\n\nAround this time, in the spring of 2000, I had an idea. It was clear from our experience with Viaweb that web apps were the future. Why not build a web app for making web apps? Why not let people edit code on our server through the browser, and then host the resulting applications for them? [9] You could run all sorts of services on the servers that these applications could use just by making an API call: making and receiving phone calls, manipulating images, taking credit card payments, etc.\n\nI got so excited about this idea that I couldn't think about anything else. It seemed obvious that this was the future. I didn't particularly want to start another company, but it was clear that this idea would have to be embodied as one, so I decided to move to Cambridge and start it. I hoped to lure Robert into working on it with me, but there I ran into a hitch. Robert was now a postdoc at MIT, and though he'd made a lot of money the last time I'd lured him into working on one of my schemes, it had also been a huge time sink. So while he agreed that it sounded like a plausible idea, he firmly refused to work on it.\n\nHmph. Well, I'd do it myself then. I recruited Dan Giffin, who had worked for Viaweb, and two undergrads who wanted summer jobs, and we got to work trying to build what it's now clear is about twenty companies and several open source projects worth of software. The language for defining applications would of course be a dialect of Lisp. But I wasn't so naive as to assume I could spring an overt Lisp on a general audience; we'd hide the parentheses, like Dylan did.\n\nBy then there was a name for the kind of company Viaweb was, an \"application service provider,\" or ASP. This name didn't last long before it was replaced by \"software as a service,\" but it was current for long enough that I named this new company after it: it was going to be called Aspra.\n\nI started working on the application builder, Dan worked on network infrastructure, and the two undergrads worked on the first two services (images and phone calls). But about halfway through the summer I realized I really didn't want to run a company \u2014 especially not a big one, which it was looking like this would have to be. I'd only started Viaweb because I needed the money. Now that I didn't need money anymore, why was I doing this? If this vision had to be realized as a company, then screw the vision. I'd build a subset that could be done as an open source project.\n\nMuch to my surprise, the time I spent working on this stuff was not wasted after all. After we started Y Combinator, I would often encounter startups working on parts of this new architecture, and it was very useful to have spent so much time thinking about it and even trying to write some of it.\n\nThe subset I would build as an open source project was the new Lisp, whose parentheses I now wouldn't even have to hide. A lot of Lisp hackers dream of building a new Lisp, partly because one of the distinctive features of the language is that it has dialects, and partly, I think, because we have in our minds a Platonic form of Lisp that all existing dialects fall short of. I certainly did. So at the end of the summer Dan and I switched to working on this new dialect of Lisp, which I called Arc, in a house I bought in Cambridge.\n\nThe following spring, lightning struck. I was invited to give a talk at a Lisp conference, so I gave one about how we'd used Lisp at Viaweb. Afterward I put a postscript file of this talk online, on paulgraham.com, which I'd created years before using Viaweb but had never used for anything. In one day it got 30,000 page views. What on earth had happened?", "start_char_idx": 38943, "end_char_idx": 43296, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2fb8265c-e816-4dc8-b3a1-93196b868a26": {"__data__": {"id_": "2fb8265c-e816-4dc8-b3a1-93196b868a26", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "636af58f-c0f6-4ca8-8a88-9ce591624b07", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "c892bf361935c8a99740e8cc11f0d1bd511b67afbeb607c75a0f1829a5d58b0e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "237b7135-6c30-4bdf-bfdd-732db296687e", "node_type": "1", "metadata": {}, "hash": "679d5ec840c1f8e23703b6afee7ff18f34efeca4fe729edc691ed009ca39b465", "class_name": "RelatedNodeInfo"}}, "text": "A lot of Lisp hackers dream of building a new Lisp, partly because one of the distinctive features of the language is that it has dialects, and partly, I think, because we have in our minds a Platonic form of Lisp that all existing dialects fall short of. I certainly did. So at the end of the summer Dan and I switched to working on this new dialect of Lisp, which I called Arc, in a house I bought in Cambridge.\n\nThe following spring, lightning struck. I was invited to give a talk at a Lisp conference, so I gave one about how we'd used Lisp at Viaweb. Afterward I put a postscript file of this talk online, on paulgraham.com, which I'd created years before using Viaweb but had never used for anything. In one day it got 30,000 page views. What on earth had happened? The referring urls showed that someone had posted it on Slashdot. [10]\n\nWow, I thought, there's an audience. If I write something and put it on the web, anyone can read it. That may seem obvious now, but it was surprising then. In the print era there was a narrow channel to readers, guarded by fierce monsters known as editors. The only way to get an audience for anything you wrote was to get it published as a book, or in a newspaper or magazine. Now anyone could publish anything.\n\nThis had been possible in principle since 1993, but not many people had realized it yet. I had been intimately involved with building the infrastructure of the web for most of that time, and a writer as well, and it had taken me 8 years to realize it. Even then it took me several years to understand the implications. It meant there would be a whole new generation of essays. [11]\n\nIn the print era, the channel for publishing essays had been vanishingly small. Except for a few officially anointed thinkers who went to the right parties in New York, the only people allowed to publish essays were specialists writing about their specialties. There were so many essays that had never been written, because there had been no way to publish them. Now they could be, and I was going to write them. [12]\n\nI've worked on several different things, but to the extent there was a turning point where I figured out what to work on, it was when I started publishing essays online. From then on I knew that whatever else I did, I'd always write essays too.\n\nI knew that online essays would be a marginal medium at first. Socially they'd seem more like rants posted by nutjobs on their GeoCities sites than the genteel and beautifully typeset compositions published in The New Yorker. But by this point I knew enough to find that encouraging instead of discouraging.\n\nOne of the most conspicuous patterns I've noticed in my life is how well it has worked, for me at least, to work on things that weren't prestigious. Still life has always been the least prestigious form of painting. Viaweb and Y Combinator both seemed lame when we started them. I still get the glassy eye from strangers when they ask what I'm writing, and I explain that it's an essay I'm going to publish on my web site. Even Lisp, though prestigious intellectually in something like the way Latin is, also seems about as hip.\n\nIt's not that unprestigious types of work are good per se. But when you find yourself drawn to some kind of work despite its current lack of prestige, it's a sign both that there's something real to be discovered there, and that you have the right kind of motives. Impure motives are a big danger for the ambitious. If anything is going to lead you astray, it will be the desire to impress people. So while working on things that aren't prestigious doesn't guarantee you're on the right track, it at least guarantees you're not on the most common type of wrong one.\n\nOver the next several years I wrote lots of essays about all kinds of different topics. O'Reilly reprinted a collection of them as a book, called Hackers & Painters after one of the essays in it. I also worked on spam filters, and did some more painting. I used to have dinners for a group of friends every thursday night, which taught me how to cook for groups. And I bought another building in Cambridge, a former candy factory (and later, twas said, porn studio), to use as an office.\n\nOne night in October 2003 there was a big party at my house. It was a clever idea of my friend Maria Daniels, who was one of the thursday diners. Three separate hosts would all invite their friends to one party.", "start_char_idx": 42525, "end_char_idx": 46937, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "237b7135-6c30-4bdf-bfdd-732db296687e": {"__data__": {"id_": "237b7135-6c30-4bdf-bfdd-732db296687e", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2fb8265c-e816-4dc8-b3a1-93196b868a26", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "efbe9af7b1a2d29a9c3f504049bb69c2eb4cf52cf57c69d274a904daa36d76b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "33bca992-e164-40b0-ae12-04d8db6e3bb7", "node_type": "1", "metadata": {}, "hash": "945319d053087c7b0a087a1c0589fbb317b1c2954c9587fa0f3318dd26baa3ff", "class_name": "RelatedNodeInfo"}}, "text": "Over the next several years I wrote lots of essays about all kinds of different topics. O'Reilly reprinted a collection of them as a book, called Hackers & Painters after one of the essays in it. I also worked on spam filters, and did some more painting. I used to have dinners for a group of friends every thursday night, which taught me how to cook for groups. And I bought another building in Cambridge, a former candy factory (and later, twas said, porn studio), to use as an office.\n\nOne night in October 2003 there was a big party at my house. It was a clever idea of my friend Maria Daniels, who was one of the thursday diners. Three separate hosts would all invite their friends to one party. So for every guest, two thirds of the other guests would be people they didn't know but would probably like. One of the guests was someone I didn't know but would turn out to like a lot: a woman called Jessica Livingston. A couple days later I asked her out.\n\nJessica was in charge of marketing at a Boston investment bank. This bank thought it understood startups, but over the next year, as she met friends of mine from the startup world, she was surprised how different reality was. And how colorful their stories were. So she decided to compile a book of interviews with startup founders.\n\nWhen the bank had financial problems and she had to fire half her staff, she started looking for a new job. In early 2005 she interviewed for a marketing job at a Boston VC firm. It took them weeks to make up their minds, and during this time I started telling her about all the things that needed to be fixed about venture capital. They should make a larger number of smaller investments instead of a handful of giant ones, they should be funding younger, more technical founders instead of MBAs, they should let the founders remain as CEO, and so on.\n\nOne of my tricks for writing essays had always been to give talks. The prospect of having to stand up in front of a group of people and tell them something that won't waste their time is a great spur to the imagination. When the Harvard Computer Society, the undergrad computer club, asked me to give a talk, I decided I would tell them how to start a startup. Maybe they'd be able to avoid the worst of the mistakes we'd made.\n\nSo I gave this talk, in the course of which I told them that the best sources of seed funding were successful startup founders, because then they'd be sources of advice too. Whereupon it seemed they were all looking expectantly at me. Horrified at the prospect of having my inbox flooded by business plans (if I'd only known), I blurted out \"But not me!\" and went on with the talk. But afterward it occurred to me that I should really stop procrastinating about angel investing. I'd been meaning to since Yahoo bought us, and now it was 7 years later and I still hadn't done one angel investment.\n\nMeanwhile I had been scheming with Robert and Trevor about projects we could work on together. I missed working with them, and it seemed like there had to be something we could collaborate on.\n\nAs Jessica and I were walking home from dinner on March 11, at the corner of Garden and Walker streets, these three threads converged. Screw the VCs who were taking so long to make up their minds. We'd start our own investment firm and actually implement the ideas we'd been talking about. I'd fund it, and Jessica could quit her job and work for it, and we'd get Robert and Trevor as partners too. [13]\n\nOnce again, ignorance worked in our favor. We had no idea how to be angel investors, and in Boston in 2005 there were no Ron Conways to learn from. So we just made what seemed like the obvious choices, and some of the things we did turned out to be novel.\n\nThere are multiple components to Y Combinator, and we didn't figure them all out at once. The part we got first was to be an angel firm. In those days, those two words didn't go together. There were VC firms, which were organized companies with people whose job it was to make investments, but they only did big, million dollar investments. And there were angels, who did smaller investments, but these were individuals who were usually focused on other things and made investments on the side. And neither of them helped founders enough in the beginning. We knew how helpless founders were in some respects, because we remembered how helpless we'd been. For example, one thing Julian had done for us that seemed to us like magic was to get us set up as a company.", "start_char_idx": 46237, "end_char_idx": 50733, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "33bca992-e164-40b0-ae12-04d8db6e3bb7": {"__data__": {"id_": "33bca992-e164-40b0-ae12-04d8db6e3bb7", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "237b7135-6c30-4bdf-bfdd-732db296687e", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "54e7b404db67ab52ea47fff89292801a8db245396bc4fece74b8195ea93828ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d08ce7e3-de42-4f8b-afe0-74f5242a9aa6", "node_type": "1", "metadata": {}, "hash": "f67855eaefc7857e3666e2b5a2ef8780634ec9991f32031d3c8d1988c49ec721", "class_name": "RelatedNodeInfo"}}, "text": "So we just made what seemed like the obvious choices, and some of the things we did turned out to be novel.\n\nThere are multiple components to Y Combinator, and we didn't figure them all out at once. The part we got first was to be an angel firm. In those days, those two words didn't go together. There were VC firms, which were organized companies with people whose job it was to make investments, but they only did big, million dollar investments. And there were angels, who did smaller investments, but these were individuals who were usually focused on other things and made investments on the side. And neither of them helped founders enough in the beginning. We knew how helpless founders were in some respects, because we remembered how helpless we'd been. For example, one thing Julian had done for us that seemed to us like magic was to get us set up as a company. We were fine writing fairly difficult software, but actually getting incorporated, with bylaws and stock and all that stuff, how on earth did you do that? Our plan was not only to make seed investments, but to do for startups everything Julian had done for us.\n\nYC was not organized as a fund. It was cheap enough to run that we funded it with our own money. That went right by 99% of readers, but professional investors are thinking \"Wow, that means they got all the returns.\" But once again, this was not due to any particular insight on our part. We didn't know how VC firms were organized. It never occurred to us to try to raise a fund, and if it had, we wouldn't have known where to start. [14]\n\nThe most distinctive thing about YC is the batch model: to fund a bunch of startups all at once, twice a year, and then to spend three months focusing intensively on trying to help them. That part we discovered by accident, not merely implicitly but explicitly due to our ignorance about investing. We needed to get experience as investors. What better way, we thought, than to fund a whole bunch of startups at once? We knew undergrads got temporary jobs at tech companies during the summer. Why not organize a summer program where they'd start startups instead? We wouldn't feel guilty for being in a sense fake investors, because they would in a similar sense be fake founders. So while we probably wouldn't make much money out of it, we'd at least get to practice being investors on them, and they for their part would probably have a more interesting summer than they would working at Microsoft.\n\nWe'd use the building I owned in Cambridge as our headquarters. We'd all have dinner there once a week \u2014 on tuesdays, since I was already cooking for the thursday diners on thursdays \u2014 and after dinner we'd bring in experts on startups to give talks.\n\nWe knew undergrads were deciding then about summer jobs, so in a matter of days we cooked up something we called the Summer Founders Program, and I posted an announcement on my site, inviting undergrads to apply. I had never imagined that writing essays would be a way to get \"deal flow,\" as investors call it, but it turned out to be the perfect source. [15] We got 225 applications for the Summer Founders Program, and we were surprised to find that a lot of them were from people who'd already graduated, or were about to that spring. Already this SFP thing was starting to feel more serious than we'd intended.\n\nWe invited about 20 of the 225 groups to interview in person, and from those we picked 8 to fund. They were an impressive group. That first batch included reddit, Justin Kan and Emmett Shear, who went on to found Twitch, Aaron Swartz, who had already helped write the RSS spec and would a few years later become a martyr for open access, and Sam Altman, who would later become the second president of YC. I don't think it was entirely luck that the first batch was so good. You had to be pretty bold to sign up for a weird thing like the Summer Founders Program instead of a summer job at a legit place like Microsoft or Goldman Sachs.\n\nThe deal for startups was based on a combination of the deal we did with Julian ($10k for 10%) and what Robert said MIT grad students got for the summer ($6k). We invested $6k per founder, which in the typical two-founder case was $12k, in return for 6%. That had to be fair, because it was twice as good as the deal we ourselves had taken. Plus that first summer, which was really hot, Jessica brought the founders free air conditioners. [16]\n\nFairly quickly I realized that we had stumbled upon the way to scale startup funding.", "start_char_idx": 49860, "end_char_idx": 54373, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d08ce7e3-de42-4f8b-afe0-74f5242a9aa6": {"__data__": {"id_": "d08ce7e3-de42-4f8b-afe0-74f5242a9aa6", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "33bca992-e164-40b0-ae12-04d8db6e3bb7", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "df778f1d176e7e7a5e93d0e126359c5e29d0e62cb8c88bf740e58b3bccf3f1d6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a341bab4-c4a1-40e3-aee6-5189fbcbf433", "node_type": "1", "metadata": {}, "hash": "437cbc6b8bd14cccb47303d51d66c8de030ee2294f1c4bd5aaf34bbc2115ba75", "class_name": "RelatedNodeInfo"}}, "text": "I don't think it was entirely luck that the first batch was so good. You had to be pretty bold to sign up for a weird thing like the Summer Founders Program instead of a summer job at a legit place like Microsoft or Goldman Sachs.\n\nThe deal for startups was based on a combination of the deal we did with Julian ($10k for 10%) and what Robert said MIT grad students got for the summer ($6k). We invested $6k per founder, which in the typical two-founder case was $12k, in return for 6%. That had to be fair, because it was twice as good as the deal we ourselves had taken. Plus that first summer, which was really hot, Jessica brought the founders free air conditioners. [16]\n\nFairly quickly I realized that we had stumbled upon the way to scale startup funding. Funding startups in batches was more convenient for us, because it meant we could do things for a lot of startups at once, but being part of a batch was better for the startups too. It solved one of the biggest problems faced by founders: the isolation. Now you not only had colleagues, but colleagues who understood the problems you were facing and could tell you how they were solving them.\n\nAs YC grew, we started to notice other advantages of scale. The alumni became a tight community, dedicated to helping one another, and especially the current batch, whose shoes they remembered being in. We also noticed that the startups were becoming one another's customers. We used to refer jokingly to the \"YC GDP,\" but as YC grows this becomes less and less of a joke. Now lots of startups get their initial set of customers almost entirely from among their batchmates.\n\nI had not originally intended YC to be a full-time job. I was going to do three things: hack, write essays, and work on YC. As YC grew, and I grew more excited about it, it started to take up a lot more than a third of my attention. But for the first few years I was still able to work on other things.\n\nIn the summer of 2006, Robert and I started working on a new version of Arc. This one was reasonably fast, because it was compiled into Scheme. To test this new Arc, I wrote Hacker News in it. It was originally meant to be a news aggregator for startup founders and was called Startup News, but after a few months I got tired of reading about nothing but startups. Plus it wasn't startup founders we wanted to reach. It was future startup founders. So I changed the name to Hacker News and the topic to whatever engaged one's intellectual curiosity.\n\nHN was no doubt good for YC, but it was also by far the biggest source of stress for me. If all I'd had to do was select and help founders, life would have been so easy. And that implies that HN was a mistake. Surely the biggest source of stress in one's work should at least be something close to the core of the work. Whereas I was like someone who was in pain while running a marathon not from the exertion of running, but because I had a blister from an ill-fitting shoe. When I was dealing with some urgent problem during YC, there was about a 60% chance it had to do with HN, and a 40% chance it had do with everything else combined. [17]\n\nAs well as HN, I wrote all of YC's internal software in Arc. But while I continued to work a good deal in Arc, I gradually stopped working on Arc, partly because I didn't have time to, and partly because it was a lot less attractive to mess around with the language now that we had all this infrastructure depending on it. So now my three projects were reduced to two: writing essays and working on YC.\n\nYC was different from other kinds of work I've done. Instead of deciding for myself what to work on, the problems came to me. Every 6 months there was a new batch of startups, and their problems, whatever they were, became our problems. It was very engaging work, because their problems were quite varied, and the good founders were very effective. If you were trying to learn the most you could about startups in the shortest possible time, you couldn't have picked a better way to do it.\n\nThere were parts of the job I didn't like. Disputes between cofounders, figuring out when people were lying to us, fighting with people who maltreated the startups, and so on. But I worked hard even at the parts I didn't like. I was haunted by something Kevin Hale once said about companies: \"No one works harder than the boss.\"", "start_char_idx": 53611, "end_char_idx": 57967, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a341bab4-c4a1-40e3-aee6-5189fbcbf433": {"__data__": {"id_": "a341bab4-c4a1-40e3-aee6-5189fbcbf433", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d08ce7e3-de42-4f8b-afe0-74f5242a9aa6", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "a2ae0d2d12952f898156962335c766ab3e6d62c2e4680342760f0ccf828de38f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ab4ecd3f-3cbf-4953-bb7a-3082e9a2b468", "node_type": "1", "metadata": {}, "hash": "030b600e464a00572dc32265ee21cb1db42896eab5488bc8912c9fe9eac95340", "class_name": "RelatedNodeInfo"}}, "text": "YC was different from other kinds of work I've done. Instead of deciding for myself what to work on, the problems came to me. Every 6 months there was a new batch of startups, and their problems, whatever they were, became our problems. It was very engaging work, because their problems were quite varied, and the good founders were very effective. If you were trying to learn the most you could about startups in the shortest possible time, you couldn't have picked a better way to do it.\n\nThere were parts of the job I didn't like. Disputes between cofounders, figuring out when people were lying to us, fighting with people who maltreated the startups, and so on. But I worked hard even at the parts I didn't like. I was haunted by something Kevin Hale once said about companies: \"No one works harder than the boss.\" He meant it both descriptively and prescriptively, and it was the second part that scared me. I wanted YC to be good, so if how hard I worked set the upper bound on how hard everyone else worked, I'd better work very hard.\n\nOne day in 2010, when he was visiting California for interviews, Robert Morris did something astonishing: he offered me unsolicited advice. I can only remember him doing that once before. One day at Viaweb, when I was bent over double from a kidney stone, he suggested that it would be a good idea for him to take me to the hospital. That was what it took for Rtm to offer unsolicited advice. So I remember his exact words very clearly. \"You know,\" he said, \"you should make sure Y Combinator isn't the last cool thing you do.\"\n\nAt the time I didn't understand what he meant, but gradually it dawned on me that he was saying I should quit. This seemed strange advice, because YC was doing great. But if there was one thing rarer than Rtm offering advice, it was Rtm being wrong. So this set me thinking. It was true that on my current trajectory, YC would be the last thing I did, because it was only taking up more of my attention. It had already eaten Arc, and was in the process of eating essays too. Either YC was my life's work or I'd have to leave eventually. And it wasn't, so I would.\n\nIn the summer of 2012 my mother had a stroke, and the cause turned out to be a blood clot caused by colon cancer. The stroke destroyed her balance, and she was put in a nursing home, but she really wanted to get out of it and back to her house, and my sister and I were determined to help her do it. I used to fly up to Oregon to visit her regularly, and I had a lot of time to think on those flights. On one of them I realized I was ready to hand YC over to someone else.\n\nI asked Jessica if she wanted to be president, but she didn't, so we decided we'd try to recruit Sam Altman. We talked to Robert and Trevor and we agreed to make it a complete changing of the guard. Up till that point YC had been controlled by the original LLC we four had started. But we wanted YC to last for a long time, and to do that it couldn't be controlled by the founders. So if Sam said yes, we'd let him reorganize YC. Robert and I would retire, and Jessica and Trevor would become ordinary partners.\n\nWhen we asked Sam if he wanted to be president of YC, initially he said no. He wanted to start a startup to make nuclear reactors. But I kept at it, and in October 2013 he finally agreed. We decided he'd take over starting with the winter 2014 batch. For the rest of 2013 I left running YC more and more to Sam, partly so he could learn the job, and partly because I was focused on my mother, whose cancer had returned.\n\nShe died on January 15, 2014. We knew this was coming, but it was still hard when it did.\n\nI kept working on YC till March, to help get that batch of startups through Demo Day, then I checked out pretty completely. (I still talk to alumni and to new startups working on things I'm interested in, but that only takes a few hours a week.)\n\nWhat should I do next? Rtm's advice hadn't included anything about that. I wanted to do something completely different, so I decided I'd paint. I wanted to see how good I could get if I really focused on it. So the day after I stopped working on YC, I started painting.", "start_char_idx": 57148, "end_char_idx": 61301, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab4ecd3f-3cbf-4953-bb7a-3082e9a2b468": {"__data__": {"id_": "ab4ecd3f-3cbf-4953-bb7a-3082e9a2b468", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a341bab4-c4a1-40e3-aee6-5189fbcbf433", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "959fc00aeb38fee4d098ad655e4a0f817ca52805e0698648cd47f67eaed5df1e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3cb775e2-dbfd-491d-88b0-c71e5a06b076", "node_type": "1", "metadata": {}, "hash": "b878aec1052bd70a236b0ddca4fa44a5a4ee6640c9dce26583fcada4f1bcb38d", "class_name": "RelatedNodeInfo"}}, "text": "For the rest of 2013 I left running YC more and more to Sam, partly so he could learn the job, and partly because I was focused on my mother, whose cancer had returned.\n\nShe died on January 15, 2014. We knew this was coming, but it was still hard when it did.\n\nI kept working on YC till March, to help get that batch of startups through Demo Day, then I checked out pretty completely. (I still talk to alumni and to new startups working on things I'm interested in, but that only takes a few hours a week.)\n\nWhat should I do next? Rtm's advice hadn't included anything about that. I wanted to do something completely different, so I decided I'd paint. I wanted to see how good I could get if I really focused on it. So the day after I stopped working on YC, I started painting. I was rusty and it took a while to get back into shape, but it was at least completely engaging. [18]\n\nI spent most of the rest of 2014 painting. I'd never been able to work so uninterruptedly before, and I got to be better than I had been. Not good enough, but better. Then in November, right in the middle of a painting, I ran out of steam. Up till that point I'd always been curious to see how the painting I was working on would turn out, but suddenly finishing this one seemed like a chore. So I stopped working on it and cleaned my brushes and haven't painted since. So far anyway.\n\nI realize that sounds rather wimpy. But attention is a zero sum game. If you can choose what to work on, and you choose a project that's not the best one (or at least a good one) for you, then it's getting in the way of another project that is. And at 50 there was some opportunity cost to screwing around.\n\nI started writing essays again, and wrote a bunch of new ones over the next few months. I even wrote a couple that weren't about startups. Then in March 2015 I started working on Lisp again.\n\nThe distinctive thing about Lisp is that its core is a language defined by writing an interpreter in itself. It wasn't originally intended as a programming language in the ordinary sense. It was meant to be a formal model of computation, an alternative to the Turing machine. If you want to write an interpreter for a language in itself, what's the minimum set of predefined operators you need? The Lisp that John McCarthy invented, or more accurately discovered, is an answer to that question. [19]\n\nMcCarthy didn't realize this Lisp could even be used to program computers till his grad student Steve Russell suggested it. Russell translated McCarthy's interpreter into IBM 704 machine language, and from that point Lisp started also to be a programming language in the ordinary sense. But its origins as a model of computation gave it a power and elegance that other languages couldn't match. It was this that attracted me in college, though I didn't understand why at the time.\n\nMcCarthy's 1960 Lisp did nothing more than interpret Lisp expressions. It was missing a lot of things you'd want in a programming language. So these had to be added, and when they were, they weren't defined using McCarthy's original axiomatic approach. That wouldn't have been feasible at the time. McCarthy tested his interpreter by hand-simulating the execution of programs. But it was already getting close to the limit of interpreters you could test that way \u2014 indeed, there was a bug in it that McCarthy had overlooked. To test a more complicated interpreter, you'd have had to run it, and computers then weren't powerful enough.\n\nNow they are, though. Now you could continue using McCarthy's axiomatic approach till you'd defined a complete programming language. And as long as every change you made to McCarthy's Lisp was a discoveredness-preserving transformation, you could, in principle, end up with a complete language that had this quality. Harder to do than to talk about, of course, but if it was possible in principle, why not try? So I decided to take a shot at it. It took 4 years, from March 26, 2015 to October 12, 2019. It was fortunate that I had a precisely defined goal, or it would have been hard to keep at it for so long.\n\nI wrote this new Lisp, called Bel, in itself in Arc. That may sound like a contradiction, but it's an indication of the sort of trickery I had to engage in to make this work.", "start_char_idx": 60524, "end_char_idx": 64797, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3cb775e2-dbfd-491d-88b0-c71e5a06b076": {"__data__": {"id_": "3cb775e2-dbfd-491d-88b0-c71e5a06b076", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ab4ecd3f-3cbf-4953-bb7a-3082e9a2b468", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "7e927d14b15a1074383a6624a484022ec74570c186c49f81e6997d6790c82c85", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "801f0a3c-c73f-4d0c-b1e8-cec3ed2fd920", "node_type": "1", "metadata": {}, "hash": "9fa353464038a3c2d20a69ae00e08cdd76d1306144f4f2f50fb0198244aafca5", "class_name": "RelatedNodeInfo"}}, "text": "Now they are, though. Now you could continue using McCarthy's axiomatic approach till you'd defined a complete programming language. And as long as every change you made to McCarthy's Lisp was a discoveredness-preserving transformation, you could, in principle, end up with a complete language that had this quality. Harder to do than to talk about, of course, but if it was possible in principle, why not try? So I decided to take a shot at it. It took 4 years, from March 26, 2015 to October 12, 2019. It was fortunate that I had a precisely defined goal, or it would have been hard to keep at it for so long.\n\nI wrote this new Lisp, called Bel, in itself in Arc. That may sound like a contradiction, but it's an indication of the sort of trickery I had to engage in to make this work. By means of an egregious collection of hacks I managed to make something close enough to an interpreter written in itself that could actually run. Not fast, but fast enough to test.\n\nI had to ban myself from writing essays during most of this time, or I'd never have finished. In late 2015 I spent 3 months writing essays, and when I went back to working on Bel I could barely understand the code. Not so much because it was badly written as because the problem is so convoluted. When you're working on an interpreter written in itself, it's hard to keep track of what's happening at what level, and errors can be practically encrypted by the time you get them.\n\nSo I said no more essays till Bel was done. But I told few people about Bel while I was working on it. So for years it must have seemed that I was doing nothing, when in fact I was working harder than I'd ever worked on anything. Occasionally after wrestling for hours with some gruesome bug I'd check Twitter or HN and see someone asking \"Does Paul Graham still code?\"\n\nWorking on Bel was hard but satisfying. I worked on it so intensively that at any given time I had a decent chunk of the code in my head and could write more there. I remember taking the boys to the coast on a sunny day in 2015 and figuring out how to deal with some problem involving continuations while I watched them play in the tide pools. It felt like I was doing life right. I remember that because I was slightly dismayed at how novel it felt. The good news is that I had more moments like this over the next few years.\n\nIn the summer of 2016 we moved to England. We wanted our kids to see what it was like living in another country, and since I was a British citizen by birth, that seemed the obvious choice. We only meant to stay for a year, but we liked it so much that we still live there. So most of Bel was written in England.\n\nIn the fall of 2019, Bel was finally finished. Like McCarthy's original Lisp, it's a spec rather than an implementation, although like McCarthy's Lisp it's a spec expressed as code.\n\nNow that I could write essays again, I wrote a bunch about topics I'd had stacked up. I kept writing essays through 2020, but I also started to think about other things I could work on. How should I choose what to do? Well, how had I chosen what to work on in the past? I wrote an essay for myself to answer that question, and I was surprised how long and messy the answer turned out to be. If this surprised me, who'd lived it, then I thought perhaps it would be interesting to other people, and encouraging to those with similarly messy lives. So I wrote a more detailed version for others to read, and this is the last sentence of it.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] My experience skipped a step in the evolution of computers: time-sharing machines with interactive OSes. I went straight from batch processing to microcomputers, which made microcomputers seem all the more exciting.\n\n[2] Italian words for abstract concepts can nearly always be predicted from their English cognates (except for occasional traps like polluzione). It's the everyday words that differ. So if you string together a lot of abstract concepts with a few simple verbs, you can make a little Italian go a long way.\n\n[3] I lived at Piazza San Felice 4, so my walk to the Accademia went straight down the spine of old Florence: past the Pitti, across the bridge, past Orsanmichele, between the Duomo and the Baptistery, and then up Via Ricasoli to Piazza San Marco.", "start_char_idx": 64010, "end_char_idx": 68285, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "801f0a3c-c73f-4d0c-b1e8-cec3ed2fd920": {"__data__": {"id_": "801f0a3c-c73f-4d0c-b1e8-cec3ed2fd920", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3cb775e2-dbfd-491d-88b0-c71e5a06b076", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "bfb5f456fe4321b6cc58b67e939a7920fa366b43104474226fae1a1c225748fd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "676db4ca-257a-4966-8e8a-40a607a0a5db", "node_type": "1", "metadata": {}, "hash": "840b674d9ac87d14e4e2fe6aa367fa6ca17fe2b5f11fa50f87e310c8f54ecf34", "class_name": "RelatedNodeInfo"}}, "text": "Notes\n\n[1] My experience skipped a step in the evolution of computers: time-sharing machines with interactive OSes. I went straight from batch processing to microcomputers, which made microcomputers seem all the more exciting.\n\n[2] Italian words for abstract concepts can nearly always be predicted from their English cognates (except for occasional traps like polluzione). It's the everyday words that differ. So if you string together a lot of abstract concepts with a few simple verbs, you can make a little Italian go a long way.\n\n[3] I lived at Piazza San Felice 4, so my walk to the Accademia went straight down the spine of old Florence: past the Pitti, across the bridge, past Orsanmichele, between the Duomo and the Baptistery, and then up Via Ricasoli to Piazza San Marco. I saw Florence at street level in every possible condition, from empty dark winter evenings to sweltering summer days when the streets were packed with tourists.\n\n[4] You can of course paint people like still lives if you want to, and they're willing. That sort of portrait is arguably the apex of still life painting, though the long sitting does tend to produce pained expressions in the sitters.\n\n[5] Interleaf was one of many companies that had smart people and built impressive technology, and yet got crushed by Moore's Law. In the 1990s the exponential growth in the power of commodity (i.e. Intel) processors rolled up high-end, special-purpose hardware and software companies like a bulldozer.\n\n[6] The signature style seekers at RISD weren't specifically mercenary. In the art world, money and coolness are tightly coupled. Anything expensive comes to be seen as cool, and anything seen as cool will soon become equally expensive.\n\n[7] Technically the apartment wasn't rent-controlled but rent-stabilized, but this is a refinement only New Yorkers would know or care about. The point is that it was really cheap, less than half market price.\n\n[8] Most software you can launch as soon as it's done. But when the software is an online store builder and you're hosting the stores, if you don't have any users yet, that fact will be painfully obvious. So before we could launch publicly we had to launch privately, in the sense of recruiting an initial set of users and making sure they had decent-looking stores.\n\n[9] We'd had a code editor in Viaweb for users to define their own page styles. They didn't know it, but they were editing Lisp expressions underneath. But this wasn't an app editor, because the code ran when the merchants' sites were generated, not when shoppers visited them.\n\n[10] This was the first instance of what is now a familiar experience, and so was what happened next, when I read the comments and found they were full of angry people. How could I claim that Lisp was better than other languages? Weren't they all Turing complete? People who see the responses to essays I write sometimes tell me how sorry they feel for me, but I'm not exaggerating when I reply that it has always been like this, since the very beginning. It comes with the territory. An essay must tell readers things they don't already know, and some people dislike being told such things.\n\n[11] People put plenty of stuff on the internet in the 90s of course, but putting something online is not the same as publishing it online. Publishing online means you treat the online version as the (or at least a) primary version.\n\n[12] There is a general lesson here that our experience with Y Combinator also teaches: Customs continue to constrain you long after the restrictions that caused them have disappeared. Customary VC practice had once, like the customs about publishing essays, been based on real constraints. Startups had once been much more expensive to start, and proportionally rare. Now they could be cheap and common, but the VCs' customs still reflected the old world, just as customs about writing essays still reflected the constraints of the print era.\n\nWhich in turn implies that people who are independent-minded (i.e. less influenced by custom) will have an advantage in fields affected by rapid change (where customs are more likely to be obsolete).\n\nHere's an interesting point, though: you can't always predict which fields will be affected by rapid change. Obviously software and venture capital will be, but who would have predicted that essay writing would be?\n\n[13] Y Combinator was not the original name. At first we were called Cambridge Seed. But we didn't want a regional name, in case someone copied us in Silicon Valley, so we renamed ourselves after one of the coolest tricks in the lambda calculus, the Y combinator.", "start_char_idx": 67503, "end_char_idx": 72138, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "676db4ca-257a-4966-8e8a-40a607a0a5db": {"__data__": {"id_": "676db4ca-257a-4966-8e8a-40a607a0a5db", "embedding": null, "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "766bc2f3-4518-4935-9efb-b8f99ff8f653", "node_type": "4", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "3e475953124e67a0838aef7b671d6353b88c6df8b1b817dfbaee014180c906fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "801f0a3c-c73f-4d0c-b1e8-cec3ed2fd920", "node_type": "1", "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}, "hash": "d747d4fcc6e1201fad08ceb0d807bc37a6a332406fcabcc04973b3603ef9bc84", "class_name": "RelatedNodeInfo"}}, "text": "Startups had once been much more expensive to start, and proportionally rare. Now they could be cheap and common, but the VCs' customs still reflected the old world, just as customs about writing essays still reflected the constraints of the print era.\n\nWhich in turn implies that people who are independent-minded (i.e. less influenced by custom) will have an advantage in fields affected by rapid change (where customs are more likely to be obsolete).\n\nHere's an interesting point, though: you can't always predict which fields will be affected by rapid change. Obviously software and venture capital will be, but who would have predicted that essay writing would be?\n\n[13] Y Combinator was not the original name. At first we were called Cambridge Seed. But we didn't want a regional name, in case someone copied us in Silicon Valley, so we renamed ourselves after one of the coolest tricks in the lambda calculus, the Y combinator.\n\nI picked orange as our color partly because it's the warmest, and partly because no VC used it. In 2005 all the VCs used staid colors like maroon, navy blue, and forest green, because they were trying to appeal to LPs, not founders. The YC logo itself is an inside joke: the Viaweb logo had been a white V on a red circle, so I made the YC logo a white Y on an orange square.\n\n[14] YC did become a fund for a couple years starting in 2009, because it was getting so big I could no longer afford to fund it personally. But after Heroku got bought we had enough money to go back to being self-funded.\n\n[15] I've never liked the term \"deal flow,\" because it implies that the number of new startups at any given time is fixed. This is not only false, but it's the purpose of YC to falsify it, by causing startups to be founded that would not otherwise have existed.\n\n[16] She reports that they were all different shapes and sizes, because there was a run on air conditioners and she had to get whatever she could, but that they were all heavier than she could carry now.\n\n[17] Another problem with HN was a bizarre edge case that occurs when you both write essays and run a forum. When you run a forum, you're assumed to see if not every conversation, at least every conversation involving you. And when you write essays, people post highly imaginative misinterpretations of them on forums. Individually these two phenomena are tedious but bearable, but the combination is disastrous. You actually have to respond to the misinterpretations, because the assumption that you're present in the conversation means that not responding to any sufficiently upvoted misinterpretation reads as a tacit admission that it's correct. But that in turn encourages more; anyone who wants to pick a fight with you senses that now is their chance.\n\n[18] The worst thing about leaving YC was not working with Jessica anymore. We'd been working on YC almost the whole time we'd known each other, and we'd neither tried nor wanted to separate it from our personal lives, so leaving was like pulling up a deeply rooted tree.\n\n[19] One way to get more precise about the concept of invented vs discovered is to talk about space aliens. Any sufficiently advanced alien civilization would certainly know about the Pythagorean theorem, for example. I believe, though with less certainty, that they would also know about the Lisp in McCarthy's 1960 paper.\n\nBut if so there's no reason to suppose that this is the limit of the language that might be known to them. Presumably aliens need numbers and errors and I/O too. So it seems likely there exists at least one path out of McCarthy's Lisp along which discoveredness is preserved.\n\n\n\nThanks to Trevor Blackwell, John Collison, Patrick Collison, Daniel Gackle, Ralph Hazell, Jessica Livingston, Robert Morris, and Harj Taggar for reading drafts of this.", "start_char_idx": 71204, "end_char_idx": 75013, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"16b44bdc-2e04-4252-a87d-05ebd45afe03": {"node_ids": ["f750bfba-6b58-4981-9a34-c76a04e92dad", "9cab0272-c293-451f-8dec-26f3228c16a4", "1387d54c-fca3-4622-a4fd-fe50b9f25baf", "d97f7127-43f0-4be4-87b2-e466444e7821", "7547bc0a-8f5d-4860-a706-9fba54796dfc", "d5f39b6c-4f76-46ca-897b-bdf6d7ad22bf", "8b3e9128-c510-4fb8-bdd5-037bf5e8d7c8", "efb4c8b6-e048-4593-b57b-63916960d335", "a32f35a5-7c7e-4f3f-ba1b-f7c5fe780653", "4bf7b31b-9993-42e3-ac3b-957295b77658", "bb395311-aa2b-4d19-86a7-01ab66a57d0d", "6763962c-e905-400b-94dc-d115ccc5b8e2", "e1ac7c70-407f-49bf-879c-89179e9202b6", "2d22ee02-5c0e-4572-ba57-d9edc9e31fb2", "e9df62af-ded3-44f0-aa9a-d1b6d1d0c10d", "b3c24fef-b7e6-4983-84fd-c6dbb85631a8", "59fbd9b7-e822-4cba-88f0-461fbdedb304", "28c1f503-0170-4cac-a56a-9d4050aa16b9", "19d7b26f-5148-4cba-b5a7-de455aef8551", "38e91fa7-8a12-434c-9187-2d3b30b5152f"], "metadata": {"file_path": "data/Do Great Work.txt", "file_name": "Do Great Work.txt", "file_type": "text/plain", "file_size": 66818, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}}, "3ed7dff1-04db-4ce5-858d-c43aee47320f": {"node_ids": ["40f33ad3-33a5-427f-b5ac-6a682ea5e5c1", "c9e5357e-e386-4494-a394-edba02b3c4a2", "8b6f6b6d-0d96-44a3-a45a-4d2e237412c1"], "metadata": {"file_path": "data/Four quadrants of Conformism.txt", "file_name": "Four quadrants of Conformism.txt", "file_type": "text/plain", "file_size": 12089, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}}, "e7898c51-29da-4c33-8dc6-2b93d0d1a432": {"node_ids": ["22d1b845-dcd1-4e9d-a158-5d3e652595da", "93ac1188-dd13-4e4e-ae41-4849cd2333a5", "4fe16796-d411-4d5a-979e-9667004cfeb8", "5682fbee-481f-4173-b159-b8cbe7a60299", "312079db-f837-486f-a031-d90ed52ef056", "e010bab3-21ac-4a78-bd9f-057387c59a1c"], "metadata": {"file_path": "data/Lessons to Unlearn.txt", "file_name": "Lessons to Unlearn.txt", "file_type": "text/plain", "file_size": 22377, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}}, "54341fe1-e901-44cc-92cd-2ab2b695a3db": {"node_ids": ["6a0e90e9-b24a-4011-89dc-deffed751f9c", "0ca2d67a-610c-4b0d-a683-a9381c923ef0", "23858170-68a0-48ae-ad6e-20a5ffac6194", "6db238cf-e02d-4256-96c6-3e7e89769f73", "d936a809-99eb-48d8-b330-cff4c0e95dd5", "4d2629b8-419b-4615-b1bc-7a082feff008", "7a472ee7-7fb3-46cc-a12f-b7ce9be16b0d"], "metadata": {"file_path": "data/Superlinear Returns .txt", "file_name": "Superlinear Returns .txt", "file_type": "text/plain", "file_size": 24877, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}}, "c417791a-3540-4073-81b8-7a8cf4f11db3": {"node_ids": ["d31775c8-a378-4fb0-97c8-caafc702d231", "31728af0-7143-463d-8270-c667625f9a6c"], "metadata": {"file_path": "data/Words into Ideas.txt", "file_name": "Words into Ideas.txt", "file_type": "text/plain", "file_size": 5790, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}}, "766bc2f3-4518-4935-9efb-b8f99ff8f653": {"node_ids": ["655e89fd-8cbc-4af6-a9c6-f5178a184cb1", "f729d99c-fe22-40b2-a60b-0a8d155f83fd", "9f17f435-e361-402a-a45b-239ae2de1499", "2cf0da72-949a-445f-b01e-21328e7f0b01", "e9d81b43-8cdc-4b05-978d-be0256050b44", "c3d71501-468b-4979-be0a-cfa5e9e57fa0", "898686b6-4513-4f4a-924a-fbdc1018b89f", "a9716ea6-2e50-4201-8680-4444e1f88b84", "675899ad-15e0-4a64-aeec-000470a3dfa9", "bec842a0-27ff-4ba6-893a-3d87dbc652bc", "afdb50f0-eaa8-401c-a18f-883876dd5e41", "636af58f-c0f6-4ca8-8a88-9ce591624b07", "2fb8265c-e816-4dc8-b3a1-93196b868a26", "237b7135-6c30-4bdf-bfdd-732db296687e", "33bca992-e164-40b0-ae12-04d8db6e3bb7", "d08ce7e3-de42-4f8b-afe0-74f5242a9aa6", "a341bab4-c4a1-40e3-aee6-5189fbcbf433", "ab4ecd3f-3cbf-4953-bb7a-3082e9a2b468", "3cb775e2-dbfd-491d-88b0-c71e5a06b076", "801f0a3c-c73f-4d0c-b1e8-cec3ed2fd920", "676db4ca-257a-4966-8e8a-40a607a0a5db"], "metadata": {"file_path": "data/paul_graham_essay.txt", "file_name": "paul_graham_essay.txt", "file_type": "text/plain", "file_size": 75042, "creation_date": "2024-02-16", "last_modified_date": "2024-02-16", "last_accessed_date": "2024-02-16"}}}}